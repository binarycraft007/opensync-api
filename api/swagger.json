{
  "swagger": "2.0",
  "info": {
    "version": "1.109.0",
    "title": "plume-customer",
    "description": "Customer APIs for NOC, IOS, Android, QA scripts, and www.plume.com"
  },
  "basePath": "/api",
  "paths": {
    "/Groups/{id}/customers/rel/{fk}": {
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Add a related item by id for customers.",
        "operationId": "Group.prototype.__link__customers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for customers",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Remove the customers relation to an item by id.",
        "operationId": "Group.prototype.__unlink__customers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for customers",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/{id}/customers": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries customers of Group.",
        "operationId": "Group.prototype.__get__customers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Group.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group.",
        "description": "<div><strong>200</strong>: Returns count of deleted groups, if any were deleted\n<div><strong>423</strong>: Locked, group cannot be deleted because it is used as a partnerId in Inventory",
        "operationId": "Group.prototype.delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "undefined": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Group.prototype.patchAttributes__put_Groups_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Group.prototype.patchAttributes__patch_Groups_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Group.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a group.",
        "description": "<div><strong>200</strong>: Success, group created.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.customCreate",
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "formData",
            "description": "an ObjectID id for porting group ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "importGroupIdAsPartnerIdIntoInventory",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Group.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/customers/search/{keyword}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.findCustomers",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "exactMatch",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/customers/{keyword}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.getCustomers",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "description": "could be name, email, or accountId, even partial",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/locations/{keyword}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Locations with serviceId or locationId within the caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.getLocations",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "description": "could be locationId, or serviceId.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/nodes/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers/locations/nodes with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>: No right to access the node.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.getNodesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "node Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "excludeUnclaimed",
            "in": "query",
            "description": "whether to filter out unclaimed nodes",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers/locations/nodes with caller's groups, and update it.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.patchNodesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "node Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "formData",
            "description": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "unclaimable",
            "in": "formData",
            "description": "unclaimable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/{id}/customers/count": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers/locations/count with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.getCustomerCount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Groups/{id}/customers/recent": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Queries Customers/locations/count with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Group.getRecentCustomers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/customers/search/{keyword}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers with caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.findCustomers",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "exactMatch",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 10,
            "type": "number",
            "format": "double"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/{id}/customers/count": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers/locations/count with caller's groups.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.getCustomerCount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "partner Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/{id}/customers/recent": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers/locations/count with caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.getRecentCustomers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/locations/{keyword}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Locations with serviceId or locationId within the caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.getLocations",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "description": "could be locationId, or serviceId.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/{partnerId}/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers/locations/nodes with caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>: No right to access the node.</div>\n<div><strong>404</strong>: partnerId or nodeId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.getNodesByIdForIntegrationUser",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "partner Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "excludeUnclaimed",
            "in": "query",
            "description": "whether to filter out unclaimed nodes",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/{partnerId}/customers/search/{keyword}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers with caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>: Not allowed to access partner.</div>\n<div><strong>404</strong>: partnerId or nodeId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.findCustomersForIntegrationUser",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "partner Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "exactMatch",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 10,
            "type": "number",
            "format": "double"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partners/nodes/{id}": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers/locations/nodes with caller's partnerId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>: No right to access the node.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.getNodesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "node Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "excludeUnclaimed",
            "in": "query",
            "description": "whether to filter out unclaimed nodes",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Partner"
        ],
        "summary": "Queries Customers/locations/nodes with caller's partnerId, and update it.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Partner.patchNodesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "node Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "formData",
            "description": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "unclaimable",
            "in": "formData",
            "description": "unclaimable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/termsAndPrivacyAccepted": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetches hasOne relation termsAndPrivacyAccepted.",
        "operationId": "Customer.prototype.__get__termsAndPrivacyAccepted",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/TermsAndPrivacy"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a terms and privacy acceptance for customer.",
        "description": "<div><strong>200</strong>: Success, terms and privacy updated.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.updateTermsAndPrivacy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "termsDocumentId",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "privacyDocumentId",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "termsAcceptedAt",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "privacyAcceptedAt",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/TermsAndPrivacy"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/_migration": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetches hasOne relation _migration.",
        "operationId": "Customer.prototype.__get___migration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "refresh",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Migration"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates a new instance in _migration of this model.",
        "operationId": "Customer.prototype.__create___migration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Migration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Migration"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update _migration of this model.",
        "operationId": "Customer.prototype.__update___migration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Migration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Migration"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes _migration of this model.",
        "operationId": "Customer.prototype.__destroy___migration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accessTokens": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates a new instance in accessTokens of this model.",
        "operationId": "Customer.prototype.__create__accessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/roles": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Queries roles of Customer.",
        "operationId": "Customer.prototype.__get__roles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Customer.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Customer.prototype.patchAttributes__put_Customers_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch attributes for a model instance and persist it into the data source.",
        "operationId": "Customer.prototype.patchAttributes__patch_Customers_{id}",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "description": "An object of model property name/value pairs",
            "required": false,
            "schema": {
              "description": "An object of model property name/value pairs",
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a model instance by {{id}} from the data source.",
        "description": "<div><strong>200</strong>: Success, customer details returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.deleteCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Customer.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a Plume customer.",
        "description": "<div><strong>200</strong>: Success, customer created.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.customCreate",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "person",
            "in": "formData",
            "description": "Person object should contain field 'imageId'  and object profile with field type (String)",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "location",
            "in": "formData",
            "description": "Location object should contain field 'name' (String)",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "passwordLessToken",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "source",
            "in": "formData",
            "required": false,
            "default": "customCreate",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/count": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Customer.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/login": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Login a user with username/email and password.",
        "operationId": "Customer.login",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Related objects to include in the response. See the description of return value for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n\n",
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/logout": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Logout a user with access token.",
        "operationId": "Customer.logout__post_Customers_logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/confirm": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Confirm a user registration with identity verification token.",
        "operationId": "Customer.confirm",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/reset": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Reset password for a user with email.",
        "operationId": "Customer.resetPassword",
        "parameters": [
          {
            "name": "options",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/backhaul": {
      "get": {
        "tags": [
          "Customer"
        ],
        "operationId": "Customer.prototype.getBackhaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Toggle secure backhaul for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putBackhaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "dynamicBeacon",
            "in": "formData",
            "description": "A valid state for the dynamic beaconing setting. Either auto, enable, or disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "wds",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "description": "auto || psk2 || sae-mixed",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationBackhaul"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/ipv6": {
      "get": {
        "tags": [
          "Customer"
        ],
        "operationId": "Customer.prototype.getIPv6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "operationId": "Customer.prototype.patchIPv6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "addressingConfig",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/search/{keyword}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Search the keyword on a particular field such as \"accountId\", \"name\", \"email\".",
        "description": "<div><strong>200</strong>: Success, return the search result.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.searchFields",
        "parameters": [
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "exactMatch",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all kvConfigs on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getKvConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KvConfig"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all kvConfigs on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postKvConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "module",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "persist",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/KvConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all kvConfigs on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchKvConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kvConfigs",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KvConfig"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/vapStates": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all Vap State on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getVapStates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/backhauls": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all Vap State on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getVapsAndStaStatesFromBackhaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvStates": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all kvStates on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getNodeKvStates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/schedules": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get custom shared schedules for a given Location ID.",
        "description": "<div><strong>200</strong>: Success, custom schedules list returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.listCustomSharedSchedules",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LocationCustomSchedule"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create \"custom shared\" schedules that shared by all persons and devices in a location.",
        "description": "<div><strong>200</strong>: Success, custom shared schedules applied.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist or is not known to Plume</div>\n<div><strong>422</strong>: schedules value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postCustomSharedSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "schedules",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationCustomSchedule"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/schedules/{templateId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch a custom shared schedule freeze template for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: templateId must be defined.</div>\n<div><strong>422</strong>: schedules value is invalid.</div>\n<div><strong>425</strong>: templateId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchCustomSharedSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "schedules",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationCustomSchedule"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete \"custom shared\" schedule shared by all persons and devices in a location.",
        "description": "<div><strong>204</strong>: Success, the custom shared schedule deleted.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist or is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteCustomSharedSchedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/linkedAccounts": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "link the outside account, such as Samsung user.",
        "description": "<div><strong>200</strong>: Success, the outside account inserted into the customer info/object.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.linkAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "provider",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "userDisplayName",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionToken",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/linkedAccounts/{provider}/{userId}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "link the outside account, such as Samsung user.",
        "description": "<div><strong>200</strong>: Success, the outside account inserted into the customer info/object.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteLinkedAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/qoe/liveMode": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the location qoe liveMode by api call and Kafka message",
        "description": "<div><strong>200</strong>: Success, the new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>400</strong>: enalbe and expiresAt, reportingInterval validation error.</div>\n<div><strong>422</strong>: expiresAt and reportingInterval validation error.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchLocationQoeLiveMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "reportingInterval",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs/{module}/{key}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete kvConfigs with selected module and key on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteKvConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "module",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/KvConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/passwordLessToken": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Verifies the email token and activates tokens related to it. Returns verified text with redirect to \"signup complete deep link\"",
        "description": "<div><strong>204</strong>: Success, return new appToken and send out the email with emailToken.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.verifyEmailPasswordlessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/accessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Generates usable passwordless accessToken for the account with the email address.",
        "description": "<div><strong>204</strong>: Success, return new appToken.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.createNewPasswordlessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/passwordLessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Generate two accessTokens with special scopes for the account with the email address and send a verification email.",
        "description": "<div><strong>200</strong>: Success, return new appToken, refreshToken and send out the email with emailToken.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Email must be defined and valid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.emailPasswordlessToken",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createIpLimitedAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create access token with limited privileges as defined for IP authenticated customers",
        "description": "<div><strong>200</strong>: Success, response object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.createIpLimitedAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ttl",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createReadDnsAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create access token to read data related to DNS security policies",
        "description": "<div><strong>200</strong>: Success, accessToken returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.createReadDnsAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createPatchServiceLevelAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create access token to patch customer serviceLevel used by ZUORA",
        "description": "<div><strong>200</strong>: Success, accessToken returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.createPatchServiceLevelAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ttl",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createGetMarketingExportDataAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create access token to get marketing data by CRM for campaigns",
        "description": "<div><strong>200</strong>: Success, accessToken returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.createGetMarketingExportDataAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ttl",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/firmware": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Firmware Upgrade Status",
        "description": "<div><strong>200</strong>: Success, response object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getFirmwareUpgradeStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Request Firmware Upgrade for a Location ID",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putFirmwareUpgradeRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/frontline/storage": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Create or Update the frontline storage for a Location ID",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putFrontlineStorage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the frontline storage for this location",
        "description": "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getFrontlineStorage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/FrontlineStorage"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the home security configuration for this location",
        "description": "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getHomeSecurity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable live motion streaming and/or motion events for this location",
        "description": "<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchHomeSecurity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "source",
            "in": "formData",
            "description": "Source of patch request; must be one of \"user\" or \"geofence\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "liveMotionEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "motionEventsEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "homeAwayActive",
            "in": "formData",
            "description": "Enable/disable motion events based on location Homeaway state",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/homeAway": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable homeAway wifiMotionEvents activation for this location",
        "description": "<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchHomeAwayActive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "homeAwayActive",
            "in": "formData",
            "description": "Enable/disable motion events based on location Homeaway state",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/sensitivity": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Configure motion event configuration for this location",
        "description": "<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchHomeSecuritySensitivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "cooldown",
            "in": "formData",
            "description": "sets required rest period for motion detected events to end, in seconds",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "petMode",
            "in": "formData",
            "description": "adjusts sensitivity of motion detected events for pets; must be one of \"none\", \"under10\", \"10to30\", \"over30\" and can only be set if sensitivity = high",
            "required": false,
            "type": "string"
          },
          {
            "name": "sensitivity",
            "in": "formData",
            "description": "adjusts sensitivity of motion detected events; must be one of \"low\", \"medium\", \"high\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/motionHistory": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the motion density history for this location",
        "description": "<div><strong>200</strong>: Success, motion density array returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getMotionHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "number of seconds\nin density calculation window; returned data points represent % of non-zero intensity values in the window",
            "required": false,
            "default": 3600,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/motionHistory/state": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the motion state history for this location",
        "description": "<div><strong>200</strong>: Success, motion state array returned (Each element of the array is in the form [\"val\", \"unix_ts\"], where \"val\" is one of: \n<div>0 - Not armed, not tripped</div>\n<div>1 - Not armed, tripped</div>\n<div>2 - Armed, not tripped</div>\n<div>3 - Armed, tripped</div></div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getMotionStateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "number of seconds\nin density calculation window; returned data points represent % of non-zero intensity values in the window",
            "required": false,
            "default": 3600,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/events/history": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the event history for this location",
        "description": "<div><strong>200</strong>: Success, event array returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getEventHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter events by category (Motion or Plume [config changes]). Multiple categories can be passed as a comma-separated string. Default is both.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of events to return. Defaults to 10",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "whether the returned events will be post-sorted by timestamp",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeSecurity/devices/sounding": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the sounding states for eligible devices in this location",
        "description": "<div><strong>200</strong>: Success, device sounding states returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceSoundingState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Optional mac address for single device lookup (fetches all devices by default)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch the sounding states for the given devices",
        "description": "<div><strong>200</strong>: Success, device sounding states returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchDeviceSoundingState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "soundingStates",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiMotion": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get WifiMotion config for this location",
        "description": "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getWifiMotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiMotion"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable WifiMotion feature for this location",
        "description": "<div><strong>200</strong>: Success, updated object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchWifiMotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "auto",
            "in": "formData",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiMotion"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/serviceLevel": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Set the service level for this location",
        "description": "<div><strong>200</strong>: Success, updated service Level object returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Invalid 'status' value.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchServiceLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "status",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the service level for this location",
        "description": "<div><strong>200</strong>: Success, return service Level object.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getServiceLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/marketingExport": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get detailed information of a location for CRM campaigns.",
        "description": "<div><strong>200</strong>: Success, location data in response.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.marketingExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "wifiMotionCapable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wifiMotionEnable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlineProtectionEnabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "personsWithoutAssignedDevices",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "peopleProfileEverCreated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "blockedSecurityEventsCountThirtyDay",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "devicesOnlineThirtyDays",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "mostActiveDevicesThirtyDays",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "appTimeCapable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "subscription",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastThirtyDaysSpeedTestAverages",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/homeAway/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the all the Homeaway events history for this location",
        "description": "<div><strong>200</strong>: Success, event array returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getHomeAwayLocationEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix epoch ms, defaults to 1 week ago",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix epoch ms, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of events to return. Defaults to 100",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetworks": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "WiFi Networks",
        "description": "<div><strong>200</strong>: Success, response object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getWifiNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/createOrUpdateUser": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Create or update a Plume NOC user.",
        "description": "<div><strong>200</strong>: Success, user created.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.createOrUpdateUser",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "roles",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "groups",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/registerWithGroups": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Register/create an account with an accountId plus email/password/groups.",
        "description": "<div><strong>200</strong>: Success, customer and location IDs returned.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.registerWithGroups",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "formData",
            "description": "must be unique, a UUID is recommended, min length is 6 characters.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Full name of customer, defaults to value of accountId",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupIds",
            "in": "formData",
            "description": "at least one groupId",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "partnerId",
            "in": "formData",
            "description": "PartnerId of customer for accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "acceptLanguage",
            "in": "formData",
            "description": "acceptable language",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "formData",
            "description": "location profile",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/register": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Register/create an anonymous account with an accountId instead of with email/password.",
        "description": "<div><strong>200</strong>: Success, customer and location IDs returned.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>422</strong>: Only integration role can set profile to property.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.register",
        "parameters": [
          {
            "name": "accountId",
            "in": "formData",
            "description": "must be unique, a UUID is recommended, min length is 6 characters.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Full name of customer, defaults to value of accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerId",
            "in": "formData",
            "description": "PartnerId of customer for accountId",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "acceptLanguage",
            "in": "formData",
            "description": "acceptable language",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "formData",
            "description": "location profile",
            "required": false,
            "type": "string"
          },
          {
            "name": "onboardingCheckpoint",
            "in": "formData",
            "description": "is the last passed onboarding step by the customer: 'PodsAdded' or 'OnboardingComplete';",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a new location.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required field(the location name) missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.createLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Queries locations of Customer.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.getLocations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "include",
            "in": "query",
            "description": "CSV value of objects to add to the response: summary (is the only option for now)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}": {
      "head": {
        "tags": [
          "Customer"
        ],
        "summary": "Verify that a Customer Id has a Location Id.",
        "description": "<div><strong>200</strong>: Success, no data returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.hasLocationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Location's combined State and Config by LocationId.",
        "description": "<div><strong>200</strong>: Success, full object returned.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: LocationId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.findLocationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "CSV value of objects to add to the response: summary (is the only option for now)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the location name.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.updateLocationName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's serviceId.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: You must specify at least one parameter to patch.</div>\n<div><strong>422</strong>: Only integration role can set profile to property.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "serviceId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Archive a location.",
        "description": "<div><strong>204</strong>: Success, location archived.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>409</strong>: Location already archived.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/subscription": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get Subscription details for this location",
        "description": "<div><strong>200</strong>: Success, subscription details returned</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch Subscription details for this location",
        "description": "<div><strong>202</strong>: Success, status patched</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Status is invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "enum of values include: Active, Suspended",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put Subscription details for this location",
        "description": "<div><strong>200</strong>: Success, service level returned</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ratePlanId",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appFacade/home": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve timezone, capabilities, summary, ... for this location.",
        "description": "<div><strong>200</strong>: Success, an array of properties returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.appFacadeHome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "daysOffline",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AppFacadeHomeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create  a Person for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Nickname must be defined and mac addresses must be valid and email needs to be provided when permission is provided.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postPersons",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageId",
            "in": "formData",
            "description": "unique identifier for referencing a Person's hosted profile image, defaults are PROFILE_MAN and PROFILE_WOMAN",
            "required": true,
            "type": "string"
          },
          {
            "name": "assignedDevices",
            "in": "formData",
            "description": "mac addresses of devices assigned to this Person",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "profile",
            "in": "formData",
            "description": "Profile object contains 'type' field - valid values: 'employee'",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "email",
            "required": false,
            "type": "string"
          },
          {
            "name": "permission",
            "in": "formData",
            "description": "Permission object for creating a manager for the location",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "serviceLinking",
            "in": "formData",
            "description": "serviceLinking object that links this Person object to a 3rd party's Person",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all Persons for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getPersons",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person for a location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>\n<div><strong>409</strong>: primaryDevice is not included in the list of assignedDevices[]</div>\n<div><strong>422</strong>: Mac addresses must be valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageId",
            "in": "formData",
            "description": "unique identifier for referencing a Person's hosted profile image",
            "required": false,
            "type": "string"
          },
          {
            "name": "primaryDevice",
            "in": "formData",
            "description": "mac addresses of Person's primary device",
            "required": false,
            "type": "string"
          },
          {
            "name": "assignedDevices",
            "in": "formData",
            "description": "mac addresses assigned to this Person",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "homeAwayNotification",
            "in": "formData",
            "description": "track person homeAway state",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "permission",
            "in": "formData",
            "description": "permission object for creating or deleting the manager",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "email for sending the manager invite",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceLinking",
            "in": "formData",
            "description": "serviceLinking object that links this Person object to a 3rd party's Person",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Person for a location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockUnassignedDevices",
            "in": "formData",
            "description": "block any devices previously assigned to Person (false by default)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Person by ID for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getPersonById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/devices/{mac}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Unassign a device from Person for a location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, Person id, or mac does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFromPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns the security policy Device for a Location ID.",
        "description": "<div><strong>200</strong>: Success, device returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceSecurity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DeviceResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's Security Policy for a location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>\n<div><strong>409</strong>: Device is assigned to a person so its security policy must be configured on the Person</div>\n<div><strong>422</strong>: Mac addresses must be valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchDeviceSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secureAndProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "iotProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "iotProtectReason",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive || workAppropriate'",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Security Policy by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocationSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secureAndProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "iotProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive || workAppropriate'",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "appliesToAllDevices",
            "in": "formData",
            "description": "hash map of security policy IDs that should be applied to all devices",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/qos/appPrioritization": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get status for app prioritization.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppPrioritizationLocationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update app prioritization config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchAppPrioritizationLocationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "true if app prioritization is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "App Prioritization mode - any of auto | enable | disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "isFirstTimeUserExperience",
            "in": "formData",
            "description": "true if it is first time user experience",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "template",
            "in": "formData",
            "description": "Template for app prioritization",
            "required": false,
            "type": "string"
          },
          {
            "name": "customSettingEnabled",
            "in": "formData",
            "description": "true if custom setting is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "customSetting",
            "in": "formData",
            "description": "Settings for app prioritization",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/qos/appPrioritization/customSetting": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Set custom setting to default for app prioritization.",
        "operationId": "Customer.prototype.deleteAppPrioritizationLocationConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/qos/appPrioritization/monitoring": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get monitoring metrics for app prioritization.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppPrioritizationMonitoring",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "formData",
            "description": "any of the values - total/15 minutes/1 hour/1 day",
            "required": false,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "formData",
            "description": "array of macs[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "trafficClasses",
            "in": "formData",
            "description": "array of trafficClasses[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "formData",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "formData",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortOrder",
            "in": "formData",
            "description": "TxBytes\"|| \"RxBytes",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "formData",
            "description": "Maximum number of devices to return.",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appqoe/traffic_class_stats": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get App QoE metrics for traffic classes.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppQoeTrafficClassMetrics__get_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "any of the values - total/1 minute/15 minutes/1 hour/1 day",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "query",
            "description": "array of macs[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "trafficClasses",
            "in": "query",
            "description": "array of trafficClasses",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of devices to return.",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get App QoE metrics for traffic classes.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppQoeTrafficClassMetrics__post_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "formData",
            "description": "any of the values - total/1 minute/15 minutes/1 hour/1 day",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "formData",
            "description": "array of macs",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "formData",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "formData",
            "description": "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "trafficClasses",
            "in": "formData",
            "description": "array of trafficClasses",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "limit",
            "in": "formData",
            "description": "Maximum number of devices to return.",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appqoe/AppQoeStatsByTrafficClass": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get App QoE metrics by traffic classes / devices / apps.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppQoeStatsByTrafficClass",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "formData",
            "description": "Any of \"last24Hours\",\"last7Days\",\"last30Days\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeApps",
            "in": "formData",
            "description": "Default false, to include app stats in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "trafficClassNames",
            "in": "formData",
            "description": "array of traffic classes - default list - av_streaming, gaming, video_conferencing",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/qos/appPrioritization/templateConfig": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get AppPrioritization template configs",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppPrioritizationTemplateConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/hourlyBlockedCounts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Hourly Blocked Counts for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationSecurityPolicyHourlyCounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Counts"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/hourlyBlockedCounts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Hourly Blocked Counts for a Device for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceSecurityPolicyHourlyCounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Counts"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/hourlyBlockedCounts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Hourly Blocked Counts for a Person for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getPersonSecurityPolicyHourlyCounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "person",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Counts"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/hourlyBlockedCounts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Hourly Blocked Counts for group Of Unassigned Devices for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyHourlyCounts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Counts"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Events for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationSecurityPolicyEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "protectionType",
            "in": "query",
            "required": false,
            "default": "ihp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Location's Security Events history for a location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteLocationEventsHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "categories",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "reason",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/guard/events": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Guard Event Domain Groups for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationGuardEventsTldOrIp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "formData",
            "description": "array of macs[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "persons",
            "in": "formData",
            "description": "array of personIds[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "tldOrIp",
            "in": "formData",
            "description": "top level domain or IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "protectionType",
            "in": "formData",
            "description": "filter by protectionType: ihp | ohp. Returns all types by default.",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventTypes",
            "in": "formData",
            "description": "filter by event type, any combo of: 'adBlocking','teenagers','kids','adultAndSensitive','secureAndProtect','ipThreatOutbound','ipThreatInbound', 'iotProtect'. Returns all types by default.",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "formData",
            "description": "Any of \"last24Hours\", \"last7Days\", \"last30Days\"",
            "required": false,
            "default": "last30Days",
            "type": "string"
          },
          {
            "name": "groupOfUnassignedDevices",
            "in": "formData",
            "description": "to include the group of unassigned devices",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/guard/personEventsSummary": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Guard Event Stats for all persons in a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationGuardPersonEventsSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"last24Hours\",\"last7Days\",\"last30Days\"",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/guard/eventStats": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Guard Event Stats for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationGuardEventStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "formData",
            "description": "array of macs[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "persons",
            "in": "formData",
            "description": "array of personIds[]",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "protectionType",
            "in": "formData",
            "description": "filter by protectionType: ihp | ohp. Returns all types by default.",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventTypes",
            "in": "formData",
            "description": "filter by event type, any combo of: 'adBlocking','teenagers','kids','adultAndSensitive','secureAndProtect','ipThreatOutbound','ipThreatInbound', 'iotProtect'. Returns all types by default.",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "formData",
            "description": "Any of \"last24Hours\",\"last7Days\",\"last30Days\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupOfUnassignedDevices",
            "in": "formData",
            "description": "to include the group of unassigned devices",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Events for Device for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceSecurityPolicyEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "protectionType",
            "in": "query",
            "required": false,
            "default": "ihp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Events for Person for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getPersonSecurityPolicyEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "person",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "protectionType",
            "in": "query",
            "required": false,
            "default": "ihp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy Events for groupOfUnassignedDevices for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "protectionType",
            "in": "query",
            "required": false,
            "default": "ihp",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityEventsResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Security Policy for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Default Device Group Security Policy by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchGroupOfUnassignedDevicesSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secureAndProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "iotProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive || workAppropriate'",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Security Policy for a location ID to include a whitelisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postLocationSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "eventType",
            "in": "formData",
            "description": "EventType field from events response - can be 'kids', 'teenagers', 'secureAndProtect', etc",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "formData",
            "description": "Source field from events response - can be 'brightcloud', 'webpulse', 'gatekeeper', 'gatekeeper-ohp'",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post a request for a whitelist exception to be added to your person profile.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postWhitelistApprovalRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a list of pending approval requests for this location.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getWhitelistApprovalRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests/{requestId}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Approve a persons whitelist request and add it to the security policy.",
        "description": "<div><strong>204</strong>: No content.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.approveWhitelistRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "persons",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Reject an approval request for a website whitelist",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.rejectWhitelistRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Locations's Security Policy for a location ID to remove a whitelisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Security Policy for a location ID to include a blacklisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postLocationSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Security Policy for a location ID to remove a blacklisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Default Device Group Security Policy for a location ID to include a whitelisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Default Device Group Security Policy for a location ID to remove a whitelisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Default Device Group Security Policy for a location ID to include a blacklisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Default Device Group Security Policy for a location ID to remove a blacklisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Approve a previously blacklisted anomalous dns for a Device on a location.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceSecurityPolicyAnomalyWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fqdn",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "formData",
            "required": false,
            "default": "trust",
            "type": "string"
          },
          {
            "name": "ttl",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist/{fqdn}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's Anomaly Security Policy for a location ID to remove a whitelisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceSecurityPolicyAnomalyWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fqdn",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/experience": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Initiate an Anomaly Experience (demo) for a Device on a location.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceSecurityPolicyAnomalyExperience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fqdn",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete an Anomaly Experience (demo) for a Device on a location.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceSecurityPolicyAnomalyExperience",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceSetup": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Setup a Mobile Device for Security Out of Home Protection (returns a Deeplink for use with Mobolize).",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postLocationSecurityPolicyOHPDeviceSetup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "lanIpv4",
            "in": "formData",
            "description": "Mobile device lanIpv4 address, if any",
            "required": false,
            "type": "string"
          },
          {
            "name": "lanIpv6",
            "in": "formData",
            "description": "Mobile device lanIpv6 address, if any",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceUuid": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the Device UUID Mapping for Out of Home Protection.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putLocationSecurityPolicyOHPDeviceUuidMapping",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "lanIpv4",
            "in": "formData",
            "description": "Mobile device lanIpv4 address, if any",
            "required": false,
            "type": "string"
          },
          {
            "name": "lanIpv6",
            "in": "formData",
            "description": "Mobile device lanIpv6 address, if any",
            "required": false,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/ohp": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the Device UUID Mapping for Out of Home Protection.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Device does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchDeviceOHPConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "OHPNotificationsFlags",
            "in": "formData",
            "description": "OHP feature flags",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "disableMobilizeSdk",
            "in": "formData",
            "description": "enable or disable OHP SDK on the device",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/protectionState": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the Device Protection State for Out of Home Protection.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putLocationSecurityPolicyOHPProtectionState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "formData",
            "description": "Mobile device uuid (as was assigned by Mobolize)",
            "required": true,
            "type": "string"
          },
          {
            "name": "protectionState",
            "in": "formData",
            "description": "ProtectionState info as obtained directly from the Mobolize SDK, null if deleting ProtectionState",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post a Remote Connection Allow IpAddress/ttl for the given device and Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Fields have an invalid type or value.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postRemoteConnectionsAllow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "either ipv4 or ipv6",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "ipaddress",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "description": "UTC timestamp in ISO 8601 format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow/{ipaddr}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Remote Connection Allow IpAddress/ttl for the given device and Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteRemoteConnectionsAllow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ipaddr",
            "in": "path",
            "description": "ipaddress",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allowAll": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post a Remote Connection Allow All/ttl for the given device and Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Fields have an invalid type or value.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postRemoteConnectionsAllowAll",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "description": "UTC timestamp in ISO 8601 format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Remote Connection Allow All for the given device and Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteRemoteConnectionsAllowAll",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/remoteConnections": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch a Remote Connections Config for the given Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchRemoteConnectionsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "Any of \"auto\", \"enabled\", \"disabled\", \"highRiskOnly\"",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Unauthorized Remote Connections config for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getRemoteConnectionsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Security Policy for a location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchPersonSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "secureAndProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "iotProtect",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive || workAppropriate'",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/profile": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Profile for a location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchPersonProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Valid values: 'employee'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Person's Profile for a location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Security Policy for a location ID to include a whitelisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postPersonSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "eventType",
            "in": "formData",
            "description": "EventType field from events response - can be 'kids', 'teenagers', 'secureAndProtect', etc",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "formData",
            "description": "Source field from events response - can be 'brightcloud', 'webpulse', 'gatekeeper', 'gatekeeper-ohp'",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Security Policy for a location ID to remove a whitelisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Person id, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Security Policy for a location ID to include a blacklisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postPersonSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's Security Policy for a location ID to remove a blacklisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Person id, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's Security Policy for a location ID to include a whitelisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "eventType",
            "in": "formData",
            "description": "EventType field from event response - can be 'kids', 'teenagers', 'secureAndProtect, etc'",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "formData",
            "description": "Source field from events response - can be 'brightcloud', 'webpulse', 'gatekeeper', 'gatekeeper-ohp'",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's Security Policy for a location ID to remove a whitelisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesWhitelist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's Security Policy for a location ID to include a blacklisted DNS entry.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "geoLocation",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "endTimestamp",
            "in": "formData",
            "description": "the end time stamp,  UTC unix epoch timestamp in ms",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "akamaiCategoryId",
            "in": "formData",
            "description": "the akamai category id, number",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist/{dns}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's Security Policy for a location ID to remove a blacklisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device, or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/configAudit/events": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Config Audit Trail Events for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationConfigAuditEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appFacade/wifiDashboard": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "WiFi Dashboard",
        "description": "<div><strong>200</strong>: Success, response object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getWifiDashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiDashboardResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/devices/{mac}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Nickname a Customer's device for all locations.",
        "description": "<div><strong>200</strong>: Success, device name has been updated<br/>but not validated as a device that <br/>has ever connected.</div>\n<div><strong>400</strong>: nickname value must be defined.</div>\n<div><strong>404</strong>: customer id and/or mac does not exist.</div>\n<div><strong>422</strong>: nickname value must be less than 33 characters.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putDeviceNickname",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/forcedSteer": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Force a device to use the 2.4Ghz band with auto expire.",
        "description": "<div><strong>204</strong>: Success, forced steer enabled.</div>\n<div><strong>404</strong>: Location ID or Device mac not found or the device has not been online in the last 31 days</div>\n<div><strong>422</strong>: expiresAt is outside of the expected range 5 to 60 minutes in the future</div>\n<div><strong>422</strong>: expiresAt is an invalid UTC date</div>\n<div><strong>422</strong>: expiresAt cannot be in the past</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.setForcedSteer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "locationId",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "MAC address of the target device. Must have been online in the last 31 days.",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "description": "time of expiration in RFC 3339 format (e.g. 2021-11-24T09:13:33+00:00), must be between 5 and 60 minutes in the future.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Disable 2.4Ghz band enforcement early.",
        "description": "<div><strong>204</strong>: Success, forced steer ended early.</div>\n<div><strong>404</strong>: Location ID or Device mac not found or the device has not been online in the last 31 days</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteForcedSteer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "locationId",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "MAC address of the target device. Must have been online in the last 31 days.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/customType": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Customer's device type configuration (user feedback).",
        "description": "<div><strong>200</strong>: Success, device type has been updated<br/>but not validated as a device that <br/>has ever connected.</div>\n<div><strong>400</strong>: nickname value must be defined.</div>\n<div><strong>404</strong>: customer id and/or mac does not exist.</div>\n<div><strong>422</strong>: nickname value must be less than 33 characters.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchCustomDeviceType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "brand",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "model",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "osName",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/CustomDeviceType"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a WiFi SSID and/or PSK for a Location ID.",
        "description": "<div><strong>200</strong>: Success, in your future 100 mbps for all devices I see. -Yoda.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>409</strong>: A WifiNetwork already exists for this location.</div>\n<div><strong>422</strong>: encryptionKey or ssid must be defined, or key length < 8.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postWifiNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "description": "Needs to be a minimum of 8 characters",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "description": "psk-mixed (WPA+WPA2) || sae-mixed (WPA2+WPA3) || psk2 (WPA2 only) || sae (WPA3 only)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "wifiNetwork": {
                  "$ref": "#/definitions/WifiNetwork"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a WiFi SSID and/or PSK for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id, or wifi network does not exist.</div>\n<div><strong>422</strong>: encryptionKey or ssid must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putWifiNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "wifiNetwork": {
                  "$ref": "#/definitions/WifiNetwork"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the SSID of the WifiNetwork",
        "description": "<div><strong>200</strong>: Success, access zone returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchWifiNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "uapsd",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupRekey",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "fastTransition",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "minWifiMode24",
            "in": "formData",
            "description": "auto || 11b || 11g || 11n",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateMode",
            "in": "formData",
            "description": "Stop collecting user info like DNS-Queries, UserAgent etc",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "enabled:true for active WiFi radios, enabled:false to turn `off` all WiFi radios",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiNetwork"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current WiFi SSID and PSK for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current Wifi Network returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or WifiNetwork does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getWifiNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "wifiNetwork": {
                  "$ref": "#/definitions/WifiNetwork"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a new WiFi Password",
        "description": "<div><strong>200</strong>: Success, all passwords returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Password validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postWifiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "accessZone",
            "in": "path",
            "description": "home | guests | internetAccessOnly",
            "required": true,
            "type": "string"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": "devices can connect using this encryptionKey",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "format",
            "in": "formData",
            "description": "encryptionKey | phoneNumber",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "description": "UTC in ISO 8601 String format",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'adultAndSensitive'",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WifiNetworkKey"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys/{keyId}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a WiFi Password",
        "description": "<div><strong>200</strong>: Success, all passwords returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>: Cannot disable a read-only key</div>\n<div><strong>422</strong>: Password validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putWifiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "accessZone",
            "in": "path",
            "description": "home | guests | internetAccessOnly",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "Unique password id: 0-9",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": "devices can connect using this encryptionKey",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "format",
            "in": "formData",
            "description": "encryptionKey | phoneNumber",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "description": "UTC in ISO 8601 String format",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Valid values: 'adultAndSensitive'",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WifiNetworkKey"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a WiFi Password",
        "description": "<div><strong>200</strong>: Success, all passwords returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>: Cannot delete a read-only key</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteWifiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "accessZone",
            "in": "path",
            "description": "home | guests | internetAccessOnly",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "Unique password id: 0-9",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WifiNetworkKey"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: Update home devices visible to guests.",
        "description": "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>: Device mac validation failed.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putDevicesVisibleToGuests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "devicesVisibleToGuests",
            "in": "formData",
            "description": "array of macs[]",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests/{mac}": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: Update home devices visible to guests.",
        "description": "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>: Device mac validation failed.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.addDeviceVisibleToGuests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac to be added",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: Update home devices visible to guests.",
        "description": "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>: Device mac validation failed.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.removeDeviceVisibleToGuests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac to be removed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a new WiFi Access Zone",
        "description": "<div><strong>200</strong>: Success, all access zones returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postWifiAccessZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "name of access zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "for now, must be 'guests'",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessibleDevices",
            "in": "formData",
            "description": "macs of home devices visible to this guest access zone",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WifiAccessZone"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZoneId}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a WiFi Access Zone",
        "description": "<div><strong>200</strong>: Success, remaining access zones returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>: Cannot delete a read-only access zone</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteWifiAccessZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "accessZoneId",
            "in": "path",
            "description": "access zone id",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WifiAccessZone"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/keys/{keyId}/invitations": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update home devices visible to guests.",
        "description": "<div><strong>200</strong>: Success, Invitation returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork accessZone zoneId/keyId does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getWifiInvitationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "zoneId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "keys id be added",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/accessibleDevices/{mac}": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Add a device mac to a WiFi Access Zone",
        "description": "<div><strong>200</strong>: Success, all access zones returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceToAccessZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "zoneId",
            "in": "path",
            "description": "id of access zone",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "the device mac to be added to the access zone",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device mac from a WiFi Access Zone",
        "description": "<div><strong>200</strong>: Success, all access zones returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFromAccessZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "zoneId",
            "in": "path",
            "description": "id of access zone",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "the device mac to be added to the access zone",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an access zone",
        "description": "<div><strong>200</strong>: Success, wifiNetwork returned</div>\n<div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>: Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchAccessZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "zoneId",
            "in": "path",
            "description": "id of access zone",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "description",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessibleDevices",
            "in": "formData",
            "description": "array of home macs[] visible to this access zone",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiNetwork"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/bleMode": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable or Disable BLE beaconing for all Pods at a location for Pod location services (e.g. for Pods Naming).",
        "description": "<div>With the mode of \"on\", all connected pods at this location will have their bluetooth beacon turned on for locating purposes. Each BLE beacon contains the serial number of the transmitting Pod. A setting of \"off\", turns off the BLE beaconing for all Pods. With mode set to \"wps\", all connected pods at this location will have their bluetooth beacon turned on for WPS related proximity measurements.</div>\n<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: bleMode must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putBleMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "on/off/wps/connectable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable or Disable BLE beaconing for the specific Pod at a location.",
        "description": "<div>With the mode of \"on\", all connected pods at this location will have their bluetooth beacon turned on for locating purposes. Each BLE beacon contains the serial number of the transmitting Pod. A setting of \"off\", turns off the BLE beaconing for all Pods. With mode set to \"wps\", all connected pods at this location will have their bluetooth beacon turned on for WPS related proximity measurements.</div>\n<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: bleMode must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putBleModeForNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "on/off/wps/connectable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/ledMode": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the LED mode on a particular Node for a Location ID.",
        "description": "When the mode is set to \"locate\", the Node with that ID at this locationId, will have its LED blinked for locating purposes. The mode is set to \"normal\" to return the LED to its normal mode of operation.\n<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: ledMode must be defined.</div>\n<div><strong>422</strong>: ledMode must be \"locate\" or \"normal\".</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putLedMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "locate/normal",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "retrieve the speed test result for a node.",
        "description": "<div><strong>200</strong>: Success, run.</div>\n<div><strong>422</strong>: locationId or nodeId isn't defined.</div>\n<div><strong>500</strong>: Internal server error</div>\n<div><strong>503</strong>: Service Unavailable.</div>",
        "operationId": "Customer.prototype.getSpeedTestResults",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "days/hours/minutes",
            "required": false,
            "default": "days",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "X # of days/hours/minutes",
            "required": false,
            "default": 7,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults/{requestId}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "retrieve single speed test result by request id for a node.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: locationId or nodeId isn't defined.</div>\n<div><strong>404</strong>: Speed test not found.</div>\n<div><strong>500</strong>: Internal server error</div>\n<div><strong>503</strong>: Service Unavailable.</div>",
        "operationId": "Customer.prototype.getSpeedTestResultsByRequestId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTest": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Run speed test for a node.",
        "description": "<div><strong>200</strong>: Success, run.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer, location or node does not exists.</div>\n<div><strong>422</strong>: Invalid test type.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postSpeedTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "testType",
            "in": "formData",
            "required": true,
            "default": "OOKLA",
            "type": "string"
          },
          {
            "name": "serverId",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "uplinkType",
            "in": "formData",
            "required": false,
            "default": "wire",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/ispSpeedTest": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Run ISP speed test for GW node on mobile request.",
        "description": "<div><strong>200</strong>: Success, run.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer or location does not exists.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postRunMobileIspSpeedTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "serverId",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "uplinkType",
            "in": "formData",
            "required": false,
            "default": "wire",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/ispSpeedTestConfiguration": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable|Disable ispSpeedTestConfiguration to schedule speed tests.",
        "description": "<div><strong>200</strong>: Success, run.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer or location does not exists.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putIspSpeedTestConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": "boolean but marked as 'any' because our mobile app platforms mixed string and boolean primitive",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enableAllNodes",
            "in": "formData",
            "description": "boolean but treated as a string since it is optional",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "ispSpeedTestConfiguration": {
                  "$ref": "#/definitions/LocationSpeedTest"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkMode": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the Network Mode for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putNetworkMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkMode",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "location": {
                  "$ref": "#/definitions/Location"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current Network Mode for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current NetworkMode returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or NetworkMode does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getNetworkMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "networkMode": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/reboot": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Reboots a particular on-line Node for a Location ID.",
        "description": "<div><strong>204</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>422</strong>: Delay, is not between 0 and 100000.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.rebootLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "delay",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/reboot": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Reboots a single on-line Node for a Location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id or nodeId, does not exist.</div>\n<div><strong>422</strong>: Delay, is not between 0 and 100000.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.rebootNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "delay",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/optimize": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Manually initiate an Optimize request for a Location ID.",
        "description": "<div><strong>200</strong>: Success, optimize request sent.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.optimize",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "forcePcs",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appFacade/dashboard": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current speed test aggregation result for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current speedTest result and most active devices returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or NetworkMode does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSpeedTestResultsForApp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "excludeDevices",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/capabilities": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the non-base feature capabilities supported by a particular Location ID.",
        "description": "<div>The controller will implement logic to determine the non-base features supported by the Pods in the location ID. The feature capability is determined on the system level, and not per individual Pod.</div>\n<div>The mobile apps or other WebUIs should only show the UI for a feature if the disabled value equals \"false\".</div>\n<div>&nbsp;</div>\n<div><strong>200</strong>: Success, current Capabilities returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getLocationCapabilities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/CapabilitiesResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/autoExpire": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put all devices from a person to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putPersonFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete all devices from a person to be frozen for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/suspend": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a person suspend for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putPersonFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete person suspend for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/forever": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a person forever freeze for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putPersonFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a person forever freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/{freezeTemplateId}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a person to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>\n<div><strong>501</strong>: Not Implemented, if location is utilizing shared location freeze schedules</div>",
        "operationId": "Customer.prototype.putPersonFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are 'untilMidinight', 'schoolNights', etc.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "schedules",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post a shared schedule uuid freeze for a person for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>404</strong>: FreezeTemplateId not found.</div>\n<div><strong>404</strong>: Person not found.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postPersonFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are uuids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a person to be frozen for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are 'untilMidinight', 'schoolNights', etc.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/freezes": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a person to be frozen for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deletePersonAllFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/autoExpire": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a device to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putDeviceFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device to be frozen for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/suspend": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a device suspend for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putDeviceFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device suspend for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/forever": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a device forever freeze for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putDeviceFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device forever freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/residentialGwManaged": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a device residentialGwManaged freeze for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putDeviceFreezeResidentialGwManaged",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "schedules",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device residentialGwManaged freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFreezeResidentialGwManaged",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/{freezeTemplateId}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put a device to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>\n<div><strong>501</strong>: Not Implemented, if location is utilizing shared location freeze schedules</div>",
        "operationId": "Customer.prototype.putDeviceFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are 'untilMidinight', 'schoolNights', etc.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllExceptSuspend",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "schedules",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post a shared schedule uuid freeze for a device for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>404</strong>: FreezeTemplateId not found</div>\n<div><strong>404</strong>: Device not found</div>\n<div><strong>422</strong>: GroupOfUnassignedDevices has active freeze schedule</div>\n<div><strong>422</strong>: Person has active freeze schedule</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postDeviceFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are uuids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device to be frozen for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteDeviceFreeze",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are 'untilMidinight', 'schoolNights', etc.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/freezes": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete/clear all device freezes templateIds for a mac.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteAllDeviceFreezes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/freeze/autoExpire": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Put all devices except some to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocationFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includedDeviceMacs",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "includedPersonIds",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all devices/persons except some to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete the location freeze/autoExpire for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteLocationFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/ssid": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current WiFi SSID for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current Wifi Network returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or WifiNetwork does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSsid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "ssid": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Front Haul Portal configs for a given Location ID.",
        "description": "<div><strong>200</strong>: Success, FrontHaul Networks returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getFrontHaulNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a Front Haul Network for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>\n<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postFrontHaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessZone",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssidBroadcast",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Captive Portal configs for a given Location ID.",
        "description": "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a Captive Portal Network for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>\n<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postCaptivePortal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "bandwidthLimit",
            "in": "formData",
            "description": "attributes: \"enabled\" boolean, \"type\": \"absolute\"|\"percentage\", \"upload\"/\"download\" - either as percentage or absolute (Mbps)",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "sessionTimeLimitSec",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Front Haul for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>\n<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchFrontHaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessZone",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssidBroadcast",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Front Haul for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteFrontHaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Captive Portal for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>\n<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchCaptivePortal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "encryptionKey",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "bandwidthLimit",
            "in": "formData",
            "description": "attributes: \"enabled\" boolean, \"type\": \"absolute\"|\"percentage\", \"upload\"/\"download\" - either as percentage or absolute (Mbps)",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "wpaMode",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "sessionTimeLimitSec",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a CaptivePortal for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteCaptivePortal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guests": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the list of Guests which were logged into the given captivePortal network during the current day.",
        "description": "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalGuests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by: <connectionTime>",
            "required": false,
            "default": "connectionTime",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 20,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create the DPP setting for a Fronthaul Network.",
        "description": "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>\n<div><strong>422</strong>: Invalid keys.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postFrontHaulsDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "should we configure dpp for this network - defaults to true",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "curve",
            "in": "formData",
            "description": "one of predefined elliptic curves, - optional,  if missing in request default to prime256v1",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateKey",
            "in": "formData",
            "description": "privateKey, must also provide public part if present, optional",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "publicKey",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current DPP configurator for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getFrontHaulsDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/bootstrapUris": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a bootstrap for DPP setting for a Fronthaul Network.",
        "description": "<div><strong>200</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>\n<div><strong>422</strong>: Invalid curve.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postFrontHaulsDppBootstrap",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "curve",
            "in": "formData",
            "description": "one of predefined elliptic curves, - optional,  if missing in requset default to prime256v1",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/dpp/enrollments": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Create and persist a list of DPP enrollments",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or wifi network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putDppEnrollments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enrollments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/enrollments": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create an enrollment for DPP setting for a fronthaul secondary network.",
        "description": "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or wifi network does not exist.</div>\n<div><strong>404</strong>: Configurator keys for network not found.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postFrontHaulsDppEnrollment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "bootstrapUri",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/locationIdentifier": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current OHP identifier for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getOhpLocationIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/onboardingLocationIdentifier": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the onboarding identifier for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getOnboardingLocationIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/networkUsage": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the Captive Portal Network Usage stats for the given network.",
        "description": "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postCaptivePortalNetworkUsageStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "inclusions",
            "in": "formData",
            "description": "Fields to include in response",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guestEmailCollectionInfo": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the Captive Portal Network guest info download availability for the given network.",
        "description": "<div><strong>200</strong>: Success, CaptivePortal Networks guest info download availability returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalGuestEmailCollectionInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "description": "number of days for how far back in history for data",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit how many emails we wish to return",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "emailCount": {
                  "type": "number",
                  "format": "double"
                },
                "emailCollectionEnabled": {
                  "type": "boolean"
                },
                "emailLoginEnabled": {
                  "type": "boolean"
                },
                "consentEnabledOrNotRequired": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/enableGuestEmailCollection": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch the Captive Portal Network to be compliant for guest email collection.",
        "description": "<div><strong>200</strong>: Success, CaptivePortal Networks has been patched.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postCaptivePortalEnableGuestEmailCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the Captive Portal campaign for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success, campaign returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCampaignCaptivePortalNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch the Captive Portal campaign for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success, campaign patched.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchCampaignCaptivePortalNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "campaignPayload",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/branding": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch the Captive Portal campaign branding properties for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success, campaign branding patched.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchCampaignCaptivePortalBranding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/preview": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "POST Captive Portal campaign preview for a given Location ID/NetworkId.",
        "description": "<div><strong>200</strong>: Success, campaign posted.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postCampaignPreviewCaptivePortalNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "campaignPayload",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/companyInfo/search": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the companyInfo for the given url (domain).",
        "description": "<div><strong>200</strong>: Success, company info returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCompanyInfoCaptivePortalNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "url",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "urlType",
            "in": "formData",
            "description": "only 'domain' currently supported",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/ownerAppIds": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the AppId info for the given location.",
        "description": "<div><strong>200</strong>: Success, appId info returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getAppIdInfoCaptivePortalNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/uploadCampaignAsset": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Upload campaign asset for given location.",
        "description": "<div><strong>200</strong>: Success, appId info returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postCaptivePortalCampaignAsset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfig"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/sendGuestDetails": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Send Captive Portal Guest details to requesters email for a given Location ID/NetworkId.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putCaptivePortalSendDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "number of days for how far back in history for data",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "formData",
            "description": "limit how many emails we wish to return",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetails": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Download Captive Portal Guest details for a given Location ID/NetworkId.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalSendDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetailsDirect": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Download Captive Portal Guest details for a given Location ID/NetworkId without accessing Amazon S3.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalSendDetailsDirect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get CaptivePortal authorized clients",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getCaptivePortalAuthorizedClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Post CaptivePortal authorized clients",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postCaptivePortalAuthorizedClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "expireAt",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients/{mac}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Post CaptivePortal authorized clients",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchCaptivePortalAuthorizedClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expireAt",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete Authorized Client",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteCaptivePortalAuthorizedClients",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/clientSteering": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Toggle auto:on/off client steering for a device.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid mac address.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchDeviceClientSteering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "device mac address",
            "required": true,
            "type": "string"
          },
          {
            "name": "auto",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "steeringClass",
            "in": "formData",
            "description": "override deviceTypeId for testing purposes",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/ClientSteeringConfiguration"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/councilman/resync": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Push Security Configurations to Councilman.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putCouncilmanResync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityConfiguration": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch Security Configurations for location (preferredIntelligence, etc)",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid securityConfig.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchSecurityConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "securityConfig",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SecurityConfiguration"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/bandSteering": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable band steering for a Location ID (deprecated)",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putBandSteering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "auto",
            "in": "formData",
            "required": true,
            "default": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationBandSteering"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Set mode for band steering",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid mode.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocationBandSteering",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationBandSteering"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/controlMode": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get control mode for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getControlMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Set control mode for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putControlMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationControlMode"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/monitorMode": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable monitor mode for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putMonitorMode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationMonitorMode"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/optimizations": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable optimizations for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid dfsMode, prefer160MhzMode, hopPenalty or preCACScheduler provided.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putOptimizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "auto",
            "in": "formData",
            "description": "defaults to true",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "dfsMode",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels, usDfs, deviceAware",
            "required": false,
            "default": "auto",
            "type": "string"
          },
          {
            "name": "prefer160MhzMode",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable",
            "required": false,
            "default": "auto",
            "type": "string"
          },
          {
            "name": "hopPenalty",
            "in": "formData",
            "description": "enum of values include: auto, low, medium, high",
            "required": false,
            "default": "auto",
            "type": "string"
          },
          {
            "name": "preCACScheduler",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable",
            "required": false,
            "default": "auto",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Optimizations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable/disable optimizations for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid dfsMode, prefer160MhzMode, zeroWaitDfsMode, hopPenalty or preCACScheduler provided.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchOptimizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "auto",
            "in": "formData",
            "description": "defaults to true",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "dfsMode",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels, usDfs, deviceAware",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefer160MhzMode",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "zeroWaitDfsMode",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "hopPenalty",
            "in": "formData",
            "description": "enum of values include: auto, low, medium, high",
            "required": false,
            "type": "string"
          },
          {
            "name": "preCACScheduler",
            "in": "formData",
            "description": "enum of values include: auto, enable, disable",
            "required": false,
            "default": "auto",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Optimizations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/locale": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Configure locale values for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Region value is not valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putLocale",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "region",
            "in": "formData",
            "description": "during optimizations, used to determine allowed WiFi channels. Possible values: US, SINGAPORE, UK, EU, CANADA, JP.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Locale"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/authorizations": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the number of authorized leaf pods for a Location ID.",
        "description": "<div>Number of leaf pods that are authorized to be claimed and be a part of the Plume network</div>\n<div><strong>200</strong>: Success, numPodsAuthorized returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAuthorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Authorizations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Configure number of authorized leaf pods for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_authorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "numPodsAuthorized",
            "in": "formData",
            "description": "number of leaf pods that are authorized to be claimed and be a part of the Plume network",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Authorizations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodeAuthorizations": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Configure number of authorized leaf pods grouped by model id for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_nodeAuthorizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "numNodesAuthorized",
            "in": "formData",
            "description": "number of leaf pods grouped by model id that are authorized to be claimed and be a part of the Plume network",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Authorizations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wanSettings": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: Get the WAN Settings for a Location ID.",
        "description": "<div><strong>200</strong>: Success, WAN Settings returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationWanSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationWanSettings"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: Persist WAN Settings for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Required fields are not valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putLocationWanSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "wanSettings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationWanSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationWanSettings"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wanConfiguration": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get WAN Configuration for a Location ID.",
        "description": "<div><strong>200</strong>: Success, WAN Settings returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationWanConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Persist WAN Configuration for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Required fields are not valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putLocationWanConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pppoe",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "uplink",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "staticIPv4",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "publishedWithBLE",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/persistentConfigs": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete persistent data/configs from node in runtime.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location or Node, does not exist.</div>\n<div><strong>422</strong>: Required fields are not valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteNodePersistentConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "location id",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node id",
            "required": true,
            "type": "string"
          },
          {
            "name": "deleteAllPersistentConfigs",
            "in": "formData",
            "description": "whether all persistent config data or just GW-offline data will be deleted",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcp": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Record or update a new DHCP subnet/subnetMask for a Location ID.",
        "description": "<div><strong>200</strong>: Success, DHCP are returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: subnet value is empty, or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putDhcp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "subnet",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "subnetMask",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "startIp",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "endIp",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get current DHCP Configuration details for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current dhcp returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or dhcp does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDhcp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a current DHCP IP reservation and the associated port forwarding entries for a particular MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, remaining DhcpReservations are returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration or DhcpReservation is empty.</div>\n<div><strong>422</strong>: mac is empty or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteDhcpReservation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DhcpReservation"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Record or update a new DHCP IP Reservation for a particular MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, all DHCP Reservations are returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>412</strong>: Subnet prefix is unknown.</div>\n<div><strong>422</strong>: IP/mac value is empty, or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putDhcpReservation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ip",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "hostName",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DhcpReservation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get current DHCP IP reservation details for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DhcpReservation returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or DhcpReservation does not exist.</div>\n<div><strong>422</strong>: mac is empty, or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDhcpReservation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DhcpReservation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get current DHCP IP reservation details for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DhcpReservation returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or DhcpReservation does not exist.</div>\n<div><strong>422</strong>: mac is empty, or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDhcpReservations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DhcpReservation"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/multicast": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the multicast settings for a Location ID.",
        "description": "Supported modes for individual settings are:\n* igmpSnooping: enable/disable/auto\n* igmpProxy: igmpv1/igmpv2/igmpv3/disable/auto\n* mldProxy: mldv1/mldv2/disable/disable/auto\n* multicastToUnicast: enable/disable/auto\n\n<div><strong>200</strong>: Success, new multicast settings saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Input validation error, see output for details.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchMulticast",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "multicast",
            "in": "body",
            "description": "multicast object",
            "required": true,
            "schema": {
              "description": "multicast object",
              "$ref": "#/definitions/Multicast"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Multicast"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/ethernetLan": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the ethernetLan setting for a Location ID.",
        "description": "Supported modes are:\n* enable/disable/auto\n\n<div><strong>200</strong>: Success, new ethernetLan settings saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Input validation error, see output for details.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchEthernetLan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ethernetLan",
            "in": "body",
            "description": "ethernetLan object",
            "required": true,
            "schema": {
              "description": "ethernetLan object",
              "$ref": "#/definitions/EthernetLan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/EthernetLan"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/persistConfigurationOnGateway": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update settings for persistConfigurationOnGateway.",
        "description": "Supported modes are:\n* enable/disable/auto\n\n<div><strong>200</strong>: Success, new ethernetLan settings saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Input validation error, see output for details.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putPersistConfigurationOnGateway",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "persistConfigurationOnGateway",
            "in": "body",
            "description": "ethernetLan object",
            "required": true,
            "schema": {
              "description": "ethernetLan object",
              "$ref": "#/definitions/EthernetLan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/EthernetLan"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/upnp": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the UPnP setting for a Location ID.",
        "description": "<div><strong>200</strong>: Success, new Upnp saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Upnp value is empty.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putUpnp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "DEPRECATED: boolean but marked as 'any' because our mobile app platforms mixed string and boolean primitive",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "Possible values enable/disable/auto",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Upnp"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current UPnP setting for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current Upnp returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getUpnp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Upnp"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update the DNS IPv4 server addresses for a Location ID.",
        "description": "<div><strong>200</strong>: Success, new DNS Servers saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: primaryDns or secondaryDns DNS Servers value is empty.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putDnsServers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "primaryDns",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "secondaryDns",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DnsServers"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current DNS IP addresses and settings for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DNS server settings returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration or DNS server settings does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDnsServers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DnsServers"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/home": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current overall settings and status of the Advanced Networking settings for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current networkConfiguration settings returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getNetworkConfigurationHome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkConfigurationHome"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Record a new Port Forwarding entry for an existing DHCP IP reservation tied to a MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, all PortForwards are returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward is empty.</div>\n<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort is out of range, or protocol is invalid, or duplicate externalPort.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postPortForward",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "externalPort",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "internalPort",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "protocol",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/PortForward"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward/{externalPort}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update an existing Port Forwarding entry for an existing DHCP IP reservation tied to a MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, all PortForwards are returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward is empty.</div>\n<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort is out of range, or protocol is invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putPortForward",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "externalPort",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "internalPort",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "protocol",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/PortForward"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete an existing Port Forwarding entry for an existing DHCP IP reservation tied to a MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, returns list of remaining port forwards.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration, DhcpReservation or PortForward does not exist.</div>\n<div><strong>422</strong>: mac does not exist, or is invalid, or externalPort is empty.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deletePortForward",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "externalPort",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PortForward"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForwards": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all existing Port Forwarding entries for an existing DHCP IP reservation tied to a MAC address at a Location ID.",
        "description": "<div><strong>200</strong>: Success, current Port Forwarding entries  returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration or dhcpReservations value is empty.</div>\n<div><strong>422</strong>: mac is empty or invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getPortForwards",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PortForward"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/onboardingCheckpoint": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Record the new Onboarding Checkpoint for the Location ID.",
        "description": "<div><strong>200</strong>: Success, most recent checkpoint saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: checkpoint value must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postOnboardingCheckpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "checkpoint",
            "in": "formData",
            "description": "is the last passed onboarding step by the customer: 'PodsAdded' or 'OnboardingComplete';",
            "required": false,
            "type": "string"
          },
          {
            "name": "podsSeenByBle",
            "in": "formData",
            "description": "is the number of Nodes the app discovered by BLE when the onboarding was completed by the customer, submit with PodsAdded",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "appOs",
            "in": "formData",
            "description": "is the version of the app used during the onboarding, submit with PodsAdded",
            "required": false,
            "type": "string"
          },
          {
            "name": "osVersion",
            "in": "formData",
            "description": "is the phone OS version used during the onboarding, submit with PodsAdded",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "checkpoint": {
                  "$ref": "#/definitions/OnboardingCheckpointResponse"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/iosDeviceToken/{deviceToken}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Inserts the iOS device token for the Customer ID, which may be used for notification services.",
        "description": "<div><strong>204</strong>: Success, most recent IOS device Token saved.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: deviceToken value must be defined.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.putIosDeviceToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "deviceToken",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/iosDeviceTokens/{deviceToken}/exists": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Provides feedback as to whether an iOS deviceToken was previously registered for push notifications.",
        "description": "<div><strong>200</strong>: Success, exists:true|false returned.</div>\n<div><strong>404</strong>: customer id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.iosDeviceTokenExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "deviceToken",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/summary": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: The system summary for a location including topology, optimizations, and firmware upgrades.",
        "description": "<div><strong>200</strong>: Success, system info plus topology array returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/SummaryResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/topology": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "DEPRECATED: The topology for a location including channels and devices.",
        "description": "Please use the GET /Customers/{id}/locations/{locationId}/forceGraph API as a replacement.\n<div><strong>200</strong>: Success, array of Nodes returned.</div>\n<div><strong>404</strong>: customer id, location id, or topology does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getTopology",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/TopologyResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/forceGraph": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "HTML or JSON (vertices[] + edges[]) used to display a Network Topology.",
        "description": "<div>The HTML and JSON to initialize and dynamically display and update a Topology.</div>\n<div>The JSON can also be used to get a network's list of nodes + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>\n<div><strong>200</strong>: Success, HTML or JSON returned depending on \"Accept\" HTTP header.</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getForceGraph",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "deprecated and optional IP address of client displaying the topology",
            "required": false,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "query",
            "description": "optional mac address of client displaying the topology",
            "required": false,
            "type": "string"
          },
          {
            "name": "authKey",
            "in": "query",
            "description": "PubNub authKey",
            "required": false,
            "type": "string"
          },
          {
            "name": "subscribeKey",
            "in": "query",
            "description": "PubNub subscribeKey",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "in": "query",
            "description": "view template override (e.g., iguana)",
            "required": false,
            "type": "string"
          },
          {
            "name": "allSSIDs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showPartnerComponent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/alerts": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve active alerts for this location.",
        "description": "<div><strong>200</strong>: Success, an array of Nodes and an array of Devices returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getAlerts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/alerts/{type}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Snooze an alert on a node.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id does not exist or nodeId not claimed to this account.</div>\n<div><strong>422</strong>: Invalid alert type and/or state.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putSnoozeOnNodeAlert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "id of node",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "enum of values include: poorHealth",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "enum of values include: snooze, ignore, performanceAcceptable, reset",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/alerts/{type}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Snooze an alert on a device.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id does not exist or device mac not in this account's recent history.</div>\n<div><strong>422</strong>: Invalid alert type and/or state.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putSnoozeOnDeviceAlert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "enum of values include: poorHealth",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "formData",
            "description": "enum of values include: snooze, ignore, performanceAcceptable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns a single Node for a Customer ID.",
        "description": "<div><strong>200</strong>: Success, node returned with locationId field.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: customer id or location id does not exist. Or, nodeId not claimed to this account.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCustomerNodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "id of node",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NodeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a node model based on its id.",
        "description": "<div><strong>204</strong>: The node was successfully deleted.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>404</strong>: Node or customer not found.</div>\n<div><strong>422</strong>: Node deletion could not be completed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.deleteNodeLocked",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns a single Node for a Location ID with its list of connected devices.",
        "description": "<div><strong>200</strong>: Success, node returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist. Or, nodeId not claimed to this account.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getNodeBySerialNumber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "id of node",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NodeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Rename a particular Node for a Location ID with the option to disable the blinking LED.",
        "description": "Rename a particular Node for a Location ID with the option to disable the blinking LED with the option \"emitMessage\":\"on\" or \"off\".\n<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>400</strong>: Bad request, nickname is undefined or empty string.</div>\n<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>\n<div><strong>404</strong>: location ID or node ID not found.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.renameNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "emitMessage",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Unclaim a particular Node from a Location ID with the option of preserving the original Package ID.",
        "description": "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>400</strong>: Pod already unclaimed.</div>\n<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>\n<div><strong>403</strong>: the node is online, and can not be unclaimed.<br/> \n<div><strong>404</strong>: location id not found, nodeId missing from URL,<br/> or location has zero owned pods.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.unclaimNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "preservePackId",
            "in": "formData",
            "description": "packId should remain the same",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "removeAccountId",
            "in": "formData",
            "description": "delete account id on the inventory node",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve the Node settings and status for a Location ID.",
        "description": "<div><strong>200</strong>: Success, array of Nodes returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getNodes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "nodes": {
                  "$ref": "#/definitions/NodeResponses"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Claim a node and all nodes still associated to its Package ID for a Location ID.",
        "description": "<div><strong>200</strong>: King node claimed and all related claimed nodes are returned.</div>\n<div><strong>204</strong>: Valid serial number but zero new claimed nodes.</div>\n<div><strong>404</strong>: Unable to find Node with serial number, customer id, or location id.</div>\n<div><strong>409</strong>: Node is owned by another customer.</div>\n<div><strong>422</strong>: Claiming request exceeded numPodsAuthorized (=leaf pods), accountId+partnerId not unique, and/or monitorMode=true.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.claimNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "location id",
            "required": true,
            "type": "string"
          },
          {
            "name": "serialNumber",
            "in": "formData",
            "description": "unique serial number or ID of Node",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac24",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac50",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac60",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ethernetMac",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ethernet1Mac",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "claimKey",
            "in": "formData",
            "description": "optional but required for auto-importing, must be a valid claimKey",
            "required": false,
            "type": "string"
          },
          {
            "name": "model",
            "in": "formData",
            "description": "optional when auto-importing, ignored otherwise",
            "required": false,
            "type": "string"
          },
          {
            "name": "hybridCheck",
            "in": "formData",
            "description": "optional when auto-importing, ignored otherwise",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "nickname",
            "in": "formData",
            "description": "optional node nickname",
            "required": false,
            "type": "string"
          },
          {
            "name": "skipSubscription",
            "in": "query",
            "description": "skip subscription update",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "backhaulDhcpPoolIdx",
            "in": "formData",
            "description": "optional node backhaulDhcpPoolIdx",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "room",
            "in": "formData",
            "description": "optional room identifier",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NodeClaimingResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Unclaim all Nodes from a Location ID with the option of preserving the original Package ID.",
        "description": "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>\n<div><strong>404</strong>: location id not found in customer service or not found in inventory service.<p/> \n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.unclaimAllNodes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "preservePackId",
            "in": "formData",
            "description": "packId should remain the same",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "removeAccountId",
            "in": "formData",
            "description": "delete account ids on the inventory nodes",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get all the devices for a Location ID, including the device name, icon to use, MAC and IP  address, connecting nodes and more.",
        "description": "All devices with 2g, 5g and 6g channel settings\n<div><strong>200</strong>: Success, array of Devices returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDevices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "daysOffline",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "allSSIDs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showPartnerComponent",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "devices": {
                  "$ref": "#/definitions/Devices"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns a single Device for a Location ID.",
        "description": "<div><strong>200</strong>: Success, device returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceByMac",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "can be 'bandwidthData', 'chartsData' or both. None means 'bandwidthData' only.",
            "required": false,
            "type": "string"
          },
          {
            "name": "daysOffline",
            "in": "query",
            "description": "exclude devices disconnected longer than daysOffline.",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DeviceResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patches a single Device to mark it favorite for a Location ID.",
        "description": "<div><strong>200</strong>: Success, everything looks good.</div>\n<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "favorite",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "nickname",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "mobileAppDeviceUuid",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DeviceResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Removes a device for a customer's location id, wiping config and setting a hidden flag.",
        "description": "<div><strong>204</strong>: Success, device removed from location. </div>\n<div><strong>404</strong>: location id or  device not found. </div>\n<div><strong>500</strong>: internal server error </div>",
        "operationId": "Customer.prototype.removeDeviceByMac",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "daysOffline",
            "in": "formData",
            "description": "exclude devices disconnected longer than daysOffline. if not set, it will be 31. for older devices, it will return 404, \"not found\"",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createOauthAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create access token with ouath scope.",
        "description": "<div><strong>200</strong>: Success, access token created and returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.createOauthAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "scope",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "ttlSeconds",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "singleToken",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/createOauthRefreshToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create refresh token for a specific access token with ouath scope.",
        "description": "<div><strong>200</strong>: Success, access token created and returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.createOauthRefreshToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "linkedAccessToken",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "prevLinkedRefreshTokenId",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/refreshOauthAccessToken": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Refresh access and refresh tokens",
        "description": "<div><strong>200</strong>: Success, access and refresh tokens created and returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.refreshOauthAccessToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientId",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/userInfo": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer details with userInfo access token.",
        "description": "<div><strong>200</strong>: Success, customer details returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.userInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/exists": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "",
        "description": "Check if customer email exists and is known to Plume, pass email as parameter to /Customers/exists?email=xxx@yyy.com\n<div><strong>200</strong>: customer email exists and is known to Plume, emailVerified returned</div>\n<div><strong>400</strong>: email is required</div>\n<div><strong>404</strong>: customer email does not exist and is not known to Plume</div>\n<div><strong>422</strong>: email is not valid</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.emailExists",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "boolean"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/resendEmailVerification": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Resend the verification email.",
        "description": "<div><strong>204</strong>: Successfully sent email verification.</div>\n<div><strong>400</strong>: Customer email is required (for this request).</div>\n<div><strong>404</strong>: Unable to find Customer by email address.</div>\n<div><strong>409</strong>: Customer email already verified.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.resendEmailVerification",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email address that verification email will be sent to.",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/factoryReset": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Reset specified location settings to default, while keeping claimed nodes intact. Some of the flags can cause a node to be reeboted.",
        "description": "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>: Authorization required </div>\n<div><strong>404</strong>: location id not found or nodeId missing from URL\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.factoryReset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "persons",
            "in": "formData",
            "description": "Whether or not to delete person information",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "onboardingCheckpoints",
            "in": "formData",
            "description": "Whether or not to reset onboarding checkpoints",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "devices",
            "in": "formData",
            "description": "Whether or not to delete devices related information",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "networkConfiguration",
            "in": "formData",
            "description": "Whether or not to reset network configuration (triggers node reboot)",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "wifiNetwork",
            "in": "formData",
            "description": "Whether or not to reset wifi network (triggers node reboot)",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "deviceFreeze",
            "in": "formData",
            "description": "Whether or not to reset device freeze templates",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "deviceNicknames",
            "in": "formData",
            "description": "Whether or not to reset device nicknames",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "managers",
            "in": "formData",
            "description": "Whether or not to reset managers of the location",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "wanConfiguration",
            "in": "formData",
            "description": "Whether or not to reset wanConfiguration",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/configs": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete specified location settings, while keeping claimed nodes intact",
        "description": "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>: Authorization required </div>\n<div><strong>404</strong>: location id not found or nodeId missing from URL\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "persons",
            "in": "formData",
            "description": "Whether or not to delete person information",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "onboardingCheckpoints",
            "in": "formData",
            "description": "Whether or not to delete onboarding checkpoints",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "devices",
            "in": "formData",
            "description": "Whether or not to delete devices related information",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "networkConfiguration",
            "in": "formData",
            "description": "Whether or not to delete network configuration",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "wifiNetwork",
            "in": "formData",
            "description": "Whether or not to delete wifi network",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "deviceFreeze",
            "in": "formData",
            "description": "Whether or not to delete device freeze templates",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "deviceNicknames",
            "in": "formData",
            "description": "Whether or not to delete device nicknames",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "managers",
            "in": "formData",
            "description": "Whether or not to delete managers of the location",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "wanConfiguration",
            "in": "formData",
            "description": "Whether or not to delete wanConfiguration",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wpsState": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get WPS state",
        "description": "<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>401</strong>: Authorization required </div>\n<div><strong>404</strong>: location id not found or nodeId missing from URL\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.wpsState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/startWps": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Start a WPS session",
        "description": "<div><strong>201</strong>: Success, a WPS session was requested.</div>\n<div><strong>401</strong>: Authorization required </div>\n<div><strong>404</strong>: location id not found or nodeId missing from URL\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.startWps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "keyId",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Location's AppTime config by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationAppTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Location's AppTime config by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocationAppTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "appliesToAllDevices",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "sandboxSizeMb",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Person's AppTime config by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or person does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchPersonAppTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update a Device's AppTime config by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchDeviceAppTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appTime/ipFlows": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch IP flows config",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchAppTimeIpFlow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get IP flows config",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getAppTimeIpFlows",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Data Usage Stats for a Device.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceAppTimeCategoriesDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Online Time Stats for a Device.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceAppTimeCategoriesOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Data Usage Stats for a Device.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceAppTimeAppsDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Online Time Stats for a Device.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDeviceAppTimeAppsOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Data Usage Stats for a Person.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getPersonAppTimeCategoriesDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Online Time Stats for a Person.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getPersonAppTimeCategoriesOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Data Usage Stats for a Person.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getPersonAppTimeAppsDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Online Time Stats for a Person.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getPersonAppTimeAppsOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Data Usage Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getGuestNetworkAppTimeCategoriesDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Online Time Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getGuestNetworkAppTimeCategoriesOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Data Usage Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getGuestNetworkAppTimeAppsDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Online Time Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getGuestNetworkAppTimeAppsOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Data Usage Stats for fronthaul network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getEmployeeNetworkAppTimeCategoriesDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Online Time Stats for fronthaul network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getEmployeeNetworkAppTimeCategoriesOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Data Usage Stats for fronthaul network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getEmployeeNetworkAppTimeAppsDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Online Time Stats for fronthaul network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getEmployeeNetworkAppTimeAppsOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networks/{networkId}/gdprData": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the Gdpr Captive Portals data for a guest.",
        "description": "<div><strong>200</strong>: Success, GDPR Captive Portals data returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getGdprCaptivePortalsData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "localEndDate",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "localStartDate",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortal/{networkId}/gdprForget/guests": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete the Gdpr Captive Portals data for a guest.",
        "description": "<div><strong>200</strong>: Success, GDPR Captive Portals data deleted.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.deleteGdprCaptivePortalsData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Data Usage Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDefaultNetworkAppTimeCategoriesDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Categories Online Time Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDefaultNetworkAppTimeCategoriesOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of categories to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'overall'|'perTimeSlot'",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/dataUsage": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Data Usage Stats for captivePortal network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDefaultNetworkAppTimeAppsDataUsage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/onlineTime": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Fetch the AppTime Apps Online Time Stats for default network.",
        "description": "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or secondary networks does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDefaultNetworkAppTimeAppsOnlineTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "timePeriod",
            "in": "query",
            "description": "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\",\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\",\"last30Days\",\"last12Months\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of apps to return. Defaults to 20",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "grouping",
            "in": "query",
            "description": "typing of Grouping for the purposes of applying the limit. Can be: 'perTimeSlot' ONLY",
            "required": false,
            "default": "perTimeSlot",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/rooms": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a Room for a Location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Devices and Nodes must be defined and mac addresses must be valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postRooms",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "name of this Room",
            "required": true,
            "type": "string"
          },
          {
            "name": "devices",
            "in": "formData",
            "description": "mac addresses of devices assigned to this Room",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodes",
            "in": "formData",
            "description": "nodeIds assigned to this Room",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a Location's Rooms config by location ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationRooms",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/rooms/{roomId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch a Room for a Location ID/Room ID.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>: Devices and Nodes must be defined and mac addresses must be valid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchRoom",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "name of this Room",
            "required": false,
            "type": "string"
          },
          {
            "name": "devices",
            "in": "formData",
            "description": "mac addresses of devices assigned to this Room",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodes",
            "in": "formData",
            "description": "nodeIds assigned to this Room",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a Room for a location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or Room id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteRoom",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/managers": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Assign a manager to your location ",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>",
        "operationId": "Customer.prototype.postManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessType",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/LocationAccess"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a list of all managers the are assigned to manage your location.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.getManagersListForLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/entitledAccess": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a list of all locations on which you are assigned as a manager.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>",
        "operationId": "Customer.prototype.getEntitledAccessList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/managers/{managerId}/resendInvite": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Resend invite to a manager that has status \"pending\".",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location or Manager does not exist.</div>\n<div><strong>422</strong>: Manager already accepted the invite to manage the location </div>",
        "operationId": "Customer.prototype.resendManagerInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/entitledAccess/{locationId}/accessTokens": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Get an access token for a location where you are assigned as a manager",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>",
        "operationId": "Customer.prototype.getAccessTokenForManagedLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/managers/{managerId}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete manager access for location and destroy access tokens for that manager\".",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location or Manager does not exist.</div>",
        "operationId": "Customer.prototype.deleteManagerAccess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update type of access of manager on location.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.patchLocationManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessType",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationOptions",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/blePairingPin": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get BLE pairing pin for a node that is claimed by the selected location",
        "description": "<div><strong>200</strong>: Success, pin generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location or node does not exist.</div>\n<div><strong>422</strong>: Invalid token. </div>",
        "operationId": "Customer.prototype.getNodeBlePairingPin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/blocked/{mac}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Unblock blocked devices",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.unblockDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/blocked": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Block devices",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.blockDevices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved/{mac}": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Unapprove approved devices in the network",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>404</strong>: Device is not approved.</div>",
        "operationId": "Customer.prototype.unapproveDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Approve devices in the network",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>",
        "operationId": "Customer.prototype.approveDevices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable or disable purgatory in the network",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>",
        "operationId": "Customer.prototype.patchNetworkAccessNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "purgatory",
            "in": "formData",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get information about networkAccess networks",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.getNetworkAccessNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkAccessNetwork"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a named device group within a network and optionally specify member devices.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema validation failed.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>403</strong>: Not allowed to create groups in unsupported networks.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Invalid JSON or missing arguments.</div>",
        "operationId": "Customer.prototype.postDeviceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "devices",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkAccessDeviceGroup"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get a list of device groups in a network, along with a list of member devices and group shares.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>",
        "operationId": "Customer.prototype.getDeviceGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Change a device group name or device members.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema validation failed.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>403</strong>: Not allowed to modify standalone groups or groups in unsupported networks.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Invalid JSON or missing arguments.</div>",
        "operationId": "Customer.prototype.patchDeviceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "devices",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/NetworkAccessDeviceGroup"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete a device group from a network.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema validation failed.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>403</strong>: Not allowed to delete standalone groups or groups in unsupported networks.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Invalid JSON or missing arguments.</div>",
        "operationId": "Customer.prototype.deleteDeviceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}/groupShares": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Share access for a group or employee.",
        "description": "<p>This endpoint allows for a device in the first network to have access to all of the devices in the other group in the second network and/or to individual devices in the second network. In other words, by sharing access, we're allowing a single device to communicate with other devices across networks, by specifying other groups and/or individual devices.</p>\n<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema validation failed.</div>\n<div><strong>422</strong>: Illegal share.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>404</strong>: Group does not exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Invalid JSON or missing arguments.</div>",
        "operationId": "Customer.prototype.shareDeviceGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "devices",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/devices/{mac}/groupShares": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Share access to individual device. ",
        "description": "<p>This endpoint allows for a device in the first network to have access to all of the devices in the other group in the second network and/or to individual devices in the second network. In other words, by sharing access, we're allowing a single device to communicate with other devices across networks, by specifying other groups and/or individual devices.</p>\n<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema validation failed.</div>\n<div><strong>422</strong>: Illegal share.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n<div><strong>404</strong>: Group does not exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Invalid JSON or missing arguments.</div>",
        "operationId": "Customer.prototype.shareDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "devices",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/publishSlowChangingDimensionConfigs": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Publish all slow changing dimension Kafka messages",
        "description": "<div><strong>204</strong>: Success.</div>",
        "operationId": "Customer.prototype.publishSlowChangingDimensionConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/appEngagementTimer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get information about app engagement timer details for a location",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.getAppEngagementTimer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/qos": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Set QoS of a single device",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: Prioritization is not a valid value.</div>",
        "operationId": "Customer.prototype.postDeviceQos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "prioritization",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Update QoS of a single device",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: Prioritization is not a valid value.</div>",
        "operationId": "Customer.prototype.patchDeviceQos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "prioritization",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/qos/prioritization": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete prioritization of a single device",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.deleteDeviceQosPrioritization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/stitch": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete prioritization of a single device",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>: Missing oldMac or newMac field.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>422</strong>: oldMac or newMac is not valid mac.</div>\n<div><strong>422</strong>: If oldMac and newMac are the same.</div>",
        "operationId": "Customer.prototype.stitchDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "oldMac",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "newMac",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/import": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Import customer data",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Nothing to import.</div>\n<div><strong>422</strong>: Import data is invalid.</div>",
        "operationId": "Customer.importData",
        "parameters": [
          {
            "name": "data",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "migratedFrom",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/dpp": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch the DPP configuration mode for a Location ID.",
        "description": "<div><strong>202</strong>: Success, DPP updated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: DPP value is invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current DPP configuration for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DPP configuration returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get the current DPP configurator for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getWifiNetworkDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create the DPP setting for a Location ID.",
        "description": "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postWifiNetworkDpp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "should we configure dpp for this network - defaults to true",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "curve",
            "in": "formData",
            "description": "one of predefined elliptic curves, - optional,  if missing in request default to prime256v1",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateKey",
            "in": "formData",
            "description": "privateKey, must also provide public part if present, optional",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "publicKey",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp/bootstrapUris": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a bootstrap for DPP setting for a wifi network.",
        "description": "<div><strong>200</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or wifi network does not exist.</div>\n<div><strong>422</strong>: Invalid curve.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postWifiNetworkDppBootstrap",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "curve",
            "in": "formData",
            "description": "one of predefined elliptic curves, - optional,  if missing in requset default to prime256v1",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp/enrollments": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create an enrollment for DPP setting for a wifi network.",
        "description": "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or wifi network does not exist.</div>\n<div><strong>404</strong>: Configurator keys for network not found.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.postWifiNetworkDppEnrollment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "bootstrapUri",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/ethernetLan": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates location nodes with ethernetLan modes",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>: Node does not exist.</div>\n<div><strong>422</strong>: nodeEthernetLan does not exist.</div>",
        "operationId": "Customer.prototype.putEthernetLan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeEthernetLan",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/sniffing": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get DNS, HTTP, UPnP and mDNS sniffing toggles for a Location ID.",
        "description": "<div><strong>200</strong>: Success, current sniffing toggles returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSniffing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates location sniffing toggle modes",
        "description": "<div><strong>202</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>: Location does not exist.</div>",
        "operationId": "Customer.prototype.putSniffing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dns",
            "in": "formData",
            "description": "object with property \"mode\": an enum of values which include: auto, enable, disable",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "http",
            "in": "formData",
            "description": "object with property \"mode\": an enum of values which include: auto, enable, disable",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "upnp",
            "in": "formData",
            "description": "object with property \"mode\": an enum of values which include: auto, enable, disable",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mdns",
            "in": "formData",
            "description": "object with property \"mode\": an enum of values which include: auto, enable, disable",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flowStats": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "GET the flow stats configuration",
        "description": "<div><strong>200</strong>: Success, current flow stats configuration returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getFlowStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patches the flow stats configuration",
        "description": "<div><strong>202</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>422</strong>: Input value is invalid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.patchFlowStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "iotDeviceConfig",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "screenDeviceConfig",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "lanIotDeviceConfig",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "interfaceStatsConfig",
            "in": "formData",
            "description": "auto || enable || disable",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/v2/configAndState": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Gets all the configs from Overlord for a specified location.",
        "description": "<div><strong>200</strong>: Success, got the data.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getLocationOverlordConfigs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/config/appQoe": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a appQoe config. AppQoe is to monitor the Quality of Experience of these Apps in the house, which is what this PRD covers. This QoE monitoring will allow CSPs understand likely issues with applications.",
        "description": "<div><strong>202</strong>: Success, accepted and forwarded the data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordUpdateAppQoeConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets a appQoe config. AppQoe is to monitor the Quality of Experience of these Apps in the house, which is what this PRD covers. This QoE monitoring will allow CSPs understand likely issues with applications.",
        "description": "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordDeleteAppQoeConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/config/flowCache": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a flowCache config. Enable/disable Flow Cache to help support devQA to check influence on the first stage of the investigation.",
        "description": "<div><strong>202</strong>: Success, accepted and forwarded the data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordUpdateFlowCacheConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "formData",
            "description": " boolean",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets a flowCache config. Enable/disable Flow Cache to help support devQA to check influence on the first stage of the investigation.",
        "description": "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordDeleteFlowCacheConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/config/samKnows": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a samKnows config. SamKnows is a provider of internet performance measurement services. They offer the SamKnows Router Agent, which supports a range of QoS and QoE performance measurements. These measurements can be executed both on an ad-hoc and scheduled basis.",
        "description": "<div><strong>202</strong>: Success, accepted and forwarded the data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordUpdateSamKnowsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets a samKnows config. SamKnows is a provider of internet performance measurement services. They offer the SamKnows Router Agent, which supports a range of QoS and QoE performance measurements. These measurements can be executed both on an ad-hoc and scheduled basis.",
        "description": "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordDeleteSamKnowsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/config/sipAlg": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a sipAlg config. sipAlg is an application within many routers. It inspects any VoIP traffic to prevent problems caused by firewalls and if necessary modifies the VoIP packets.",
        "description": "<div><strong>202</strong>: Success, accepted and forwarded the data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordUpdateSipAlgConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets a sipAlg config. sipAlg is an application within many routers. It inspects any VoIP traffic to prevent problems caused by firewalls and if necessary modifies the VoIP packets.",
        "description": "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordDeleteSipAlgConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/config/stats": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a stats config. Location Stats configuration, used to toggle which stats should be collected.",
        "description": "<div><strong>202</strong>: Success, accepted and forwarded the data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordUpdateStatsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offChannelScan24",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          },
          {
            "name": "offChannelScan50",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          },
          {
            "name": "offChannelScan60",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          },
          {
            "name": "clientAuthFails",
            "in": "formData",
            "description": " string enum: [ AUTO, ENABLE, DISABLE ]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets a stats config. Location Stats configuration, used to toggle which stats should be collected.",
        "description": "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.overlordDeleteStatsConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/migration": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns cloud migration status for customer",
        "description": "<div><strong>200</strong>: Success, return the search result.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Customer does not exist.</div>",
        "operationId": "Customer.prototype.migrationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/command": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns cloud migration status for customer",
        "description": "<div><strong>204</strong>: Success, no content.</div>\n<div><strong>400</strong>: Missing providerId body parameter</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>409</strong>: Accounts are already linked for providerId</div>\n<div><strong>422</strong>: Invalid providerId</div>",
        "operationId": "Customer.prototype.putCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "providerId",
            "in": "formData",
            "description": "enum to identify provider ex. commandAlexa",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns cloud migration status for customer",
        "description": "<div><strong>204</strong>: Success, no content.</div>\n<div><strong>400</strong>: Missing providerId or providerUserId body parameter</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>409</strong>: Accounts are already linked for providerUserId</div>\n<div><strong>422</strong>: Unfinished document for providerId does not exist</div>",
        "operationId": "Customer.prototype.patchCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "providerId",
            "in": "formData",
            "description": "enum to identify provider ex. commandAlexa",
            "required": true,
            "type": "string"
          },
          {
            "name": "providerUserId",
            "in": "formData",
            "description": "id of the user in provider's system",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns list of linked command accounts for the location",
        "description": "<div><strong>200</strong>: Success, return the  list of linked command accounts.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCommands",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/command/devices/freeze": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Sets autoExpire or freezeTemplateId suspend for specified mac addresses",
        "description": "<div><strong>200</strong>: Succcess, updated</div>\n<div><strong>401</strong>: Unathorized</div>\n<div><strong>404</strong>: Mac not found</div>\n<div><strong>422</strong>: Invalid freezeTemplateID</div>\n<div><strong>500</strong>: Internal Server Error</div>",
        "operationId": "Customer.prototype.putDevicesFreezeCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "devices",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/primarySecondaryNetworks": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get networks for wpa3 transition flow",
        "description": "<div><strong>200</strong>: Success, returns the data</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id or wifiNetwork does not exist</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getPrimarySecondaryNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Set networks at wpa3 transition flow",
        "description": "<div><strong>202</strong>: Success, accepted the data</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.setPrimarySecondaryNetworks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "wpa3ssid",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpa3encryptionKey",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "wpa3enabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wpa2ssid",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "wpa2enabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/primarySecondaryNetworks/wpa3ssid/invitations": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Update home devices visible to guests.",
        "description": "<div><strong>200</strong>: Success, Invitation returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Customer id, location id</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getSecondaryNetworkInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/overlord/resync": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Push Secondary Network Configurations to Overlord.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putOverlordResync",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/suspend": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "PUT GroupOfUnassignedDevices suspend for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putGroupOfUnassignedDevicesFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete GroupOfUnassignedDevices suspend for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeSuspend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/forever": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "PUT GroupOfUnassignedDevices forever for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putGroupOfUnassignedDevicesFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete GroupOfUnassignedDevices forever freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeForever",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/{freezeTemplateId}": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "POST GroupOfUnassignedDevices to be frozen for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>404</strong>: Freeze Template Id not found.</div>\n<div><strong>409</strong>: Freeze Template Id already applied.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.postGroupOfUnassignedDevicesFreezeTemplateId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are uuids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete GroupOfUnassignedDevices uuid freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeTemplateId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "freezeTemplateId",
            "in": "path",
            "description": "Valid templates are uuids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezes": {
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete All GroupOfUnassignedDevices freeze except autoExpire for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteGroupOfUnassignedDevicesFreezes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/autoExpire": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Put GroupOfUnassignedDevices autoExpire freeze for a Location ID.",
        "description": "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.putGroupOfUnassignedDevicesFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiresAt",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Delete GroupOfUnassignedDevices autoExpire freeze for a Location ID.",
        "description": "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeAutoExpire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezePolicy": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get GroupOfUnassignedDevices freeze policy for a Location ID.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getGroupOfUnassignedDevicesFreezePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/disable": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Disable customer from logging in until their account is reactivated.",
        "description": "<div><strong>204</strong>: Customer has been disabled.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.disableLogin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "triggerReset",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/enable": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Enable customer log in, after it has been disabled.",
        "description": "<div><strong>204</strong>: Customer has been enabled.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.enableLogin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/auditTrail": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get audit trail for a customer.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Customer id, does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.getAuditTrailForCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/auditTrail": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get audit trail for location.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.getAuditTrailForLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/fastInterference": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get from Controller Fast interference status.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.getFastInterference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoeMetrics": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device or pod QoE 15 minutes data.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceQoeMetrics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "device mac address",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "days/hours/minutes",
            "required": false,
            "default": "days",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "X # of days/hours/minutes",
            "required": false,
            "default": 7,
            "type": "number",
            "format": "double"
          },
          {
            "name": "timestampISOFormat",
            "in": "query",
            "description": "either timestamp utc number or ISO string",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringStats": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device client steering stats with all nodes for a particular MAC address.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceClientSteeringStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "location id of devices and nodes",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac id of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "days/hours/minutes",
            "required": false,
            "default": "days",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "X # of days/hours/minutes",
            "required": false,
            "default": 7,
            "type": "number",
            "format": "double"
          },
          {
            "name": "start",
            "in": "query",
            "description": "number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. Defaults to now - (limit * granularity)",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/bandSteeringStats": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device band steering stats with all nodes for a particular MAC address.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceBandSteeringStats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "location id of devices and nodes",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac id of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "days/hours/minutes",
            "required": false,
            "default": "days",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "X # of days/hours/minutes",
            "required": false,
            "default": 7,
            "type": "number",
            "format": "double"
          },
          {
            "name": "start",
            "in": "query",
            "description": "number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. Defaults to now - (limit * granularity)",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringTriggers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find all instances of the model.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceSteeringWithAthena",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "desc || asc",
            "required": false,
            "default": "desc",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "1000 max for deep:false and 10 max for deep:true",
            "required": false,
            "default": 10,
            "type": "number",
            "format": "double"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "find objects after this value",
            "required": false,
            "type": "string"
          },
          {
            "name": "endAt",
            "in": "query",
            "description": "find objects before this value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/liveModeStream": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device or pod QoE live mode data.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getQoe1Minute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac address or pod id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "start timestamp",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "timestampISOFormat",
            "in": "query",
            "description": "either timestamp utc number or ISO string",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/superLiveModeStream": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device or pod QoE super live mode data.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getQoeSeconds",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac address or pod id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "start timestamp",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "timestampISOFormat",
            "in": "query",
            "description": "either timestamp utc number or ISO string",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/qoe": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get QoE recent 1 minute data for a whole location.",
        "operationId": "Customer.prototype.getLocationQoe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/alarms": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Device alarm history graph array for a particular MAC address.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDeviceAlarms",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac id of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "coverageAlarmThreshold",
            "in": "query",
            "description": "a coverage alarm will be returned (value=1) when rssi_alarm_penalty_count >= this value",
            "required": false,
            "default": 1,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "granularity",
            "in": "query",
            "description": "days/hours/minutes",
            "required": false,
            "default": "days",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "X # of days/hours/minutes",
            "required": false,
            "default": 7,
            "type": "number",
            "format": "double"
          },
          {
            "name": "start",
            "in": "query",
            "description": "number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. Defaults to now - (limit * granularity)",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/flex/dashboard": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Daily/Weekly/Monthly device usage summary report based on location",
        "operationId": "Customer.prototype.getDashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "macs",
            "in": "query",
            "description": "mac list of all devices in the location",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/groups": {
      "get": {
        "tags": [
          "Customer"
        ],
        "operationId": "Customer.prototype.getGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/x-any"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/resniff": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Re-enables deviceType sniffing for a particular device.",
        "description": "<div><strong>204</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>404</strong>: No device found with provided mac address</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.enableDeviceTypeSniffing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/tos": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Describes the current state of TOS for the given client.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>404</strong>: No device found with provided mac address</div>\n<div><strong>422</strong>: Invalid MAC.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.getTos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/devices/{mac}/tos/reset": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Resets the back-off and thresholds for the given client.",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>404</strong>: No device found with provided mac address</div>\n<div><strong>422</strong>: Invalid MAC.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Customer.prototype.resetTos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/customerSupportConfigurations": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns partner customer support configuration.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: customer id or location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getCustomerSupportConfigurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/taskStatuses": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all task statuses of nodes from controller",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: customer id or location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getTaskStatuses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/dpp/announcements": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns DPP announcements from controller",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.getDppAnnouncementsFromController",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/kvStates": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all kvStates on a particular Node for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getLocationKvStates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/vlanServices": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Returns vlanServices from Customer location state",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Customer.prototype.vlanServices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/firmware/modules": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all firmaware modules for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getModulesFromController",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Customers/{id}/locations/{locationId}/securityPolicy/realizedState": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieve all securityStates for a Location ID.",
        "description": "<div><strong>200</strong>: Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Customer.prototype.getSecurityRealizedStates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/invitations/{fk}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find a related item by id for invitations.",
        "operationId": "Location.prototype.__findById__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for invitations",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete a related item by id for invitations.",
        "operationId": "Location.prototype.__destroyById__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for invitations",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update a related item by id for invitations.",
        "operationId": "Location.prototype.__updateById__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for invitations",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/_pendingWhitelistRequests/{fk}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find a related item by id for _pendingWhitelistRequests.",
        "operationId": "Location.prototype.__findById___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for _pendingWhitelistRequests",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/PendingWhitelistRequests"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete a related item by id for _pendingWhitelistRequests.",
        "operationId": "Location.prototype.__destroyById___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for _pendingWhitelistRequests",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update a related item by id for _pendingWhitelistRequests.",
        "operationId": "Location.prototype.__updateById___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "fk",
            "in": "path",
            "description": "Foreign key for _pendingWhitelistRequests",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PendingWhitelistRequests"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/PendingWhitelistRequests"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/nodes": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Queries nodes of Location.",
        "operationId": "Location.prototype.__get__nodes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Claim all nodes for a Location ID.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Required nodes field is missing.</div>\n<div><strong>422</strong>: Request contain wrong value or exceded the max number of 32 pods to claim.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.claimMultipleNodes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodes",
            "in": "formData",
            "description": "array of serialNumber/ids",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/invitations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Queries invitations of Location.",
        "operationId": "Location.prototype.__get__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invitation"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Creates a new instance in invitations of this model.",
        "operationId": "Location.prototype.__create__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes all invitations of this model.",
        "operationId": "Location.prototype.__delete__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/invitations/count": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Counts invitations of Location.",
        "operationId": "Location.prototype.__count__invitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/_pendingWhitelistRequests": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Queries _pendingWhitelistRequests of Location.",
        "operationId": "Location.prototype.__get___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PendingWhitelistRequests"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Creates a new instance in _pendingWhitelistRequests of this model.",
        "operationId": "Location.prototype.__create___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PendingWhitelistRequests"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/PendingWhitelistRequests"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Deletes all _pendingWhitelistRequests of this model.",
        "operationId": "Location.prototype.__delete___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/_pendingWhitelistRequests/count": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Counts _pendingWhitelistRequests of Location.",
        "operationId": "Location.prototype.__count___pendingWhitelistRequests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Location.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Update uprise value for the location",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchUpriseOrFlex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "uprise",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "flex",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Location.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/count": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Location.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/backhaul": {
      "get": {
        "tags": [
          "Location"
        ],
        "operationId": "Location.prototype.getBackhaul",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/checkCustomerLoginToTurnOffWifi": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Turn off WIfi Radio if no app login found for a customer",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.checkCustomerLoginToTurnOffWifi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/mobileAppSignInRequired": {
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Patch mobileAppSignInRequired object handling the wifi disabling timer",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: mobileAppSignInRequired is not configured for this location</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>429</strong>: This location has already cancelled app engagement timer</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchMobileAppSignInRequired",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "state",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/forceGraph": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Vertices[] and edges[] used to display a Network Topology.",
        "description": "<div>The data used to initialize and dynamically display and update a Topology.</div>\n<div>Can also be used to get a network's list of nodes + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>\n<div><strong>200</strong>: Success, graph structure returned.</div>\n<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getForceGraph",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "allSSIDs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showPartnerComponent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/gatewayAccount": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get AccountID and GatwewayID of a location",
        "description": "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n<div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>: Internal Server error</div>",
        "operationId": "Location.prototype.getGatewayAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/devices/{mac}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get the name and icon of device by mac lookup",
        "description": "<div>To be used by notification for fetching device name and icon.</div>\n<div><strong>200</strong>: Success, device details returned.</div>\n<div><strong>404</strong>: Location ID or Device mac not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getDevicesByMacName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/devices/{mac}/detailsWithSsid": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get device parameters by mac id and the ssid by networkId",
        "description": "<div>To be used by notification for fetching device name and icon.</div>\n<div><strong>200</strong>: Success, device details returned.</div>\n<div><strong>404</strong>: Location ID, Device mac or Network id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.deviceDetailsWithSsid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "description": "mac of device",
            "required": true,
            "type": "string"
          },
          {
            "name": "networkId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/rooms/search/{search}": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Internal integration use only: Search to identify if the node or device is assigned to a room.",
        "description": "<div>To be used by Notification API for fetching Room info.</div>\n<div><strong>200</strong>: Success, room details returned.</div>\n<div><strong>404</strong>: Location, device or node not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Location.prototype.findRoomByNodeIdNodeMacAndDeviceMac",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "search",
            "in": "path",
            "description": "Node ID (Serial Number), Node WiFi Radio Mac, or Device Mac",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeAway": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get the homeAway configs to use for a location",
        "description": "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n<div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>: Internal Server error</div>",
        "operationId": "Location.prototype.getHomeAwayConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/appTime": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get the appTime configs to use for a location",
        "description": "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n<div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>: Internal Server error</div>",
        "operationId": "Location.prototype.getAppTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Update a Device's Anomaly Security Policy for a location ID to include a blacklisted website.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Location.prototype.postDeviceSecurityPolicyAnomalyBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceType",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "fqdn",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "ipv4",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ipv6",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "ttl",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist/{fqdn}": {
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Update a Location's Anomaly Security Policy for a location ID to remove a blacklisted DNS entry.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Location.prototype.deleteDeviceSecurityPolicyAnomalyBlacklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fqdn",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch the home security configuration for this location",
        "description": "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getHomeSecurity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Enable/disable live motion streaming and/or motion events for this location",
        "description": "<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchHomeSecurity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "source",
            "in": "formData",
            "description": "Source of patch request; must be one of \"user\" or \"geofence\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "liveMotionEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "motionEventsEnabled",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "homeAwayActive",
            "in": "formData",
            "description": "Enable/disable motion events based on location Homeaway state",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity/sensitivity": {
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Configure motion event configuration for this location",
        "description": "<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchHomeSecuritySensitivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "cooldown",
            "in": "formData",
            "description": "sets required rest period for motion detected events to end, in seconds",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "petMode",
            "in": "formData",
            "description": "adjusts sensitivity of motion detected events for pets; must be one of \"none\", \"under10\", \"10to30\", \"over30\" and can only be set if sensitivity = high",
            "required": false,
            "type": "string"
          },
          {
            "name": "sensitivity",
            "in": "formData",
            "description": "adjusts sensitivity of motion detected events; must be one of \"low\", \"medium\", \"high\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/HomeSecurity"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity/motionHistory": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch the motion density history for this location",
        "description": "<div><strong>200</strong>: Success, motion density array returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getMotionHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "number of seconds\nin density calculation window; returned data points represent % of non-zero intensity values in the window",
            "required": false,
            "default": 3600,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity/motionHistory/state": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch the motion state history for this location",
        "description": "<div><strong>200</strong>: Success, motion state array returned (Each element of the array is in the form [\"val\", \"unix_ts\"], where \"val\" is one of: \n<div>0 - Not armed, not tripped</div>\n<div>1 - Not armed, tripped</div>\n<div>2 - Armed, not tripped</div>\n<div>3 - Armed, tripped</div></div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getMotionStateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "number of seconds\nin density calculation window; returned data points represent % of non-zero intensity values in the window",
            "required": false,
            "default": 3600,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity/events/history": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch the event history for this location",
        "description": "<div><strong>200</strong>: Success, event array returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getEventHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "from",
            "in": "query",
            "description": "UTC unix ts",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "to",
            "in": "query",
            "description": "UTC unix ts, defaults to now",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter events by category (Motion or Plume [config changes]). Multiple categories can be passed as a comma-separated string. Default is both.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of events to return; defaults to 10",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "whether the returned events will be post-sorted by timestamp",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/homeSecurity/devices/sounding": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Fetch the sounding states for eligible devices in this location",
        "description": "<div><strong>200</strong>: Success, device sounding states returned.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getDeviceSoundingState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Optional mac address for single device lookup (fetches all devices by default)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Patch the sounding states for the given devices",
        "description": "<div><strong>200</strong>: Success, device sounding states returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchDeviceSoundingState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "soundingStates",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/wifiMotion": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get WifiMotion config for this location",
        "description": "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getWifiMotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiMotion"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Location"
        ],
        "summary": "Enable/disable WifiMotion feature for this location",
        "description": "<div><strong>200</strong>: Success, updated object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.patchWifiMotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "auto",
            "in": "formData",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/WifiMotion"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/nasRedirect": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Handle proxy redirects from walled-garden networks requesting network access",
        "description": "<div><strong>200</strong>: Success, redirect URL returned.</div>\n<div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>: Internal Server error</div>",
        "operationId": "Location.prototype.nasRedirect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "client IP address",
            "required": true,
            "type": "string"
          },
          {
            "name": "proxyMac",
            "in": "query",
            "description": "client MAC address",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeMac",
            "in": "query",
            "description": "gateway MAC address",
            "required": true,
            "type": "string"
          },
          {
            "name": "ssid",
            "in": "query",
            "description": "guest SSID client is attempting to join",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/summary": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get the locationSummary for this location",
        "description": "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getLocationSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/geoIp": {
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Update raw Geo IP information for the location",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.putGeoIp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string"
          },
          {
            "name": "geoIp",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/resyncLocation": {
      "put": {
        "tags": [
          "Location"
        ],
        "summary": "Trigger Controller to refresh all Customer mongo data for a Location ID.",
        "description": "<div><strong>200</strong>: Success, triggered right way.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.putResyncLocation",
        "parameters": [
          {
            "name": "id",
            "description": "Location id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/nodes/{nodeId}": {
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Unclaim a particular Node from a Location with the option of preserving the original Package ID.",
        "description": "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>400</strong>: Pod already unclaimed.</div>\n<div><strong>401</strong>: Authorization required </div>\n<div><strong>403</strong>: the node is online, and can not be unclaimed.<br/>\n<div><strong>404</strong>: location id not found, nodeId missing from URL,<br/> or location has zero owned pods.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.unclaimNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "preservePackId",
            "in": "formData",
            "description": "Whether or not packId should remain the same",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "forceUnclaim",
            "in": "formData",
            "description": "Unclaim regardless of pod connectivity",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "purgeGroupIds",
            "in": "formData",
            "description": "Whether or not groupIds should be kept on the node",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "removeAccountId",
            "in": "formData",
            "description": "delete account id on the inventory node",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "unclaimReason",
            "in": "formData",
            "description": "Used by controller to determine what actions to take for nodeClaimChanged",
            "required": false,
            "type": "string"
          },
          {
            "name": "incrementFactoryResetCounter",
            "in": "formData",
            "description": "Whether or not to increment the factory reset counter",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/marketingExport": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get detailed information of location for updating CRMs.",
        "description": "<div><strong>200</strong>: Success, location data in response.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.marketingExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/partnerIdProfileInfo": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get the partner id, location profile and other info for this location",
        "description": "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Location.prototype.getLocationPartnerIdProfileInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/groupProvisioning": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get Group Provisioning details",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>: Internal Server error</div>",
        "operationId": "Location.prototype.groupProvisioning",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/command/state": {
      "get": {
        "tags": [
          "Location"
        ],
        "summary": "Get speed test result report state",
        "description": "<div><strong>200</strong>: Success, return report state.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Location.prototype.getCommandState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Locations/{id}/resyncWebconfig": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "sync SSID data from location to all its claimed nodes.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>: Wifi network does not exist.</div>\n<div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>422</strong>: Endpoint is not allowed in current deployment.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "LLocation.prototype.putResyncLocationocation.prototype.resyncWebconfig",
        "parameters": [
          {
            "name": "id",
            "description": "Location id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/{id}": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Find a model instance by {{id}} from the data source.",
        "operationId": "Node.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Node"
        ],
        "summary": "Unclaim a node by a groupAdmin or admin",
        "description": "<div><strong>204</strong>: Success, node changed.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Node.prototype.unclaim",
        "parameters": [
          {
            "name": "id",
            "description": "Node id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "forceUnclaim",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "preservePackId",
            "in": "formData",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Find all instances of the model matched by filter from the data source.",
        "operationId": "Node.find",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Node"
        ],
        "summary": "Import a node into the global/shared inventory (does NOT claim).",
        "description": "<div><strong>200</strong>: Success, node imported.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>409</strong>: NodeId already exists in shared inventory.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "Node.customCreate",
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "residentialGateway",
            "in": "formData",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "model",
            "in": "formData",
            "description": "Node model ID value is required unless a Partner ID exemption has been configured",
            "required": false,
            "type": "string"
          },
          {
            "name": "packId",
            "in": "formData",
            "description": "optional packId to group nodes",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerId",
            "in": "formData",
            "description": "Partner ID required on Plume production clouds",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac24",
            "in": "formData",
            "description": "optional radioMac24, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac50",
            "in": "formData",
            "description": "optional radioMac50, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac60",
            "in": "formData",
            "description": "optional radioMac60, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ethernetMac",
            "in": "formData",
            "description": "optional ethernetMac, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "ethernet1Mac",
            "in": "formData",
            "description": "optional ethernet1Mac, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "claimKeyRequired",
            "in": "formData",
            "description": "optional claimKeyRequired, default is false",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "radioMac50L",
            "in": "formData",
            "description": "optional radioMac50L, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "radioMac50U",
            "in": "formData",
            "description": "optional radioMac50U, must be a valid mac address",
            "required": false,
            "type": "string"
          },
          {
            "name": "subscriptionRequired",
            "in": "formData",
            "description": "optional subscriptionRequired, default is false",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "thread",
            "in": "formData",
            "description": "optional Thread/Matter MAC addres",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/count": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Count instances of the model matched by where from the data source.",
        "operationId": "Node.count",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "Criteria to match model instances",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/{id}/customer": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get the customer info with the node Id.",
        "description": "<div><strong>200</strong>: Success, return the customer info.</div>\n<div><strong>403</strong>: Public ip not matched.</div>\n<div><strong>404</strong>: NodeId not found.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Node.prototype.getCustomerByNodeId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Node id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/{id}/mqtt": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get the MQTT broker address of the node.",
        "description": "<div><strong>200</strong>: Success, return the customer info.</div>\n<div><strong>404</strong>: NodeId not found.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Node.prototype.getMqttBroker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Node id",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/{id}/passwordLessToken": {
      "post": {
        "tags": [
          "Node"
        ],
        "summary": "Update the name and email for customer and generate emailToken and appToken.",
        "description": "<div><strong>200</strong>: Success, return the customer info.</div>\n<div><strong>403</strong>: Public ip not matched.</div>\n<div><strong>404</strong>: NodeId not found.</div>\n<div><strong>422</strong>: Email must be defined and valid.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Node.prototype.verifyEmailPasswordlessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Node id",
            "required": true,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Nodes/{id}/packId": {
      "put": {
        "tags": [
          "Node"
        ],
        "summary": "Rename an unclaimed node/pod's packId in Plume's global inventory.",
        "description": "<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>400</strong>: Bad request, packId is undefined or empty string.</div>\n<div><strong>404</strong>: NodeId not found.</div>\n<div><strong>422</strong>: PackId is invalid (too long).</div>\n<div><strong>423</strong>: PackId cannot be changed for a claimed pod.</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "Node.updatePackId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packId",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/inventory/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get node by ID from the Inventory service",
        "description": "<div><strong>200</strong>: Success, return the node object</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: Node not found.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Inventory.getNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/inventory/nodes/{nodeId}/autoProvisioning": {
      "patch": {
        "tags": [
          "Inventory"
        ],
        "summary": "S node by ID from the Inventory service",
        "description": "<div><strong>200</strong>: Success, return the node object</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: Node not found.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "Inventory.autoProvisioning",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "autoProvisionToThisDeployment",
            "in": "formData",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/checkIntegrationHealth": {
      "get": {
        "tags": [
          "IntegrationHealthCheck"
        ],
        "summary": "Integration Health check API 2.0",
        "description": "<div><strong>200</strong>: Success, Integration intact.</div>\n<div><strong>401</strong>: Unauthorized</div>",
        "operationId": "IntegrationHealthCheck.checkIntegration",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/appEngagementTimer": {
      "post": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Create a partner config for app engagement timer",
        "description": "<div><strong>200</strong>: Success. Created partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.createAppEngagementTimerConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timerInSeconds",
            "in": "formData",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "numberOfAllowedRetries",
            "in": "formData",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Patch a partner config for app engagement timer",
        "description": "<div><strong>200</strong>: Success. Patched partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.patchAppEngagementTimerConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timerInSeconds",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "numberOfAllowedRetries",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "enable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get a partner config for app engagement timer",
        "description": "<div><strong>200</strong>: Success. Retrieved partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Config does not exist </div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.getAppEngagementTimerConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{partnerId}/qos/appPrioritization": {
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get status for app prioritization.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Partner id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getAppPrioritizationPartnerConfig",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "partner Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update app prioritization config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>404</strong>: Partner id or WifiNetwork does not exist and is not known to Plume</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.patchAppPrioritizationPartnerConfig",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "formData",
            "description": "(deprecated) true if app prioritization is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "defaultMode",
            "in": "formData",
            "description": "App Prioritization mode - any of enable | disable",
            "required": false,
            "type": "string"
          },
          {
            "name": "initialLocationEnabled",
            "in": "formData",
            "description": "true if app prioritization is enabled for all new locations",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "customSettingEnabled",
            "in": "formData",
            "description": "true if custom setting is enabled",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "template",
            "in": "formData",
            "description": "Template for app prioritization",
            "required": false,
            "type": "string"
          },
          {
            "name": "appPriority",
            "in": "formData",
            "description": "priority for apps",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "customSetting",
            "in": "formData",
            "description": "Settings for app prioritization",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{partnerId}/qos/appPrioritization/customSetting": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Set custom setting to default for app prioritization.",
        "operationId": "PartnerConfig.deleteAppPrioritizationPartnerCustomSetting",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{partnerId}/qos/appPrioritization/appPriority": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Set app priority to default for app prioritization.",
        "operationId": "PartnerConfig.deleteAppPrioritizationPartnerAppPriority",
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/captivePortal": {
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Patch a partners captivePortal configs",
        "description": "<div><strong>200</strong>: Success. Patched partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Incorrect language type</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.updateCaptivePortalConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "defaultLanguage",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners captivePortal configs ",
        "description": "<div><strong>200</strong>: Success. Patched partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.getCaptivePortalConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/featureFlags": {
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Patch a partners feature flags",
        "description": "<div><strong>200</strong>: Success. Patched partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.updateFeatureFlags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners feature flags",
        "description": "<div><strong>200</strong>: Success. Patched partner config.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.getFeatureFlags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/machineToMachine": {
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Enable machine to machine token generation for partnerId",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>404</strong>: Group of partnerId not found</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.enableMachineToMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Disable machine to machine token generation for partner",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>404</strong>: Group of partnerId not found</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.disableMachineToMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners machine to machine information",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: There is not configuration for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.getMachineToMachine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/machineToMachine/tokens": {
      "post": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Generate a new Machine to Machine token for PartnerId",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: There is not configuration for this partnerId</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.generateMachineToMachineToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenName",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenTTLSeconds",
            "in": "formData",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/machineToMachine/tokens/{tokenId}": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete one of the tokens for the PartnerId",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: There is not configuration for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.deleteMachineToMachineToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/securityPolicy": {
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partner's default securityPolicy",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: There is not configuration for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.getSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Set partner's default securityPolicy",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: There is not configuration for this partnerId</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>: internal server error</div>",
        "operationId": "PartnerConfig.patchSecurityPolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "whitelist",
            "in": "formData",
            "description": "List of whitelisted fqdn values - {type=\"fqdn\", value}\"",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "blacklist",
            "in": "formData",
            "description": "List of blacklisted fqdn values - {type=\"fqdn\", value}",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "blockedDnsRedirect",
            "in": "formData",
            "description": "Redirect \"address\" and corresponding \"ttl\" redirect in seconds",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "contentFilterOverrides",
            "in": "formData",
            "description": "Array of content filter overrides each with its own whitelist/blacklist",
            "required": false,
            "type": "string",
            "format": "JSON"
          },
          {
            "name": "remoteConnectionsMode",
            "in": "formData",
            "description": "Any of \"auto\", \"enabled\", \"disabled\", \"highRiskOnly\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "remoteConnectionsForceDisable",
            "in": "formData",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disableSafeSearch",
            "in": "formData",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/homepass/customerSupportConfigurations": {
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Patch customer support configurations",
        "description": "<div><strong>200</strong>: Success. Patched customer support configurations.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "PartnerConfig.patchHomepassCustomerSupportConfigurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "get homepass customer support configurations",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "PartnerConfig.getHomepassCustomerSupportConfigurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/homepassCustomerSupportConfigurations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/workpass/customerSupportConfigurations": {
      "patch": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Patch customer support configurations",
        "description": "<div><strong>200</strong>: Success. Patched customer support configurations.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "PartnerConfig.patchWorkpassCustomerSupportConfigurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get workpass customer support configurations",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "PartnerConfig.getWorkpassCustomerSupportConfigurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/workpassCustomerSupportConfigurations"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/appQoe": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete cohort appQoe config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deleteAppQoe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners appQoe config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getAppQoe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update partners appQoe Config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.updateAppQoe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/speedTest": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete partners speedTest config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deleteSpeedTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners speedTest config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getSpeedTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update partners speedTest Config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.updateSpeedTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/pcs": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete cohort preCacScheduler config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deletePreCacScheduler",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get Pre-CAC Scheduler Config",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getPreCacScheduler",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update partners Pre CAC Scheduler config",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.updatePreCacScheduler",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/samKnows": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete cohort samKnows config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deleteSamKnows",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners samKnows config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getSamKnows",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update partners samKnows Config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.updateSamKnows",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/sipAlg": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete cohort sipAlg config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deleteSipAlg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get partners sipAlg config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getSipAlg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update partners sipAlg Config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.updateSipAlg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform/vlanServices": {
      "delete": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Delete cohort vlan service config.",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.deleteVlanService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get cohort vlan service configs.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: PartnerId not found or no configurations exist for partner</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getVlanServices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Update cohort vlan service Config.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required or customer id not found</div>\n<div><strong>422</strong>: Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.putVlanServices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "config",
            "in": "formData",
            "required": true,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/partnerConfig/{id}/platform": {
      "get": {
        "tags": [
          "PartnerConfig"
        ],
        "summary": "Get all partners cohort configs.",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>: PartnerId not found or no configurations exist for partner</div>\n<div><strong>500</strong>: Internal server error</div>",
        "operationId": "PartnerConfig.getCohorts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/command/health": {
      "get": {
        "tags": [
          "Command"
        ],
        "summary": "return a 200 response when your server is healthy, else send a 500 response",
        "description": "<div><strong>200</strong>: Success, return health data.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>: internal server error.</div>",
        "operationId": "Command.getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/command/{providerUserId}": {
      "get": {
        "tags": [
          "Command"
        ],
        "summary": "Get account linking",
        "description": "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>: Missing providerUserId body parameter</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Command not found.</div>\n<div><strong>500</strong>: internal server error.</div>",
        "operationId": "Command.getCommand",
        "parameters": [
          {
            "name": "providerUserId",
            "in": "path",
            "description": "id of the user in provider's system",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Command"
        ],
        "summary": "Delete account linking",
        "description": "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>: Missing providerUserId body parameter</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Command not found.</div>\n<div><strong>500</strong>: internal server error.</div>",
        "operationId": "Command.deleteCommand",
        "parameters": [
          {
            "name": "providerUserId",
            "in": "path",
            "description": "id of the user in provider's system",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/x-any"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    },
    "/AuditTrails/getAuditTrail": {
      "get": {
        "tags": [
          "AuditTrail"
        ],
        "summary": "Get Audit Trail for a customer and/or location",
        "description": "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>",
        "operationId": "AuditTrail.getAuditTrail",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "Location Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerIds",
            "in": "query",
            "description": "Partner Id",
            "required": false,
            "type": "string",
            "format": "JSON"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditTrail"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "tags": [
    {
      "name": "Group",
      "description": "A tag applied to Customers for labeling and administering. These APIs are only available for Admin users of the NOC."
    },
    {
      "name": "Partner",
      "description": "A tag applied to Customers for labeling and administering. These APIs are only available for Admin users of the NOC."
    },
    {
      "name": "Customer",
      "description": "A Plume Customer is initialized with a default location."
    },
    {
      "name": "Location",
      "description": "Plume internal-only APIs."
    },
    {
      "name": "Node",
      "description": "Plume internal-only APIs."
    },
    {
      "name": "Inventory"
    },
    {
      "name": "IntegrationHealthCheck"
    },
    {
      "name": "PartnerConfig",
      "description": "Persists all dynamic partner based config managed by customer"
    },
    {
      "name": "Command"
    },
    {
      "name": "AuditTrail"
    }
  ],
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded",
    "application/xml",
    "text/xml"
  ],
  "produces": [
    "application/json",
    "application/xml",
    "text/xml",
    "application/javascript",
    "text/javascript"
  ],
  "definitions": {
    "x-any": {
      "properties": {}
    },
    "CustomerGroup": {
      "description": "A tag applied to Customers for labeling and administering. These APIs are only available for Admin users of the NOC.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "groupId": {
          "$ref": "#/definitions/ObjectID"
        },
        "customerId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "additionalProperties": false
    },
    "Customer": {
      "description": "A Plume Customer is initialized with a default location.",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "accountId": {
          "type": "string"
        },
        "anonymous": {
          "default": false,
          "description": "ISP registered accounts are anonymous and do not include real emails and passwords",
          "type": "boolean"
        },
        "autoProvisioned": {
          "default": false,
          "description": "ISP auto registered accounts created using gatewayId instead of accountId need to eventually be updated a real accountId",
          "type": "boolean"
        },
        "contact": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "locked": {
          "default": false,
          "description": "The groupAdmin account needs this property to protect it from being changed by other groupAdmins unintentionally.",
          "type": "boolean"
        },
        "partnerId": {
          "type": "string"
        },
        "acceptLanguage": {
          "default": "en-US",
          "description": "The acceptable language for this user",
          "type": "string"
        },
        "preferredLanguage": {
          "description": "The language set for this user based on API and/or it's language header",
          "type": "string"
        },
        "nocSettings": {
          "type": "object"
        },
        "linkedAccounts": {
          "description": "array of the outside/non-plume accounts to be linked",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "source": {
          "default": "unknown",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "provisioningSsoAuditTrail": {
          "default": false,
          "description": "If true, the user has provisioning SSO audit trail",
          "type": "boolean"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "realm": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "termsAndPrivacy": {
          "$ref": "#/definitions/TermsAndPrivacy"
        },
        "migration": {
          "$ref": "#/definitions/Migration"
        }
      },
      "required": [
        "name",
        "_version",
        "email"
      ],
      "additionalProperties": false
    },
    "Group": {
      "description": "A tag applied to Customers for labeling and administering. These APIs are only available for Admin users of the NOC.",
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "_version",
        "name",
        "description"
      ],
      "additionalProperties": false
    },
    "TermsAndPrivacy": {
      "description": "TermsAndPrivacy object",
      "properties": {
        "termsDocumentId": {
          "type": "number",
          "format": "double"
        },
        "termsAcceptedAt": {
          "type": "string",
          "format": "date-time"
        },
        "privacyDocumentId": {
          "type": "number",
          "format": "double"
        },
        "privacyAcceptedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "termsDocumentId",
        "privacyDocumentId"
      ],
      "additionalProperties": false
    },
    "Migration": {
      "properties": {
        "migratedFrom": {
          "description": "From which cloud was this customer migrated",
          "type": "string"
        },
        "migratedTo": {
          "description": "To which cloud was this customer migrated",
          "type": "string"
        },
        "migratedAt": {
          "description": "Timestamp of the migration occurrence",
          "type": "string",
          "format": "date-time"
        },
        "migrationReason": {
          "description": "Reason for migration occurrence",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "migratedFrom",
        "migratedTo",
        "migratedAt",
        "migrationReason"
      ],
      "additionalProperties": false
    },
    "AccessToken": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ttl": {
          "default": 1209600,
          "description": "time to live in seconds (2 weeks by default)",
          "type": "number",
          "format": "double"
        },
        "scopes": {
          "description": "Array of scopes granted to this access token.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "Role": {
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "modified": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "KvConfig": {
      "properties": {
        "module": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "persist": {
          "default": false,
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "additionalProperties": false
    },
    "LocationCustomSchedule": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the shared custom freeze template",
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "description": "Custom freeze schedule template name",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "id",
        "type",
        "name"
      ],
      "additionalProperties": false
    },
    "Schedule": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "startTime": {
          "type": "string"
        },
        "endTime": {
          "type": "string"
        },
        "daysOfWeek": {
          "default": [],
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "_version",
        "startTime",
        "daysOfWeek"
      ],
      "additionalProperties": false
    },
    "FrontlineStorage": {
      "properties": {
        "keys": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "additionalProperties": false
    },
    "HomeSecurity": {
      "properties": {
        "liveMotionEnabled": {
          "type": "boolean"
        },
        "motionEventsEnabled": {
          "type": "boolean"
        },
        "cooldown": {
          "type": "number",
          "format": "double"
        },
        "petMode": {
          "type": "string"
        },
        "sensitivity": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "WifiMotion": {
      "properties": {
        "auto": {
          "default": false,
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "auto"
      ],
      "additionalProperties": false
    },
    "RegisterResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "description": "Fake email created on behalf of anonymous account.",
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "locationId": {
          "description": "ID of default location created during registration API call.",
          "type": "string"
        },
        "anonymous": {
          "default": false,
          "description": "ISP registered accounts are anonymous and do not include real emails and passwords",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        }
      },
      "required": [
        "_version"
      ],
      "additionalProperties": false
    },
    "Location": {
      "description": "Plume internal-only APIs.",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "ipv6": {
          "default": {
            "mode": "auto",
            "addressingConfig": "auto"
          },
          "description": "Configuration data for IPv6",
          "type": "object"
        },
        "networkMode": {
          "default": "auto",
          "description": "the default value is 'auto', users can choose 'router' or 'auto'",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "accountId": {
          "description": "accountId from customer relation; this should be a replica of the customer's accountId field",
          "type": "string"
        },
        "partnerId": {
          "description": "partnerId from customer relation; this should be a replica of the customer's partnerId field",
          "type": "string"
        },
        "groupIds": {
          "default": [],
          "description": "List of group IDs a location belongs to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceId": {
          "type": "string"
        },
        "profile": {
          "default": "auto",
          "type": "string"
        },
        "mDNSUniqueIdentifier": {
          "type": "string"
        },
        "freezeTemplates": {
          "type": "object"
        },
        "serviceLevel": {
          "description": "including 'status'/'created'/'updatedAt', 'status' can be 'noService'/'basicService'/'fullService'",
          "type": "object"
        },
        "homeAwayActive": {
          "description": "Home Security wifi motion will be enabled when all persons away from home.",
          "type": "boolean"
        },
        "appTime": {
          "description": "location's default appTime config",
          "type": "object"
        },
        "sniffing": {
          "description": "location's default sniffing config",
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dayOneEmailsSent": {
          "type": "boolean"
        },
        "region": {
          "type": "string"
        },
        "stepFunctionTimers": {
          "default": [],
          "description": "Array of step function timers used for turning off wifi feature",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "groupOfUnassignedDevicesFreezeTemplates": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "groupOfUnassignedDevicesFreezeSchedules": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "isUtilizingSharedLocationFreezeSchedules": {
          "default": false,
          "type": "boolean"
        },
        "uprise": {
          "default": false,
          "type": "boolean"
        },
        "flex": {
          "default": false,
          "type": "boolean"
        },
        "customerId": {
          "$ref": "#/definitions/ObjectID"
        },
        "ispSpeedTestConfiguration": {
          "$ref": "#/definitions/LocationSpeedTest"
        },
        "bandSteering": {
          "$ref": "#/definitions/LocationBandSteering"
        },
        "clientSteering": {
          "$ref": "#/definitions/LocationClientSteering"
        },
        "controlMode": {
          "$ref": "#/definitions/LocationControlMode"
        },
        "monitorMode": {
          "$ref": "#/definitions/LocationMonitorMode"
        },
        "backhaul": {
          "$ref": "#/definitions/LocationBackhaul"
        },
        "wanSettings": {
          "$ref": "#/definitions/LocationWanSettings"
        },
        "wifiMotion": {
          "$ref": "#/definitions/WifiMotion"
        },
        "geoIp": {
          "$ref": "#/definitions/GeoIp"
        },
        "networkStatus": {
          "$ref": "#/definitions/NetworkStatus"
        },
        "optimizations": {
          "$ref": "#/definitions/Optimizations"
        },
        "authorizations": {
          "$ref": "#/definitions/Authorizations"
        },
        "locale": {
          "$ref": "#/definitions/Locale"
        },
        "networkAccess": {
          "$ref": "#/definitions/NetworkAccess"
        },
        "dppConfiguration": {
          "$ref": "#/definitions/DppConfiguration"
        },
        "haahsConfiguration": {
          "$ref": "#/definitions/HaahsConfiguration"
        },
        "_secondaryNetworks": {
          "$ref": "#/definitions/SecondaryNetworks"
        }
      },
      "required": [
        "name",
        "_version"
      ],
      "additionalProperties": false
    },
    "AppFacadeHomeResponse": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of the API response",
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "capabilities": {
          "$ref": "#/definitions/CapabilitiesResponse"
        },
        "geoIp": {
          "$ref": "#/definitions/GeoIp"
        },
        "networkStatus": {
          "$ref": "#/definitions/NetworkStatus"
        },
        "optimization": {
          "$ref": "#/definitions/Optimizations"
        },
        "wifiNetwork": {
          "$ref": "#/definitions/WifiNetwork"
        },
        "devices": {
          "$ref": "#/definitions/Devices"
        },
        "nodes": {
          "$ref": "#/definitions/Node"
        },
        "summary": {
          "$ref": "#/definitions/SummaryResponse"
        },
        "alerts": {
          "type": "object"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "additionalProperties": false
    },
    "Person": {
      "description": "Person object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "nickname": {
          "type": "string"
        },
        "imageId": {
          "description": "unique identifier for referencing a Person's hosted profile image",
          "type": "string"
        },
        "primaryDevice": {
          "description": "mac address of the Person's primary device",
          "type": "string"
        },
        "homeAwayNotification": {
          "default": false,
          "description": "notification when person is away from home",
          "type": "boolean"
        },
        "appTime": {
          "description": "person's appTime config",
          "type": "object"
        },
        "permission": {
          "description": "person's access permissions",
          "type": "object"
        },
        "profile": {
          "description": "person specific profile",
          "$ref": "#/definitions/PersonProfile"
        },
        "serviceLinking": {
          "description": "A link to a 3rd party's Person object",
          "type": "object"
        },
        "networkId": {
          "description": "person and their devices behave as a group on this fronthaul network as it pertains to sharing access",
          "type": "string"
        },
        "email": {
          "description": "email address for creating co-manager access",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "nickname"
      ],
      "additionalProperties": false
    },
    "DeviceResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "icon": {
          "description": "The mapping is:\n'mediaSTB': ['appletv', 'chromecast', 'tivo', 'np-'],\n'camera' : ['cam'],\n'gamingConsole' : ['xbox', 'ps3', 'ps4'],\n'smartPhone' : ['iphone', 'ipod', 'phone', 'android'],\n'tablet' : ['ipad', 'kindle'],\n'imac' : ['imac', 'macintosh'],\n'desktop' : ['desktop'],\n'routerbox' : ['linksys', 'netgear', 'asus', 'belkin', 'airport'],\n'laptop' : ['mbp', 'air', 'macbook', 'pc', 'thinkpad'],\n'printer' : ['printer', 'epson'],\n'tv' : ['tv', 'vizo'],\n'voipPhone' : ['voip'],\n'speaker' : ['sonos'],\n'lightbulb' : ['lifx']",
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "accessZone": {
          "description": "home | guests | internetAccessOnly",
          "type": "string"
        },
        "keyId": {
          "description": "unique id of the WifiNetwork.keys[x] that the device is connected to or last connected to",
          "type": "number",
          "format": "double"
        },
        "medium": {
          "description": "wifi or ethernet",
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "freqBand": {
          "description": "2.4G or 5G or 6G, undefined if medium ethernet",
          "type": "string"
        },
        "channel": {
          "description": "undefined if medium ethernet",
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "host name else mac",
          "type": "string"
        },
        "connectionState": {
          "description": "connected, disconnected, or unavailable",
          "type": "string"
        },
        "connectionStateChangeAt": {
          "description": "time at which connectionStateChange last changed",
          "type": "string",
          "format": "date-time"
        },
        "health": {
          "description": "healthy, poor, or degraded",
          "type": "object"
        },
        "leafToRoot": {
          "description": "the list member is the parentId and freqBand,\n from its pod to the root/gateway.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "mobileAppDeviceUuid": {
          "description": "Unique identifier for mobile devices that the mobile app generates and controls",
          "type": "string"
        }
      },
      "required": [
        "mac",
        "ip",
        "connectionState",
        "leafToRoot"
      ],
      "additionalProperties": false
    },
    "WifiDashboardResponse": {
      "properties": {
        "ssid": {
          "type": "string"
        },
        "accessZones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiAccessZoneResponse"
          }
        }
      },
      "required": [
        "ssid"
      ],
      "additionalProperties": false
    },
    "CustomDeviceType": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "typeIdentified": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "iconV2": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "brand": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "_version",
        "typeIdentified"
      ],
      "additionalProperties": false
    },
    "WifiNetwork": {
      "properties": {
        "encryptionKey": {
          "type": "string"
        },
        "ssid": {
          "type": "string"
        },
        "masterKeyIndex": {
          "default": 0,
          "description": "keys[] array index of the password to be used as the original home password for backwards compatibility for locations that don't use home pass (yet)",
          "type": "number",
          "format": "double"
        },
        "encryption": {
          "enum": [
            "OPEN",
            "WEP",
            "WPA-EAP",
            "WPA-PSK"
          ],
          "type": "string"
        },
        "wpaMode": {
          "default": "psk2",
          "description": "open || psk-mixed || sae-mixed || psk2 || sae",
          "type": "string"
        },
        "encryptionMode": {
          "enum": [
            "1",
            "2",
            "mixed",
            "64",
            "128"
          ],
          "type": "string"
        },
        "radiusServerIp": {
          "type": "string"
        },
        "radiusServerPort": {
          "type": "number",
          "format": "double"
        },
        "ssidBroadcast": {
          "type": "boolean"
        },
        "uapsd": {
          "default": true,
          "type": "boolean"
        },
        "enabled": {
          "default": true,
          "description": "enables the VAPs and radios and backhauls",
          "type": "boolean"
        },
        "disableDefaultServiceNetwork": {
          "default": false,
          "description": "disables the primary network VAP",
          "type": "boolean"
        },
        "groupRekey": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "fastTransition": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "minWifiMode24": {
          "default": "auto",
          "description": "auto || 11b || 11g || 11n",
          "type": "string"
        },
        "privateMode": {
          "default": false,
          "type": "boolean"
        },
        "privateModeUpdatedAt": {
          "description": "Privacy Mode Visibility with timestamp in Frontline",
          "type": "string",
          "format": "date-time"
        },
        "devicesVisibleToGuests": {
          "default": [],
          "description": "the list of the device mac addresses",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultSecurityPolicy": {
          "description": "location's default security policy",
          "$ref": "#/definitions/WifiSecurityPolicy"
        },
        "content": {
          "description": "content filter of the master key[masterKeyIndex]: kids || teenagers || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appliesToAllDevicesSecurityPolicy": {
          "description": "location's default security policy",
          "$ref": "#/definitions/WifiSecurityPolicy"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "wpaModeDeferredExpiresAt": {
          "description": "Hold off setting wpaMode on devices for WPA3 onboarding for a set amount of time.",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiNetworkKey"
          }
        },
        "persons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiSecurityPolicy"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiSecurityPolicy"
          }
        },
        "accessZones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiAccessZone"
          }
        }
      },
      "required": [
        "encryptionKey",
        "ssid",
        "masterKeyIndex",
        "_version"
      ],
      "additionalProperties": false
    },
    "WifiNetworkKey": {
      "properties": {
        "id": {
          "type": "number",
          "format": "double"
        },
        "encryptionKey": {
          "description": "a password for parent WifiNetwork.ssid",
          "type": "string"
        },
        "accessZone": {
          "description": "home | guests | internetAccessOnly",
          "type": "string"
        },
        "accessZoneId": {
          "description": "home:0 | internetAccessOnly:1 | guests:2 | guests:3 | guests:4",
          "type": "number",
          "format": "double"
        },
        "format": {
          "description": "encryptionKey | phoneNumber",
          "type": "string"
        },
        "enable": {
          "description": "devices can connect using this encryptionKey",
          "type": "boolean"
        },
        "content": {
          "description": "content filter IDs: kids || teenagers || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        }
      },
      "required": [
        "id",
        "encryptionKey",
        "accessZone",
        "format",
        "_version"
      ],
      "additionalProperties": false
    },
    "WifiAccessZone": {
      "properties": {
        "id": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "home | guests | internetAccessOnly",
          "type": "string"
        },
        "description": {
          "description": "name of accessZone",
          "type": "string"
        },
        "accessibleDevices": {
          "description": "macs of home devices visible to guests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        }
      },
      "required": [
        "id",
        "type",
        "description",
        "_version"
      ],
      "additionalProperties": false
    },
    "Invitation": {
      "properties": {
        "id": {
          "type": "string"
        },
        "keyId": {
          "type": "number",
          "format": "double"
        },
        "url": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "description": "used by Mongo to auto delete the document",
          "type": "string",
          "format": "date-time"
        },
        "wifiNetworkId": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "id",
        "expiresAt"
      ],
      "additionalProperties": false
    },
    "LocationSpeedTest": {
      "properties": {
        "_version": {
          "default": "1.0.1",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "enable": {
          "description": "if network is idle, ISP speedtests will be run on a gateway node every 3 hours",
          "type": "boolean"
        },
        "speedCapable": {
          "description": "The first ISP Speed Test on a gateway node had speed results above a minimum threshold",
          "type": "boolean"
        },
        "enableAllNodes": {
          "description": "if network is idle, ISP speedtests will be run on every node twice a day",
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "CapabilitiesResponse": {
      "properties": {
        "networkConfiguration": {
          "$ref": "#/definitions/NetworkConfigurationCapabilitiesResponse"
        },
        "security": {
          "description": "Firmware capabilities for security features.",
          "$ref": "#/definitions/SecurityCapabilitiesResponse"
        },
        "ispSpeedTest": {
          "description": "ISP speed test availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "deviceFreeze": {
          "description": "support for device freeze templates",
          "$ref": "#/definitions/Capability"
        },
        "multiPasswordSSID": {
          "description": "support for non-host access (a.k.a., Single SSID, Multi Password onboarding)",
          "$ref": "#/definitions/Capability"
        },
        "wifiMotion": {
          "description": "support for wifi motion features",
          "$ref": "#/definitions/Capability"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "capabilitiesChangedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "networkConfiguration",
        "security",
        "ispSpeedTest",
        "deviceFreeze",
        "multiPasswordSSID",
        "wifiMotion",
        "_version",
        "capabilitiesChangedAt"
      ],
      "additionalProperties": false
    },
    "ClientSteeringConfiguration": {
      "properties": {
        "auto": {
          "default": true,
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "auto",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "SecurityConfiguration": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "preferredIntelligence": {
          "default": "auto",
          "description": "auto || BrightCloud || Webpulse || Gatekeeper",
          "type": "string"
        },
        "ipThreatIntelligence": {
          "description": "auto || BrightCloud || Webpulse || Gatekeeper",
          "type": "string"
        },
        "wcHealthTelemetry": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "wcHeroTelemetry": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "ipThreatProtect": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "dpiContentFiltering": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "inlineDpi": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "dosProtection": {
          "type": "object"
        },
        "ipThreatProvider": {
          "default": "auto",
          "description": "auto || plume || norton",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "preferredIntelligence",
        "ipThreatIntelligence",
        "wcHealthTelemetry",
        "wcHeroTelemetry",
        "ipThreatProtect",
        "dpiContentFiltering",
        "inlineDpi",
        "ipThreatProvider",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "LocationBandSteering": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "auto": {
          "default": true,
          "description": "deprecated",
          "type": "boolean"
        },
        "mode": {
          "description": "auto | enable | disable",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "LocationBackhaul": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "mode": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "wpaKey": {
          "description": "63 characters, all CAPS, Hexadecimal",
          "type": "string"
        },
        "dynamicBeacon": {
          "default": "auto",
          "description": "Represents whether or not dynamic beaconing is available for this location.\nCan be either auto, enable, or disable",
          "type": "string"
        },
        "wds": {
          "default": "auto",
          "description": "auto || enable || disable",
          "type": "string"
        },
        "wpaMode": {
          "default": "auto",
          "description": "auto || psk2 || sae-mixed",
          "type": "string"
        },
        "wpaModeRealized": {
          "description": "psk2 || sae-mixed",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "mode",
        "wpaKey"
      ],
      "additionalProperties": false
    },
    "LocationControlMode": {
      "properties": {
        "mode": {
          "default": "full",
          "description": "full | monitor | reduced | battery",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "LocationMonitorMode": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "enable": {
          "default": true,
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "Optimizations": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "auto": {
          "default": true,
          "type": "boolean"
        },
        "enable": {
          "type": "boolean"
        },
        "dfsMode": {
          "default": "auto",
          "type": "string"
        },
        "prefer160MhzMode": {
          "default": "auto",
          "type": "string"
        },
        "hopPenalty": {
          "default": "auto",
          "type": "string"
        },
        "preCACScheduler": {
          "default": "auto",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "Locale": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "region": {
          "description": "during optimizations, used to determine allowed WiFi channels. Possible values: US, SINGAPORE, UK, EU, CANADA, JP.",
          "type": "string"
        },
        "dfsMode": {
          "description": "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels, usDfs",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "Authorizations": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "numPodsAuthorized": {
          "default": 32,
          "description": "number of leaf pods that are authorized to be claimed and be a part of the Plume network",
          "type": "number",
          "format": "double"
        },
        "numNodesAuthorized": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAuthorization"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "NodeAuthorization": {
      "properties": {
        "model": {
          "description": "Plume pod model id",
          "type": "string"
        },
        "count": {
          "description": "number of pods that are authorized to be claimed for the associated model",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "model",
        "count"
      ],
      "additionalProperties": false
    },
    "LocationWanSettings": {
      "properties": {
        "_version": {
          "default": "1.0.1",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "connectionType": {
          "description": "static, pppoe, or dynamic",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "static": {
          "$ref": "#/definitions/WanSettingsStatic"
        },
        "pppoe": {
          "$ref": "#/definitions/WanSettingsPppoe"
        }
      },
      "required": [
        "_version",
        "connectionType",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "DhcpReservation": {
      "properties": {
        "mac": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        }
      },
      "required": [
        "mac",
        "ip"
      ],
      "additionalProperties": false
    },
    "Multicast": {
      "properties": {
        "igmpSnooping": {
          "$ref": "#/definitions/IgmpSnooping"
        },
        "igmpProxy": {
          "$ref": "#/definitions/IgmpProxy"
        },
        "mldProxy": {
          "$ref": "#/definitions/MldProxy"
        },
        "multicastToUnicast": {
          "$ref": "#/definitions/MulticastToUnicast"
        }
      },
      "additionalProperties": false
    },
    "EthernetLan": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "Upnp": {
      "properties": {
        "enabled": {
          "default": false,
          "type": "boolean"
        },
        "mode": {
          "type": "string"
        },
        "modeRealized": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ],
      "additionalProperties": false
    },
    "DnsServers": {
      "properties": {
        "primaryDns": {
          "type": "string"
        },
        "enabled": {
          "default": true,
          "type": "boolean"
        },
        "secondaryDns": {
          "type": "string"
        }
      },
      "required": [
        "enabled"
      ],
      "additionalProperties": false
    },
    "NetworkConfigurationHome": {
      "properties": {
        "networkMode": {
          "type": "string"
        },
        "dnsServers": {
          "$ref": "#/definitions/DnsServers"
        },
        "upnp": {
          "$ref": "#/definitions/Upnp"
        },
        "igmpSnooping": {
          "$ref": "#/definitions/IgmpSnooping"
        }
      },
      "required": [
        "networkMode"
      ],
      "additionalProperties": false
    },
    "PortForward": {
      "properties": {
        "externalPort": {
          "type": "number",
          "format": "double"
        },
        "internalPort": {
          "type": "number",
          "format": "double"
        },
        "protocol": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "externalPort",
        "internalPort",
        "protocol"
      ],
      "additionalProperties": false
    },
    "OnboardingCheckpointResponse": {
      "properties": {
        "checkpoint": {
          "description": "the last recorded checkpoint.",
          "$ref": "#/definitions/OnboardingCheckpoint"
        }
      },
      "required": [
        "checkpoint"
      ],
      "additionalProperties": false
    },
    "SummaryResponse": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of the API response",
          "type": "string"
        },
        "wifiNetworkProvisioned": {
          "description": "The customer has submitted a valid SSID and password or not",
          "type": "boolean"
        },
        "onboardingStatus": {
          "description": "unknown, OnboardingComplete, NotificationAccepted, or PodsAdded",
          "type": "string"
        },
        "networkModeProvisioned": {
          "description": "'auto', 'bridge', 'router' for users to choose from NOC",
          "type": "string"
        },
        "optimization": {
          "description": "'contains fields: state, stateChangedAt, and trigger",
          "type": "object"
        },
        "monitorMode": {
          "type": "boolean"
        },
        "timestamp": {
          "description": "ISO Date of returned topology, optional if in included in client API call",
          "type": "string"
        },
        "topology": {
          "description": "List of Nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeResponse"
          }
        },
        "gatewayConnectionState": {
          "description": "connected or disconnected",
          "type": "string"
        },
        "nodeConnectedCount": {
          "description": "count total nodes with 'connected' connectionState",
          "type": "number",
          "format": "double"
        },
        "nodeClaimedCount": {
          "description": "nodeArray length",
          "type": "number",
          "format": "double"
        },
        "connectedDeviceCount": {
          "description": "count total devices with 'connected' connectionState",
          "type": "number",
          "format": "double"
        },
        "networkModeRealized": {
          "description": "default value is 'unknow', 'bridge' if there is no router for all connected pods, 'router' if there is a connected pod with 'router'",
          "type": "string"
        }
      },
      "required": [
        "_version",
        "wifiNetworkProvisioned",
        "topology",
        "gatewayConnectionState",
        "nodeConnectedCount",
        "nodeClaimedCount",
        "connectedDeviceCount",
        "networkModeRealized"
      ],
      "additionalProperties": false
    },
    "TopologyResponse": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of the API response",
          "type": "string"
        },
        "timestamp": {
          "description": "ISO Date of returned topology, optional if in included in client API call",
          "type": "string"
        },
        "topology": {
          "description": "List of Nodes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeResponse"
          }
        },
        "gatewayConnectionState": {
          "description": "connected or disconnected",
          "type": "string"
        },
        "nodeConnectedCount": {
          "description": "count total nodes with 'connected' connectionState",
          "type": "number",
          "format": "double"
        },
        "nodeClaimedCount": {
          "description": "nodeArray length",
          "type": "number",
          "format": "double"
        },
        "connectedDeviceCount": {
          "description": "count total devices with 'connected' connectionState",
          "type": "number",
          "format": "double"
        },
        "networkModeRealized": {
          "description": "default value is 'unknow', 'bridge' if there is no router for all connected pods, 'router' if there is a connected pod with 'router'",
          "type": "string"
        }
      },
      "required": [
        "_version",
        "topology",
        "gatewayConnectionState",
        "nodeConnectedCount",
        "nodeClaimedCount",
        "connectedDeviceCount",
        "networkModeRealized"
      ],
      "additionalProperties": false
    },
    "Node": {
      "description": "Plume internal-only APIs.",
      "properties": {
        "serialNumber": {
          "type": "string"
        },
        "id": {
          "description": "always returns the value of 'serialNumber'",
          "type": "string"
        },
        "manufacturerSerialNumber": {
          "description": "value from the firmware's OVS AWLAN_Node.serial_number column",
          "type": "string"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "subscriptionRequired": {
          "default": false,
          "description": "if true, Plume mobile app customers will need to activate a subscription to use our service",
          "type": "boolean"
        },
        "residentialGateway": {
          "default": false,
          "description": "residential gateways (mostly auto imported) require special treatment and searchability",
          "type": "boolean"
        },
        "firmwareVersion": {
          "type": "string"
        },
        "platformVersion": {
          "type": "string"
        },
        "model": {
          "description": "reported by OVS schema",
          "type": "string"
        },
        "backhaulDhcpPoolIdx": {
          "type": "number",
          "format": "double"
        },
        "radioMac24": {
          "type": "string"
        },
        "radioMac50": {
          "type": "string"
        },
        "radioMac60": {
          "type": "string"
        },
        "ethernetMac": {
          "type": "string"
        },
        "bluetoothMac": {
          "type": "string"
        },
        "thread": {
          "type": "string"
        },
        "blacklists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "connectionState": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "networkMode": {
          "description": "the default value is 'auto', users can choose 'router' or 'auto'",
          "type": "string"
        },
        "macs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "nickname": {
          "type": "string"
        },
        "boxSerialNumber": {
          "type": "string"
        },
        "packId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "description": "date/time node was claimed",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "productFamily": {
          "description": "Manufacturer Product Family (Alpha)",
          "type": "string"
        },
        "productDescriptor": {
          "description": "1 = Pod, 2x2 DBDC, 1xGbE Ethernet, BLE, All Plug Types",
          "type": "string"
        },
        "manufactureLocation": {
          "description": "1 = Arcadyan Kunshan",
          "type": "string"
        },
        "manufactureYear": {
          "description": "6 (2016), 7 (2017)",
          "type": "string"
        },
        "manufactureWeek": {
          "description": "48 (week 48), 01,02,03,- 52",
          "type": "string"
        },
        "deployment": {
          "description": "used by redirector to route pods",
          "type": "string"
        },
        "shardNumber": {
          "description": "used by redirector to route pods",
          "type": "string"
        },
        "synchronizedKey": {
          "type": "string"
        },
        "connectionStateChangeAt": {
          "description": "time at which connectionStateChange last changed",
          "type": "string",
          "format": "date-time"
        },
        "ethernetLan": {
          "default": {
            "default": {
              "mode": "auto"
            }
          },
          "description": "gives the ability to enable or disable individual pods ethernetLan",
          "type": "object"
        },
        "customerId": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        },
        "vendor": {
          "$ref": "#/definitions/NodeVendor"
        },
        "certificates": {
          "$ref": "#/definitions/NodeCertificates"
        },
        "kvConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KvConfig"
          }
        }
      },
      "required": [
        "serialNumber",
        "_version"
      ],
      "additionalProperties": false
    },
    "Device": {
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "mac": {
          "type": "string"
        },
        "keyId": {
          "description": "unique id of the WifiNetwork.keys[x] that the device is connected to or last connected to",
          "type": "number",
          "format": "double"
        },
        "hostName": {
          "description": "host name from the device/user settings",
          "type": "string"
        },
        "model": {
          "description": "device model",
          "type": "string"
        },
        "medium": {
          "description": "wifi, ethernet, or moca",
          "type": "string"
        },
        "_version": {
          "default": "1.0.2",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "onlineSince": {
          "type": "string",
          "format": "date-time"
        },
        "offlineSince": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "connectionState": {
          "type": "string"
        },
        "connectionStateChangeAt": {
          "description": "time at which connectionStateChange last changed",
          "type": "string",
          "format": "date-time"
        },
        "vapType": {
          "enum": [
            "backhaul",
            "onboarding",
            "home",
            "guest",
            "auxiliary1",
            "auxiliary2",
            "fronthaul",
            "captivePortal"
          ],
          "type": "string"
        },
        "networkId": {
          "type": "string"
        },
        "favorite": {
          "default": false,
          "type": "boolean"
        },
        "hiddenAt": {
          "description": "Time at which user removed device from device list",
          "type": "string",
          "format": "date-time"
        },
        "appTime": {
          "description": "device's appTime config",
          "type": "object"
        },
        "mobileAppDeviceUuid": {
          "description": "Unique identifier for mobile devices that the mobile app generates and controls",
          "type": "string"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        },
        "bandSteering": {
          "$ref": "#/definitions/DeviceBandSteering"
        },
        "clientSteering": {
          "$ref": "#/definitions/DeviceClientSteering"
        },
        "qos": {
          "$ref": "#/definitions/Qos"
        }
      },
      "required": [
        "mac",
        "_version"
      ],
      "additionalProperties": false
    },
    "NodeResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "defaultName": {
          "type": "string"
        },
        "firmwareVersion": {
          "type": "string"
        },
        "wifiConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "channel": {
          "type": "string"
        },
        "connectionState": {
          "description": "connected, disconnected, or unavailable",
          "type": "string"
        },
        "2gChannel": {
          "type": "string"
        },
        "5gChannel": {
          "type": "string"
        },
        "6gChannel": {
          "type": "string"
        },
        "backhaulType": {
          "description": "ethernet, wifi, or unknown",
          "type": "string"
        },
        "connectedDeviceCount": {
          "description": "count total devices with 'connected' connectionState",
          "type": "number",
          "format": "double"
        },
        "leafToRoot": {
          "description": "the list member is the parentId and freqBand, from itself to the root/gateway.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "ip",
        "connectionState",
        "2gChannel",
        "5gChannel",
        "backhaulType",
        "connectedDeviceCount",
        "leafToRoot"
      ],
      "additionalProperties": false
    },
    "NodeResponses": {
      "properties": {
        "nodes": {
          "description": "list of nodes associated to this Location.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeResponse"
          }
        }
      },
      "required": [
        "nodes"
      ],
      "additionalProperties": false
    },
    "Devices": {
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceResponse"
          }
        }
      },
      "required": [
        "devices"
      ],
      "additionalProperties": false
    },
    "NodeClaimingResponse": {
      "properties": {
        "claimed": {
          "description": "list of claimed nodes that are ready to be plugged in.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimedNode"
          }
        },
        "id": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "claimed"
      ],
      "additionalProperties": false
    },
    "Room": {
      "description": "Room object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "LocationAccess": {
      "properties": {
        "ownerId": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        },
        "personId": {
          "type": "string"
        },
        "managerId": {
          "$ref": "#/definitions/ObjectID"
        },
        "accessType": {
          "default": "admin",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "ownerId",
        "locationId",
        "managerId",
        "createdAt",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "NetworkAccessNetwork": {
      "properties": {
        "networkId": {
          "type": "string"
        },
        "purgatory": {
          "default": false,
          "type": "boolean"
        },
        "heaven": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        }
      },
      "required": [
        "networkId"
      ],
      "additionalProperties": false
    },
    "NetworkAccessDeviceGroup": {
      "properties": {
        "groupId": {
          "type": "string"
        },
        "networkId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "devices": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        }
      },
      "required": [
        "groupId"
      ],
      "additionalProperties": false
    },
    "PendingWhitelistRequests": {
      "description": "Requests for whitelisting of access",
      "properties": {
        "requestId": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        },
        "personId": {
          "description": "PersonId of the requester",
          "type": "string"
        },
        "requesterCustomerId": {
          "description": "CustomerId of the requester",
          "type": "string"
        },
        "type": {
          "description": "mac address of the Person's primary device",
          "type": "string"
        },
        "value": {
          "default": false,
          "description": "notification when person is away from home",
          "type": "boolean"
        },
        "status": {
          "default": "pending",
          "description": "person's appTime config",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "locationId",
        "createdAt",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "homepassCustomerSupportConfigurations": {
      "properties": {
        "faqEnabled": {
          "default": false,
          "type": "boolean"
        },
        "addPodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "removePodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "contactUsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "callUsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "multilocationEnabled": {
          "default": false,
          "type": "boolean"
        },
        "buyPodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "partnerBuyPodUrlEnabled": {
          "default": false,
          "type": "boolean"
        },
        "privacyEnabled": {
          "default": false,
          "type": "boolean"
        },
        "termsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "removeGatewayEnabled": {
          "default": false,
          "type": "boolean"
        },
        "manageYourDataEnabled": {
          "default": false,
          "type": "boolean"
        },
        "autorunSpeedtestToggleEnabled": {
          "default": false,
          "type": "boolean"
        },
        "manageAccountEnabled": {
          "default": false,
          "type": "boolean"
        },
        "partnerAccountEnabled": {
          "default": false,
          "type": "boolean"
        },
        "chatSupportEnabled": {
          "default": false,
          "type": "boolean"
        },
        "hideIspNameEnabled": {
          "default": false,
          "type": "boolean"
        },
        "displayCustomLogoEnabled": {
          "default": false,
          "type": "boolean"
        },
        "mobileCustomDeeplinkEnabled": {
          "default": false,
          "type": "boolean"
        },
        "privacyUrl": {
          "type": "string"
        },
        "termsUrl": {
          "type": "string"
        },
        "faqUrl": {
          "type": "string"
        },
        "plumeBuyPodUrl": {
          "type": "string"
        },
        "partnerBuyPodUrl": {
          "type": "string"
        },
        "contactUsEmail": {
          "type": "string"
        },
        "callUsPhoneNumber": {
          "type": "string"
        },
        "callUsDisplayPhoneNumber": {
          "type": "string"
        },
        "manageYourDataUrl": {
          "type": "string"
        },
        "plumeAccountUrl": {
          "type": "string"
        },
        "partnerAccountUrl": {
          "type": "string"
        },
        "chatSupportUrl": {
          "type": "string"
        },
        "mobileCustomDeeplinkUrl": {
          "type": "string"
        },
        "androidStoreApplicationUrl": {
          "type": "string"
        },
        "iosStoreApplicationUrl": {
          "type": "string"
        },
        "logoResource": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "additionalProperties": false
    },
    "workpassCustomerSupportConfigurations": {
      "properties": {
        "faqEnabled": {
          "default": false,
          "type": "boolean"
        },
        "addPodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "captivePortalGuestEmailDownloadDisabled": {
          "default": false,
          "type": "boolean"
        },
        "workPassWebappDisabled": {
          "default": false,
          "type": "boolean"
        },
        "removePodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "contactUsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "callUsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "multilocationEnabled": {
          "default": false,
          "type": "boolean"
        },
        "buyPodEnabled": {
          "default": false,
          "type": "boolean"
        },
        "partnerBuyPodUrlEnabled": {
          "default": false,
          "type": "boolean"
        },
        "privacyEnabled": {
          "default": false,
          "type": "boolean"
        },
        "termsEnabled": {
          "default": false,
          "type": "boolean"
        },
        "removeGatewayEnabled": {
          "default": false,
          "type": "boolean"
        },
        "manageYourDataEnabled": {
          "default": false,
          "type": "boolean"
        },
        "autorunSpeedtestToggleEnabled": {
          "default": false,
          "type": "boolean"
        },
        "manageAccountEnabled": {
          "default": false,
          "type": "boolean"
        },
        "partnerAccountEnabled": {
          "default": false,
          "type": "boolean"
        },
        "chatSupportEnabled": {
          "default": false,
          "type": "boolean"
        },
        "hideIspNameEnabled": {
          "default": false,
          "type": "boolean"
        },
        "displayCustomLogoEnabled": {
          "default": false,
          "type": "boolean"
        },
        "mobileCustomDeeplinkEnabled": {
          "default": false,
          "type": "boolean"
        },
        "privacyUrl": {
          "type": "string"
        },
        "termsUrl": {
          "type": "string"
        },
        "faqUrl": {
          "type": "string"
        },
        "plumeBuyPodUrl": {
          "type": "string"
        },
        "partnerBuyPodUrl": {
          "type": "string"
        },
        "contactUsEmail": {
          "type": "string"
        },
        "callUsPhoneNumber": {
          "type": "string"
        },
        "callUsDisplayPhoneNumber": {
          "type": "string"
        },
        "manageYourDataUrl": {
          "type": "string"
        },
        "plumeAccountUrl": {
          "type": "string"
        },
        "partnerAccountUrl": {
          "type": "string"
        },
        "chatSupportUrl": {
          "type": "string"
        },
        "mobileCustomDeeplinkUrl": {
          "type": "string"
        },
        "androidStoreApplicationUrl": {
          "type": "string"
        },
        "iosStoreApplicationUrl": {
          "type": "string"
        },
        "webappUrl": {
          "default": "https://web.workpass.plume.com",
          "type": "string"
        },
        "logoResource": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "additionalProperties": false
    },
    "AuditTrail": {
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "customerId": {
          "description": "The customer id",
          "type": "string"
        },
        "locationId": {
          "description": "The location id",
          "type": "string"
        },
        "partnerId": {
          "description": "The partner id",
          "type": "string"
        },
        "author": {
          "description": "The user who made the change",
          "type": "string"
        },
        "createdAt": {
          "description": "The date and time the change was made",
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "description": "The date and time the change will expire",
          "type": "string",
          "format": "date-time"
        },
        "event": {
          "enum": [
            "CustomerCreated",
            "CustomerDeleted",
            "CustomerConfigChanged",
            "LocationCreated",
            "LocationDeleted",
            "LocationConfigChanged",
            "NodeClaimed",
            "NodeUnclaimed",
            "MultiNodeClaimed",
            "NodeSwapped",
            "WifiConfigChanged",
            "SecurityPolicyChanged"
          ],
          "description": "The type of event that occurred",
          "type": "string"
        },
        "details": {
          "description": "The details of the event",
          "type": "object"
        },
        "xRequestId": {
          "description": "The request id",
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "author",
        "createdAt",
        "expiresAt",
        "event",
        "details"
      ],
      "additionalProperties": false
    },
    "ObjectID": {
      "type": "string",
      "pattern": "^[a-fA-F\\d]{24}$"
    },
    "LocationClientSteering": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "auto": {
          "default": true,
          "description": "deprecated",
          "type": "boolean"
        },
        "mode": {
          "description": "auto | enable | disable",
          "type": "string"
        },
        "steeringClass": {
          "description": "override deviceTypeId for testing purposes",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "GeoIp": {
      "description": "Location information recevied from geo IP service maxmind.com",
      "properties": {
        "ip": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "latitude": {
          "description": "latitude of location based from IP.",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "longitude of location based from IP.",
          "type": "number",
          "format": "double"
        },
        "timezone": {
          "description": "timezone of location based from IP.",
          "type": "string"
        },
        "ISP": {
          "default": false,
          "description": "ISP of location based from IP.",
          "type": "boolean"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "NetworkStatus": {
      "description": "Location's network status information recevied from awlan.location.networkStatusChanged event",
      "properties": {
        "status": {
          "description": "Network status: [online | offline]",
          "type": "string"
        },
        "statusChangedAt": {
          "description": "Date time when status chenged.",
          "type": "string",
          "format": "date-time"
        },
        "durationOfPreviousStatus": {
          "description": "Duration in seconds of previous status.",
          "type": "number",
          "format": "double"
        },
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "NetworkAccess": {
      "properties": {
        "hell": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        },
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkAccessNetwork"
          }
        },
        "personGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkAccessDeviceGroup"
          }
        },
        "deviceGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkAccessDeviceGroup"
          }
        },
        "groupShares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkAccessGroupShare"
          }
        }
      },
      "additionalProperties": false
    },
    "DppConfiguration": {
      "properties": {
        "locationId": {
          "type": "string"
        },
        "mode": {
          "default": "auto",
          "type": "string"
        },
        "enrollments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DppConfigurationEnrollment"
          }
        }
      },
      "required": [
        "locationId"
      ],
      "additionalProperties": false
    },
    "HaahsConfiguration": {
      "properties": {
        "locationId": {
          "type": "string"
        },
        "mode": {
          "default": "auto",
          "type": "string"
        },
        "subscription": {
          "$ref": "#/definitions/HaahsConfigurationSubscription"
        }
      },
      "required": [
        "locationId"
      ],
      "additionalProperties": false
    },
    "SecondaryNetworks": {
      "properties": {
        "locationId": {
          "type": "string"
        },
        "networkConfigs": {
          "default": [],
          "description": "Array of secondary network configurations",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "locationId"
      ],
      "additionalProperties": false
    },
    "PersonProfile": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "type": {
          "description": "employee only for now",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "_version",
        "type"
      ],
      "additionalProperties": false
    },
    "WifiAccessZoneResponse": {
      "properties": {
        "id": {
          "description": "accessZoneId",
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "home | guests | internetAccessOnly",
          "type": "string"
        },
        "description": {
          "description": "name of accessZone",
          "type": "string"
        },
        "accessibleDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceResponse"
          }
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WifiNetworkKey"
          }
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "WifiSecurityPolicy": {
      "properties": {
        "id": {
          "description": "Person Mongo ID || device mac",
          "type": "string"
        },
        "content": {
          "description": "content filter IDs: kids || teenagers || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "iotProtect": {
          "description": "iotProtect enable/disable (enable requires secureAndProtect already enabled)",
          "type": "boolean"
        },
        "iotProtectUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "iotProtectReason": {
          "description": "optional reason used to identify why it is being disabled (device level only)",
          "type": "string"
        },
        "websites": {
          "description": "has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]",
          "type": "object"
        },
        "secureWebsites": {
          "description": "has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]",
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false
    },
    "NetworkConfigurationCapabilitiesResponse": {
      "properties": {
        "networkMode": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "upnp": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "igmpSnooping": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "igmpProxy": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "mldProxy": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "multicastToUnicast": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "dnsServers": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "dhcpReservations": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        },
        "portForward": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        }
      },
      "required": [
        "networkMode",
        "upnp",
        "igmpSnooping",
        "igmpProxy",
        "mldProxy",
        "multicastToUnicast",
        "dnsServers",
        "dhcpReservations",
        "portForward"
      ],
      "additionalProperties": false
    },
    "SecurityCapabilitiesResponse": {
      "properties": {
        "dnsCategoryBlocking": {
          "description": "feature's availability for a location",
          "$ref": "#/definitions/Capability"
        }
      },
      "required": [
        "dnsCategoryBlocking"
      ],
      "additionalProperties": false
    },
    "Capability": {
      "properties": {
        "disabled": {
          "default": true,
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      },
      "required": [
        "disabled"
      ],
      "additionalProperties": false
    },
    "WanSettingsStatic": {
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "subnetMask": {
          "type": "string"
        },
        "defaultGateway": {
          "type": "string"
        }
      },
      "required": [
        "ipAddress",
        "subnetMask",
        "defaultGateway"
      ],
      "additionalProperties": false
    },
    "WanSettingsPppoe": {
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "password"
      ],
      "additionalProperties": false
    },
    "IgmpSnooping": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "IgmpProxy": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "MldProxy": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "MulticastToUnicast": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "OnboardingCheckpoint": {
      "properties": {
        "value": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "locationId": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "value"
      ],
      "additionalProperties": false
    },
    "NodeVendor": {
      "properties": {
        "name": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "factory": {
          "type": "string"
        },
        "mfgDate": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "NodeCertificates": {
      "properties": {
        "clientAfter": {
          "type": "string"
        },
        "clientBefore": {
          "type": "string"
        },
        "rootAfter": {
          "type": "string"
        },
        "rootBefore": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DeviceBandSteering": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "enable": {
          "default": false,
          "type": "boolean"
        },
        "auto": {
          "default": true,
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "DeviceClientSteering": {
      "properties": {
        "_version": {
          "default": "1.0.0",
          "description": "schema version # of a Mongo document",
          "type": "string"
        },
        "enable": {
          "default": false,
          "type": "boolean"
        },
        "auto": {
          "default": true,
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "_version",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "Qos": {
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "prioritization": {
          "$ref": "#/definitions/Prioritization"
        }
      },
      "additionalProperties": false
    },
    "ClaimedNode": {
      "properties": {
        "serialNumber": {
          "description": "unique serialNumber",
          "type": "string"
        },
        "id": {
          "description": "always returns the value of 'serialNumber'",
          "type": "string"
        },
        "nickname": {
          "description": "a cool nickname",
          "type": "string"
        },
        "defaultName": {
          "description": "defaultName is for code, display if empty nickname",
          "type": "string"
        },
        "status": {
          "description": "connectionState",
          "type": "string"
        }
      },
      "required": [
        "serialNumber",
        "nickname",
        "defaultName",
        "status"
      ],
      "additionalProperties": false
    },
    "NetworkAccessGroupShare": {
      "properties": {
        "groupIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/x-any"
          }
        }
      },
      "required": [
        "groupIds"
      ],
      "additionalProperties": false
    },
    "DppConfigurationEnrollment": {
      "properties": {
        "bootstrapUri": {
          "type": "string"
        },
        "sha256": {
          "type": "string"
        },
        "networkId": {
          "type": "string"
        }
      },
      "required": [
        "bootstrapUri",
        "sha256",
        "networkId"
      ],
      "additionalProperties": false
    },
    "HaahsConfigurationSubscription": {
      "properties": {
        "haahsConfiguration": {
          "type": "string"
        },
        "status": {
          "default": "Not supported",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "haahsConfiguration"
      ],
      "additionalProperties": false
    },
    "Prioritization": {
      "properties": {
        "mode": {
          "default": "auto",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ObjectID"
        }
      },
      "required": [
        "mode"
      ],
      "additionalProperties": false
    },
    "SecurityEventsResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SecurityEvent"
      }
    },
    "SecurityEvent": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "eventData": {
          "type": "object",
          "properties": {
            "fqdn": {
              "type": "string"
            },
            "mac": {
              "type": "string"
            },
            "protectionType": {
              "type": "string"
            }
          }
        }
      }
    },
    "NetworkConfig": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NetworkConfigSingle"
      }
    },
    "NetworkConfigSingle": {
      "type": "object",
      "properties": {
        "networkId": {
          "type": "string"
        },
        "vapType": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "ssid": {
          "type": "string"
        },
        "accessZone": {
          "type": "string"
        },
        "wpaMode": {
          "type": "string"
        }
      }
    },
    "Counts": {
      "type": "object",
      "properties": {
        "anomaly": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "statusCode": {
              "type": "integer",
              "format": "int32"
            },
            "name": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "status": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    }
  }
}
