// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	InventoryAutoProvisioning(params *InventoryAutoProvisioningParams, opts ...ClientOption) (*InventoryAutoProvisioningOK, error)

	InventoryGetNodeByID(params *InventoryGetNodeByIDParams, opts ...ClientOption) (*InventoryGetNodeByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	InventoryAutoProvisioning s node by ID from the inventory service

	<div><strong>200</strong>: Success, return the node object</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: Node not found.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) InventoryAutoProvisioning(params *InventoryAutoProvisioningParams, opts ...ClientOption) (*InventoryAutoProvisioningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryAutoProvisioningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Inventory.autoProvisioning",
		Method:             "PATCH",
		PathPattern:        "/inventory/nodes/{nodeId}/autoProvisioning",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InventoryAutoProvisioningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryAutoProvisioningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryAutoProvisioningDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	InventoryGetNodeByID gets node by ID from the inventory service

	<div><strong>200</strong>: Success, return the node object</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: Node not found.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) InventoryGetNodeByID(params *InventoryGetNodeByIDParams, opts ...ClientOption) (*InventoryGetNodeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInventoryGetNodeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Inventory.getNodeById",
		Method:             "GET",
		PathPattern:        "/inventory/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InventoryGetNodeByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InventoryGetNodeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InventoryGetNodeByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
