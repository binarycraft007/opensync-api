// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GroupCount(params *GroupCountParams, opts ...ClientOption) (*GroupCountOK, error)

	GroupCustomCreate(params *GroupCustomCreateParams, opts ...ClientOption) (*GroupCustomCreateOK, error)

	GroupFind(params *GroupFindParams, opts ...ClientOption) (*GroupFindOK, error)

	GroupFindByID(params *GroupFindByIDParams, opts ...ClientOption) (*GroupFindByIDOK, error)

	GroupFindCustomers(params *GroupFindCustomersParams, opts ...ClientOption) (*GroupFindCustomersOK, error)

	GroupGetCustomerCount(params *GroupGetCustomerCountParams, opts ...ClientOption) (*GroupGetCustomerCountOK, error)

	GroupGetCustomers(params *GroupGetCustomersParams, opts ...ClientOption) (*GroupGetCustomersOK, error)

	GroupGetLocations(params *GroupGetLocationsParams, opts ...ClientOption) (*GroupGetLocationsOK, error)

	GroupGetNodesByID(params *GroupGetNodesByIDParams, opts ...ClientOption) (*GroupGetNodesByIDOK, error)

	GroupGetRecentCustomers(params *GroupGetRecentCustomersParams, opts ...ClientOption) (*GroupGetRecentCustomersOK, error)

	GroupPatchNodesByID(params *GroupPatchNodesByIDParams, opts ...ClientOption) (*GroupPatchNodesByIDOK, error)

	GroupPrototypeGetCustomers(params *GroupPrototypeGetCustomersParams, opts ...ClientOption) (*GroupPrototypeGetCustomersOK, error)

	GroupPrototypeLinkCustomers(params *GroupPrototypeLinkCustomersParams, opts ...ClientOption) (*GroupPrototypeLinkCustomersOK, error)

	GroupPrototypeUnlinkCustomers(params *GroupPrototypeUnlinkCustomersParams, opts ...ClientOption) (*GroupPrototypeUnlinkCustomersNoContent, error)

	GroupPrototypeDelete(params *GroupPrototypeDeleteParams, opts ...ClientOption) (*GroupPrototypeDeleteOK, error)

	GroupPrototypePatchAttributesPatchGroupsID(params *GroupPrototypePatchAttributesPatchGroupsIDParams, opts ...ClientOption) (*GroupPrototypePatchAttributesPatchGroupsIDOK, error)

	GroupPrototypePatchAttributesPutGroupsID(params *GroupPrototypePatchAttributesPutGroupsIDParams, opts ...ClientOption) (*GroupPrototypePatchAttributesPutGroupsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GroupCount counts instances of the model matched by where from the data source
*/
func (a *Client) GroupCount(params *GroupCountParams, opts ...ClientOption) (*GroupCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.count",
		Method:             "GET",
		PathPattern:        "/Groups/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupCustomCreate creates a group

	<div><strong>200</strong>: Success, group created.</div>

<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupCustomCreate(params *GroupCustomCreateParams, opts ...ClientOption) (*GroupCustomCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupCustomCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.customCreate",
		Method:             "POST",
		PathPattern:        "/Groups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupCustomCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupCustomCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupCustomCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupFind finds all instances of the model matched by filter from the data source
*/
func (a *Client) GroupFind(params *GroupFindParams, opts ...ClientOption) (*GroupFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.find",
		Method:             "GET",
		PathPattern:        "/Groups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupFindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupFindDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupFindByID finds a model instance by id from the data source
*/
func (a *Client) GroupFindByID(params *GroupFindByIDParams, opts ...ClientOption) (*GroupFindByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupFindByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.findById",
		Method:             "GET",
		PathPattern:        "/Groups/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupFindByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupFindByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupFindByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupFindCustomers queries customers with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupFindCustomers(params *GroupFindCustomersParams, opts ...ClientOption) (*GroupFindCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupFindCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.findCustomers",
		Method:             "GET",
		PathPattern:        "/Groups/customers/search/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupFindCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupFindCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupFindCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupGetCustomerCount queries customers locations count with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Group id not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupGetCustomerCount(params *GroupGetCustomerCountParams, opts ...ClientOption) (*GroupGetCustomerCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetCustomerCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.getCustomerCount",
		Method:             "GET",
		PathPattern:        "/Groups/{id}/customers/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetCustomerCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetCustomerCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupGetCustomerCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupGetCustomers queries customers with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupGetCustomers(params *GroupGetCustomersParams, opts ...ClientOption) (*GroupGetCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.getCustomers",
		Method:             "GET",
		PathPattern:        "/Groups/customers/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupGetCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupGetLocations queries locations with service Id or location Id within the caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupGetLocations(params *GroupGetLocationsParams, opts ...ClientOption) (*GroupGetLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetLocationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.getLocations",
		Method:             "GET",
		PathPattern:        "/Groups/locations/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetLocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupGetLocationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupGetNodesByID queries customers locations nodes with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>403</strong>: No right to access the node.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupGetNodesByID(params *GroupGetNodesByIDParams, opts ...ClientOption) (*GroupGetNodesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetNodesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.getNodesById",
		Method:             "GET",
		PathPattern:        "/Groups/nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetNodesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetNodesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupGetNodesByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupGetRecentCustomers queries customers locations count with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Group id not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupGetRecentCustomers(params *GroupGetRecentCustomersParams, opts ...ClientOption) (*GroupGetRecentCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupGetRecentCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.getRecentCustomers",
		Method:             "GET",
		PathPattern:        "/Groups/{id}/customers/recent",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupGetRecentCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupGetRecentCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupGetRecentCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupPatchNodesByID queries customers locations nodes with caller s groups and update it

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) GroupPatchNodesByID(params *GroupPatchNodesByIDParams, opts ...ClientOption) (*GroupPatchNodesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPatchNodesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.patchNodesById",
		Method:             "PATCH",
		PathPattern:        "/Groups/nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPatchNodesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPatchNodesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPatchNodesByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupPrototypeGetCustomers queries customers of group
*/
func (a *Client) GroupPrototypeGetCustomers(params *GroupPrototypeGetCustomersParams, opts ...ClientOption) (*GroupPrototypeGetCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypeGetCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.__get__customers",
		Method:             "GET",
		PathPattern:        "/Groups/{id}/customers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypeGetCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypeGetCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypeGetCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupPrototypeLinkCustomers adds a related item by id for customers
*/
func (a *Client) GroupPrototypeLinkCustomers(params *GroupPrototypeLinkCustomersParams, opts ...ClientOption) (*GroupPrototypeLinkCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypeLinkCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.__link__customers",
		Method:             "PUT",
		PathPattern:        "/Groups/{id}/customers/rel/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypeLinkCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypeLinkCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypeLinkCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupPrototypeUnlinkCustomers removes the customers relation to an item by id
*/
func (a *Client) GroupPrototypeUnlinkCustomers(params *GroupPrototypeUnlinkCustomersParams, opts ...ClientOption) (*GroupPrototypeUnlinkCustomersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypeUnlinkCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.__unlink__customers",
		Method:             "DELETE",
		PathPattern:        "/Groups/{id}/customers/rel/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypeUnlinkCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypeUnlinkCustomersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypeUnlinkCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GroupPrototypeDelete deletes a group

	<div><strong>200</strong>: Returns count of deleted groups, if any were deleted

<div><strong>423</strong>: Locked, group cannot be deleted because it is used as a partnerId in Inventory
*/
func (a *Client) GroupPrototypeDelete(params *GroupPrototypeDeleteParams, opts ...ClientOption) (*GroupPrototypeDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.delete",
		Method:             "DELETE",
		PathPattern:        "/Groups/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypeDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypeDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypeDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupPrototypePatchAttributesPatchGroupsID patches attributes for a model instance and persist it into the data source
*/
func (a *Client) GroupPrototypePatchAttributesPatchGroupsID(params *GroupPrototypePatchAttributesPatchGroupsIDParams, opts ...ClientOption) (*GroupPrototypePatchAttributesPatchGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypePatchAttributesPatchGroupsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.patchAttributes__patch_Groups_{id}",
		Method:             "PATCH",
		PathPattern:        "/Groups/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypePatchAttributesPatchGroupsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypePatchAttributesPatchGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypePatchAttributesPatchGroupsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GroupPrototypePatchAttributesPutGroupsID patches attributes for a model instance and persist it into the data source
*/
func (a *Client) GroupPrototypePatchAttributesPutGroupsID(params *GroupPrototypePatchAttributesPutGroupsIDParams, opts ...ClientOption) (*GroupPrototypePatchAttributesPutGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupPrototypePatchAttributesPutGroupsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Group.prototype.patchAttributes__put_Groups_{id}",
		Method:             "PUT",
		PathPattern:        "/Groups/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GroupPrototypePatchAttributesPutGroupsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupPrototypePatchAttributesPutGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GroupPrototypePatchAttributesPutGroupsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
