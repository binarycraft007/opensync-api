// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGroupFindCustomersParams creates a new GroupFindCustomersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGroupFindCustomersParams() *GroupFindCustomersParams {
	return &GroupFindCustomersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGroupFindCustomersParamsWithTimeout creates a new GroupFindCustomersParams object
// with the ability to set a timeout on a request.
func NewGroupFindCustomersParamsWithTimeout(timeout time.Duration) *GroupFindCustomersParams {
	return &GroupFindCustomersParams{
		timeout: timeout,
	}
}

// NewGroupFindCustomersParamsWithContext creates a new GroupFindCustomersParams object
// with the ability to set a context for a request.
func NewGroupFindCustomersParamsWithContext(ctx context.Context) *GroupFindCustomersParams {
	return &GroupFindCustomersParams{
		Context: ctx,
	}
}

// NewGroupFindCustomersParamsWithHTTPClient creates a new GroupFindCustomersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGroupFindCustomersParamsWithHTTPClient(client *http.Client) *GroupFindCustomersParams {
	return &GroupFindCustomersParams{
		HTTPClient: client,
	}
}

/*
GroupFindCustomersParams contains all the parameters to send to the API endpoint

	for the group find customers operation.

	Typically these are written to a http.Request.
*/
type GroupFindCustomersParams struct {

	// ExactMatch.
	ExactMatch *bool

	// Field.
	Field string

	// Keyword.
	Keyword string

	// StartsWith.
	StartsWith *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the group find customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupFindCustomersParams) WithDefaults() *GroupFindCustomersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the group find customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GroupFindCustomersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the group find customers params
func (o *GroupFindCustomersParams) WithTimeout(timeout time.Duration) *GroupFindCustomersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the group find customers params
func (o *GroupFindCustomersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the group find customers params
func (o *GroupFindCustomersParams) WithContext(ctx context.Context) *GroupFindCustomersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the group find customers params
func (o *GroupFindCustomersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the group find customers params
func (o *GroupFindCustomersParams) WithHTTPClient(client *http.Client) *GroupFindCustomersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the group find customers params
func (o *GroupFindCustomersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExactMatch adds the exactMatch to the group find customers params
func (o *GroupFindCustomersParams) WithExactMatch(exactMatch *bool) *GroupFindCustomersParams {
	o.SetExactMatch(exactMatch)
	return o
}

// SetExactMatch adds the exactMatch to the group find customers params
func (o *GroupFindCustomersParams) SetExactMatch(exactMatch *bool) {
	o.ExactMatch = exactMatch
}

// WithField adds the field to the group find customers params
func (o *GroupFindCustomersParams) WithField(field string) *GroupFindCustomersParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the group find customers params
func (o *GroupFindCustomersParams) SetField(field string) {
	o.Field = field
}

// WithKeyword adds the keyword to the group find customers params
func (o *GroupFindCustomersParams) WithKeyword(keyword string) *GroupFindCustomersParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the group find customers params
func (o *GroupFindCustomersParams) SetKeyword(keyword string) {
	o.Keyword = keyword
}

// WithStartsWith adds the startsWith to the group find customers params
func (o *GroupFindCustomersParams) WithStartsWith(startsWith *bool) *GroupFindCustomersParams {
	o.SetStartsWith(startsWith)
	return o
}

// SetStartsWith adds the startsWith to the group find customers params
func (o *GroupFindCustomersParams) SetStartsWith(startsWith *bool) {
	o.StartsWith = startsWith
}

// WriteToRequest writes these params to a swagger request
func (o *GroupFindCustomersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExactMatch != nil {

		// query param exactMatch
		var qrExactMatch bool

		if o.ExactMatch != nil {
			qrExactMatch = *o.ExactMatch
		}
		qExactMatch := swag.FormatBool(qrExactMatch)
		if qExactMatch != "" {

			if err := r.SetQueryParam("exactMatch", qExactMatch); err != nil {
				return err
			}
		}
	}

	// query param field
	qrField := o.Field
	qField := qrField
	if qField != "" {

		if err := r.SetQueryParam("field", qField); err != nil {
			return err
		}
	}

	// path param keyword
	if err := r.SetPathParam("keyword", o.Keyword); err != nil {
		return err
	}

	if o.StartsWith != nil {

		// query param startsWith
		var qrStartsWith bool

		if o.StartsWith != nil {
			qrStartsWith = *o.StartsWith
		}
		qStartsWith := swag.FormatBool(qrStartsWith)
		if qStartsWith != "" {

			if err := r.SetQueryParam("startsWith", qStartsWith); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
