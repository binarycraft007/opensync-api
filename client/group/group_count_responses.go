// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/binarycraft007/opensync-api/models"
)

// GroupCountReader is a Reader for the GroupCount structure.
type GroupCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GroupCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGroupCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGroupCountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGroupCountOK creates a GroupCountOK with default headers values
func NewGroupCountOK() *GroupCountOK {
	return &GroupCountOK{}
}

/*
GroupCountOK describes a response with status code 200, with default header values.

Request was successful
*/
type GroupCountOK struct {
	Payload *GroupCountOKBody
}

// IsSuccess returns true when this group count o k response has a 2xx status code
func (o *GroupCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this group count o k response has a 3xx status code
func (o *GroupCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this group count o k response has a 4xx status code
func (o *GroupCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this group count o k response has a 5xx status code
func (o *GroupCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this group count o k response a status code equal to that given
func (o *GroupCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the group count o k response
func (o *GroupCountOK) Code() int {
	return 200
}

func (o *GroupCountOK) Error() string {
	return fmt.Sprintf("[GET /Groups/count][%d] groupCountOK  %+v", 200, o.Payload)
}

func (o *GroupCountOK) String() string {
	return fmt.Sprintf("[GET /Groups/count][%d] groupCountOK  %+v", 200, o.Payload)
}

func (o *GroupCountOK) GetPayload() *GroupCountOKBody {
	return o.Payload
}

func (o *GroupCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GroupCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGroupCountDefault creates a GroupCountDefault with default headers values
func NewGroupCountDefault(code int) *GroupCountDefault {
	return &GroupCountDefault{
		_statusCode: code,
	}
}

/*
GroupCountDefault describes a response with status code -1, with default header values.

unexpected error
*/
type GroupCountDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this group count default response has a 2xx status code
func (o *GroupCountDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this group count default response has a 3xx status code
func (o *GroupCountDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this group count default response has a 4xx status code
func (o *GroupCountDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this group count default response has a 5xx status code
func (o *GroupCountDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this group count default response a status code equal to that given
func (o *GroupCountDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the group count default response
func (o *GroupCountDefault) Code() int {
	return o._statusCode
}

func (o *GroupCountDefault) Error() string {
	return fmt.Sprintf("[GET /Groups/count][%d] Group.count default  %+v", o._statusCode, o.Payload)
}

func (o *GroupCountDefault) String() string {
	return fmt.Sprintf("[GET /Groups/count][%d] Group.count default  %+v", o._statusCode, o.Payload)
}

func (o *GroupCountDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *GroupCountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GroupCountOKBody group count o k body
swagger:model GroupCountOKBody
*/
type GroupCountOKBody struct {

	// count
	Count float64 `json:"count,omitempty"`
}

// Validate validates this group count o k body
func (o *GroupCountOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this group count o k body based on context it is used
func (o *GroupCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GroupCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GroupCountOKBody) UnmarshalBinary(b []byte) error {
	var res GroupCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
