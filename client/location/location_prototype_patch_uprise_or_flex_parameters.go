// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLocationPrototypePatchUpriseOrFlexParams creates a new LocationPrototypePatchUpriseOrFlexParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLocationPrototypePatchUpriseOrFlexParams() *LocationPrototypePatchUpriseOrFlexParams {
	return &LocationPrototypePatchUpriseOrFlexParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLocationPrototypePatchUpriseOrFlexParamsWithTimeout creates a new LocationPrototypePatchUpriseOrFlexParams object
// with the ability to set a timeout on a request.
func NewLocationPrototypePatchUpriseOrFlexParamsWithTimeout(timeout time.Duration) *LocationPrototypePatchUpriseOrFlexParams {
	return &LocationPrototypePatchUpriseOrFlexParams{
		timeout: timeout,
	}
}

// NewLocationPrototypePatchUpriseOrFlexParamsWithContext creates a new LocationPrototypePatchUpriseOrFlexParams object
// with the ability to set a context for a request.
func NewLocationPrototypePatchUpriseOrFlexParamsWithContext(ctx context.Context) *LocationPrototypePatchUpriseOrFlexParams {
	return &LocationPrototypePatchUpriseOrFlexParams{
		Context: ctx,
	}
}

// NewLocationPrototypePatchUpriseOrFlexParamsWithHTTPClient creates a new LocationPrototypePatchUpriseOrFlexParams object
// with the ability to set a custom HTTPClient for a request.
func NewLocationPrototypePatchUpriseOrFlexParamsWithHTTPClient(client *http.Client) *LocationPrototypePatchUpriseOrFlexParams {
	return &LocationPrototypePatchUpriseOrFlexParams{
		HTTPClient: client,
	}
}

/*
LocationPrototypePatchUpriseOrFlexParams contains all the parameters to send to the API endpoint

	for the location prototype patch uprise or flex operation.

	Typically these are written to a http.Request.
*/
type LocationPrototypePatchUpriseOrFlexParams struct {

	// Flex.
	Flex *bool

	/* ID.

	   Location id

	   Format: JSON
	*/
	ID string

	// Uprise.
	Uprise *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the location prototype patch uprise or flex params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypePatchUpriseOrFlexParams) WithDefaults() *LocationPrototypePatchUpriseOrFlexParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the location prototype patch uprise or flex params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypePatchUpriseOrFlexParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithTimeout(timeout time.Duration) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithContext(ctx context.Context) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithHTTPClient(client *http.Client) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlex adds the flex to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithFlex(flex *bool) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetFlex(flex)
	return o
}

// SetFlex adds the flex to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetFlex(flex *bool) {
	o.Flex = flex
}

// WithID adds the id to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithID(id string) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetID(id string) {
	o.ID = id
}

// WithUprise adds the uprise to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) WithUprise(uprise *bool) *LocationPrototypePatchUpriseOrFlexParams {
	o.SetUprise(uprise)
	return o
}

// SetUprise adds the uprise to the location prototype patch uprise or flex params
func (o *LocationPrototypePatchUpriseOrFlexParams) SetUprise(uprise *bool) {
	o.Uprise = uprise
}

// WriteToRequest writes these params to a swagger request
func (o *LocationPrototypePatchUpriseOrFlexParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Flex != nil {

		// form param flex
		var frFlex bool
		if o.Flex != nil {
			frFlex = *o.Flex
		}
		fFlex := swag.FormatBool(frFlex)
		if fFlex != "" {
			if err := r.SetFormParam("flex", fFlex); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Uprise != nil {

		// form param uprise
		var frUprise bool
		if o.Uprise != nil {
			frUprise = *o.Uprise
		}
		fUprise := swag.FormatBool(frUprise)
		if fUprise != "" {
			if err := r.SetFormParam("uprise", fUprise); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
