// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLocationPrototypeDeviceDetailsWithSsidParams creates a new LocationPrototypeDeviceDetailsWithSsidParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLocationPrototypeDeviceDetailsWithSsidParams() *LocationPrototypeDeviceDetailsWithSsidParams {
	return &LocationPrototypeDeviceDetailsWithSsidParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLocationPrototypeDeviceDetailsWithSsidParamsWithTimeout creates a new LocationPrototypeDeviceDetailsWithSsidParams object
// with the ability to set a timeout on a request.
func NewLocationPrototypeDeviceDetailsWithSsidParamsWithTimeout(timeout time.Duration) *LocationPrototypeDeviceDetailsWithSsidParams {
	return &LocationPrototypeDeviceDetailsWithSsidParams{
		timeout: timeout,
	}
}

// NewLocationPrototypeDeviceDetailsWithSsidParamsWithContext creates a new LocationPrototypeDeviceDetailsWithSsidParams object
// with the ability to set a context for a request.
func NewLocationPrototypeDeviceDetailsWithSsidParamsWithContext(ctx context.Context) *LocationPrototypeDeviceDetailsWithSsidParams {
	return &LocationPrototypeDeviceDetailsWithSsidParams{
		Context: ctx,
	}
}

// NewLocationPrototypeDeviceDetailsWithSsidParamsWithHTTPClient creates a new LocationPrototypeDeviceDetailsWithSsidParams object
// with the ability to set a custom HTTPClient for a request.
func NewLocationPrototypeDeviceDetailsWithSsidParamsWithHTTPClient(client *http.Client) *LocationPrototypeDeviceDetailsWithSsidParams {
	return &LocationPrototypeDeviceDetailsWithSsidParams{
		HTTPClient: client,
	}
}

/*
LocationPrototypeDeviceDetailsWithSsidParams contains all the parameters to send to the API endpoint

	for the location prototype device details with ssid operation.

	Typically these are written to a http.Request.
*/
type LocationPrototypeDeviceDetailsWithSsidParams struct {

	/* ID.

	   Location id

	   Format: JSON
	*/
	ID string

	/* Mac.

	   mac of device
	*/
	Mac string

	// NetworkID.
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the location prototype device details with ssid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithDefaults() *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the location prototype device details with ssid params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithTimeout(timeout time.Duration) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithContext(ctx context.Context) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithHTTPClient(client *http.Client) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithID(id string) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetID(id string) {
	o.ID = id
}

// WithMac adds the mac to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithMac(mac string) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetMac(mac string) {
	o.Mac = mac
}

// WithNetworkID adds the networkID to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WithNetworkID(networkID string) *LocationPrototypeDeviceDetailsWithSsidParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the location prototype device details with ssid params
func (o *LocationPrototypeDeviceDetailsWithSsidParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *LocationPrototypeDeviceDetailsWithSsidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param mac
	if err := r.SetPathParam("mac", o.Mac); err != nil {
		return err
	}

	// query param networkId
	qrNetworkID := o.NetworkID
	qNetworkID := qrNetworkID
	if qNetworkID != "" {

		if err := r.SetQueryParam("networkId", qNetworkID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
