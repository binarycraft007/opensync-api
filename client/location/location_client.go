// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new location API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for location API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfig(params *LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigParams, opts ...ClientOption) (*LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigOK, error)

	LocationCount(params *LocationCountParams, opts ...ClientOption) (*LocationCountOK, error)

	LocationFind(params *LocationFindParams, opts ...ClientOption) (*LocationFindOK, error)

	LocationFindByID(params *LocationFindByIDParams, opts ...ClientOption) (*LocationFindByIDOK, error)

	LocationPrototypeCountPendingWhitelistRequests(params *LocationPrototypeCountPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeCountPendingWhitelistRequestsOK, error)

	LocationPrototypeCountInvitations(params *LocationPrototypeCountInvitationsParams, opts ...ClientOption) (*LocationPrototypeCountInvitationsOK, error)

	LocationPrototypeCreatePendingWhitelistRequests(params *LocationPrototypeCreatePendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeCreatePendingWhitelistRequestsOK, error)

	LocationPrototypeCreateInvitations(params *LocationPrototypeCreateInvitationsParams, opts ...ClientOption) (*LocationPrototypeCreateInvitationsOK, error)

	LocationPrototypeDeletePendingWhitelistRequests(params *LocationPrototypeDeletePendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeDeletePendingWhitelistRequestsNoContent, error)

	LocationPrototypeDeleteInvitations(params *LocationPrototypeDeleteInvitationsParams, opts ...ClientOption) (*LocationPrototypeDeleteInvitationsNoContent, error)

	LocationPrototypeDestroyByIDPendingWhitelistRequests(params *LocationPrototypeDestroyByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeDestroyByIDPendingWhitelistRequestsNoContent, error)

	LocationPrototypeDestroyByIDInvitations(params *LocationPrototypeDestroyByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeDestroyByIDInvitationsNoContent, error)

	LocationPrototypeFindByIDPendingWhitelistRequests(params *LocationPrototypeFindByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeFindByIDPendingWhitelistRequestsOK, error)

	LocationPrototypeFindByIDInvitations(params *LocationPrototypeFindByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeFindByIDInvitationsOK, error)

	LocationPrototypeGetPendingWhitelistRequests(params *LocationPrototypeGetPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeGetPendingWhitelistRequestsOK, error)

	LocationPrototypeGetInvitations(params *LocationPrototypeGetInvitationsParams, opts ...ClientOption) (*LocationPrototypeGetInvitationsOK, error)

	LocationPrototypeGetNodes(params *LocationPrototypeGetNodesParams, opts ...ClientOption) (*LocationPrototypeGetNodesOK, error)

	LocationPrototypeUpdateByIDPendingWhitelistRequests(params *LocationPrototypeUpdateByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeUpdateByIDPendingWhitelistRequestsOK, error)

	LocationPrototypeUpdateByIDInvitations(params *LocationPrototypeUpdateByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeUpdateByIDInvitationsOK, error)

	LocationPrototypeCheckCustomerLoginToTurnOffWifi(params *LocationPrototypeCheckCustomerLoginToTurnOffWifiParams, opts ...ClientOption) (*LocationPrototypeCheckCustomerLoginToTurnOffWifiOK, error)

	LocationPrototypeClaimMultipleNodes(params *LocationPrototypeClaimMultipleNodesParams, opts ...ClientOption) (*LocationPrototypeClaimMultipleNodesOK, error)

	LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklist(params *LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistParams, opts ...ClientOption) (*LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistNoContent, error)

	LocationPrototypeDeviceDetailsWithSsid(params *LocationPrototypeDeviceDetailsWithSsidParams, opts ...ClientOption) (*LocationPrototypeDeviceDetailsWithSsidOK, error)

	LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMac(params *LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacParams, opts ...ClientOption) (*LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacOK, error)

	LocationPrototypeGetAppTime(params *LocationPrototypeGetAppTimeParams, opts ...ClientOption) (*LocationPrototypeGetAppTimeOK, error)

	LocationPrototypeGetBackhaul(params *LocationPrototypeGetBackhaulParams, opts ...ClientOption) (*LocationPrototypeGetBackhaulOK, error)

	LocationPrototypeGetCommandState(params *LocationPrototypeGetCommandStateParams, opts ...ClientOption) (*LocationPrototypeGetCommandStateOK, error)

	LocationPrototypeGetDeviceSoundingState(params *LocationPrototypeGetDeviceSoundingStateParams, opts ...ClientOption) (*LocationPrototypeGetDeviceSoundingStateOK, error)

	LocationPrototypeGetDevicesByMacName(params *LocationPrototypeGetDevicesByMacNameParams, opts ...ClientOption) (*LocationPrototypeGetDevicesByMacNameOK, error)

	LocationPrototypeGetEventHistory(params *LocationPrototypeGetEventHistoryParams, opts ...ClientOption) (*LocationPrototypeGetEventHistoryOK, error)

	LocationPrototypeGetForceGraph(params *LocationPrototypeGetForceGraphParams, opts ...ClientOption) (*LocationPrototypeGetForceGraphOK, error)

	LocationPrototypeGetGatewayAccount(params *LocationPrototypeGetGatewayAccountParams, opts ...ClientOption) (*LocationPrototypeGetGatewayAccountOK, error)

	LocationPrototypeGetHomeAwayConfig(params *LocationPrototypeGetHomeAwayConfigParams, opts ...ClientOption) (*LocationPrototypeGetHomeAwayConfigOK, error)

	LocationPrototypeGetHomeSecurity(params *LocationPrototypeGetHomeSecurityParams, opts ...ClientOption) (*LocationPrototypeGetHomeSecurityOK, error)

	LocationPrototypeGetLocationPartnerIDProfileInfo(params *LocationPrototypeGetLocationPartnerIDProfileInfoParams, opts ...ClientOption) (*LocationPrototypeGetLocationPartnerIDProfileInfoOK, error)

	LocationPrototypeGetLocationSummary(params *LocationPrototypeGetLocationSummaryParams, opts ...ClientOption) (*LocationPrototypeGetLocationSummaryOK, error)

	LocationPrototypeGetMotionHistory(params *LocationPrototypeGetMotionHistoryParams, opts ...ClientOption) (*LocationPrototypeGetMotionHistoryOK, error)

	LocationPrototypeGetMotionStateHistory(params *LocationPrototypeGetMotionStateHistoryParams, opts ...ClientOption) (*LocationPrototypeGetMotionStateHistoryOK, error)

	LocationPrototypeGetWifiMotion(params *LocationPrototypeGetWifiMotionParams, opts ...ClientOption) (*LocationPrototypeGetWifiMotionOK, error)

	LocationPrototypeGroupProvisioning(params *LocationPrototypeGroupProvisioningParams, opts ...ClientOption) (*LocationPrototypeGroupProvisioningOK, error)

	LocationPrototypeMarketingExport(params *LocationPrototypeMarketingExportParams, opts ...ClientOption) (*LocationPrototypeMarketingExportOK, error)

	LocationPrototypeNasRedirect(params *LocationPrototypeNasRedirectParams, opts ...ClientOption) (*LocationPrototypeNasRedirectOK, error)

	LocationPrototypePatchDeviceSoundingState(params *LocationPrototypePatchDeviceSoundingStateParams, opts ...ClientOption) (*LocationPrototypePatchDeviceSoundingStateOK, error)

	LocationPrototypePatchHomeSecurity(params *LocationPrototypePatchHomeSecurityParams, opts ...ClientOption) (*LocationPrototypePatchHomeSecurityOK, error)

	LocationPrototypePatchHomeSecuritySensitivity(params *LocationPrototypePatchHomeSecuritySensitivityParams, opts ...ClientOption) (*LocationPrototypePatchHomeSecuritySensitivityOK, error)

	LocationPrototypePatchMobileAppSignInRequired(params *LocationPrototypePatchMobileAppSignInRequiredParams, opts ...ClientOption) (*LocationPrototypePatchMobileAppSignInRequiredOK, error)

	LocationPrototypePatchUpriseOrFlex(params *LocationPrototypePatchUpriseOrFlexParams, opts ...ClientOption) (*LocationPrototypePatchUpriseOrFlexOK, error)

	LocationPrototypePatchWifiMotion(params *LocationPrototypePatchWifiMotionParams, opts ...ClientOption) (*LocationPrototypePatchWifiMotionOK, error)

	LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklist(params *LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistParams, opts ...ClientOption) (*LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistOK, error)

	LocationPrototypePutGeoIP(params *LocationPrototypePutGeoIPParams, opts ...ClientOption) (*LocationPrototypePutGeoIPOK, error)

	LocationPrototypePutResyncLocation(params *LocationPrototypePutResyncLocationParams, opts ...ClientOption) (*LocationPrototypePutResyncLocationOK, error)

	LocationPrototypeUnclaimNode(params *LocationPrototypeUnclaimNodeParams, opts ...ClientOption) (*LocationPrototypeUnclaimNodeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfig syncs s s ID data from location to all its claimed nodes

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Wifi network does not exist.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>422</strong>: Endpoint is not allowed in current deployment.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfig(params *LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigParams, opts ...ClientOption) (*LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "LLocation.prototype.putResyncLocationocation.prototype.resyncWebconfig",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/resyncWebconfig",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LLocationPrototypePutResyncLocationocationPrototypeResyncWebconfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationCount counts instances of the model matched by where from the data source
*/
func (a *Client) LocationCount(params *LocationCountParams, opts ...ClientOption) (*LocationCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.count",
		Method:             "GET",
		PathPattern:        "/Locations/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationFind finds all instances of the model matched by filter from the data source
*/
func (a *Client) LocationFind(params *LocationFindParams, opts ...ClientOption) (*LocationFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.find",
		Method:             "GET",
		PathPattern:        "/Locations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationFindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationFindDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationFindByID finds a model instance by id from the data source
*/
func (a *Client) LocationFindByID(params *LocationFindByIDParams, opts ...ClientOption) (*LocationFindByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationFindByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.findById",
		Method:             "GET",
		PathPattern:        "/Locations/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationFindByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationFindByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationFindByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeCountPendingWhitelistRequests counts pending whitelist requests of location
*/
func (a *Client) LocationPrototypeCountPendingWhitelistRequests(params *LocationPrototypeCountPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeCountPendingWhitelistRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeCountPendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__count___pendingWhitelistRequests",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeCountPendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeCountPendingWhitelistRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeCountPendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeCountInvitations counts invitations of location
*/
func (a *Client) LocationPrototypeCountInvitations(params *LocationPrototypeCountInvitationsParams, opts ...ClientOption) (*LocationPrototypeCountInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeCountInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__count__invitations",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/invitations/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeCountInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeCountInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeCountInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeCreatePendingWhitelistRequests creates a new instance in pending whitelist requests of this model
*/
func (a *Client) LocationPrototypeCreatePendingWhitelistRequests(params *LocationPrototypeCreatePendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeCreatePendingWhitelistRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeCreatePendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__create___pendingWhitelistRequests",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeCreatePendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeCreatePendingWhitelistRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeCreatePendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeCreateInvitations creates a new instance in invitations of this model
*/
func (a *Client) LocationPrototypeCreateInvitations(params *LocationPrototypeCreateInvitationsParams, opts ...ClientOption) (*LocationPrototypeCreateInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeCreateInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__create__invitations",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/invitations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeCreateInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeCreateInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeCreateInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeDeletePendingWhitelistRequests deletes all pending whitelist requests of this model
*/
func (a *Client) LocationPrototypeDeletePendingWhitelistRequests(params *LocationPrototypeDeletePendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeDeletePendingWhitelistRequestsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDeletePendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__delete___pendingWhitelistRequests",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDeletePendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDeletePendingWhitelistRequestsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDeletePendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeDeleteInvitations deletes all invitations of this model
*/
func (a *Client) LocationPrototypeDeleteInvitations(params *LocationPrototypeDeleteInvitationsParams, opts ...ClientOption) (*LocationPrototypeDeleteInvitationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDeleteInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__delete__invitations",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/invitations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDeleteInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDeleteInvitationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDeleteInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeDestroyByIDPendingWhitelistRequests deletes a related item by id for pending whitelist requests
*/
func (a *Client) LocationPrototypeDestroyByIDPendingWhitelistRequests(params *LocationPrototypeDestroyByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeDestroyByIDPendingWhitelistRequestsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDestroyByIDPendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__destroyById___pendingWhitelistRequests",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDestroyByIDPendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDestroyByIDPendingWhitelistRequestsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDestroyByIDPendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeDestroyByIDInvitations deletes a related item by id for invitations
*/
func (a *Client) LocationPrototypeDestroyByIDInvitations(params *LocationPrototypeDestroyByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeDestroyByIDInvitationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDestroyByIDInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__destroyById__invitations",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/invitations/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDestroyByIDInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDestroyByIDInvitationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDestroyByIDInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeFindByIDPendingWhitelistRequests finds a related item by id for pending whitelist requests
*/
func (a *Client) LocationPrototypeFindByIDPendingWhitelistRequests(params *LocationPrototypeFindByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeFindByIDPendingWhitelistRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeFindByIDPendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__findById___pendingWhitelistRequests",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeFindByIDPendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeFindByIDPendingWhitelistRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeFindByIDPendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeFindByIDInvitations finds a related item by id for invitations
*/
func (a *Client) LocationPrototypeFindByIDInvitations(params *LocationPrototypeFindByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeFindByIDInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeFindByIDInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__findById__invitations",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/invitations/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeFindByIDInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeFindByIDInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeFindByIDInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeGetPendingWhitelistRequests queries pending whitelist requests of location
*/
func (a *Client) LocationPrototypeGetPendingWhitelistRequests(params *LocationPrototypeGetPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeGetPendingWhitelistRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetPendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__get___pendingWhitelistRequests",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetPendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetPendingWhitelistRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetPendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeGetInvitations queries invitations of location
*/
func (a *Client) LocationPrototypeGetInvitations(params *LocationPrototypeGetInvitationsParams, opts ...ClientOption) (*LocationPrototypeGetInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__get__invitations",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/invitations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeGetNodes queries nodes of location
*/
func (a *Client) LocationPrototypeGetNodes(params *LocationPrototypeGetNodesParams, opts ...ClientOption) (*LocationPrototypeGetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__get__nodes",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeUpdateByIDPendingWhitelistRequests updates a related item by id for pending whitelist requests
*/
func (a *Client) LocationPrototypeUpdateByIDPendingWhitelistRequests(params *LocationPrototypeUpdateByIDPendingWhitelistRequestsParams, opts ...ClientOption) (*LocationPrototypeUpdateByIDPendingWhitelistRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeUpdateByIDPendingWhitelistRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__updateById___pendingWhitelistRequests",
		Method:             "PUT",
		PathPattern:        "/Locations/{id}/_pendingWhitelistRequests/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeUpdateByIDPendingWhitelistRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeUpdateByIDPendingWhitelistRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeUpdateByIDPendingWhitelistRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeUpdateByIDInvitations updates a related item by id for invitations
*/
func (a *Client) LocationPrototypeUpdateByIDInvitations(params *LocationPrototypeUpdateByIDInvitationsParams, opts ...ClientOption) (*LocationPrototypeUpdateByIDInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeUpdateByIDInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.__updateById__invitations",
		Method:             "PUT",
		PathPattern:        "/Locations/{id}/invitations/{fk}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeUpdateByIDInvitationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeUpdateByIDInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeUpdateByIDInvitationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeCheckCustomerLoginToTurnOffWifi turns off w ifi radio if no app login found for a customer

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeCheckCustomerLoginToTurnOffWifi(params *LocationPrototypeCheckCustomerLoginToTurnOffWifiParams, opts ...ClientOption) (*LocationPrototypeCheckCustomerLoginToTurnOffWifiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeCheckCustomerLoginToTurnOffWifiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.checkCustomerLoginToTurnOffWifi",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/checkCustomerLoginToTurnOffWifi",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeCheckCustomerLoginToTurnOffWifiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeCheckCustomerLoginToTurnOffWifiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeCheckCustomerLoginToTurnOffWifiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeClaimMultipleNodes claims all nodes for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required nodes field is missing.</div>
<div><strong>422</strong>: Request contain wrong value or exceded the max number of 32 pods to claim.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeClaimMultipleNodes(params *LocationPrototypeClaimMultipleNodesParams, opts ...ClientOption) (*LocationPrototypeClaimMultipleNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeClaimMultipleNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.claimMultipleNodes",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeClaimMultipleNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeClaimMultipleNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeClaimMultipleNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklist updates a location s anomaly security policy for a location ID to remove a blacklisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklist(params *LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistParams, opts ...ClientOption) (*LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.deleteDeviceSecurityPolicyAnomalyBlacklist",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist/{fqdn}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDeleteDeviceSecurityPolicyAnomalyBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeDeviceDetailsWithSsid gets device parameters by mac id and the ssid by network Id

	<div>To be used by notification for fetching device name and icon.</div>

<div><strong>200</strong>: Success, device details returned.</div>
<div><strong>404</strong>: Location ID, Device mac or Network id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeDeviceDetailsWithSsid(params *LocationPrototypeDeviceDetailsWithSsidParams, opts ...ClientOption) (*LocationPrototypeDeviceDetailsWithSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeDeviceDetailsWithSsidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.deviceDetailsWithSsid",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/devices/{mac}/detailsWithSsid",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeDeviceDetailsWithSsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeDeviceDetailsWithSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeDeviceDetailsWithSsidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMac internals integration use only search to identify if the node or device is assigned to a room

	<div>To be used by Notification API for fetching Room info.</div>

<div><strong>200</strong>: Success, room details returned.</div>
<div><strong>404</strong>: Location, device or node not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMac(params *LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacParams, opts ...ClientOption) (*LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.findRoomByNodeIdNodeMacAndDeviceMac",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/rooms/search/{search}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeFindRoomByNodeIDNodeMacAndDeviceMacDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetAppTime gets the app time configs to use for a location

	<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>

<div><strong>404</strong>: Location does not exist</div>
<div><strong>500</strong>: Internal Server error</div>
*/
func (a *Client) LocationPrototypeGetAppTime(params *LocationPrototypeGetAppTimeParams, opts ...ClientOption) (*LocationPrototypeGetAppTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetAppTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getAppTime",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/appTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetAppTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetAppTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetAppTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LocationPrototypeGetBackhaul location prototype get backhaul API
*/
func (a *Client) LocationPrototypeGetBackhaul(params *LocationPrototypeGetBackhaulParams, opts ...ClientOption) (*LocationPrototypeGetBackhaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetBackhaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getBackhaul",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/backhaul",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetBackhaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetBackhaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetBackhaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetCommandState gets speed test result report state

	<div><strong>200</strong>: Success, return report state.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) LocationPrototypeGetCommandState(params *LocationPrototypeGetCommandStateParams, opts ...ClientOption) (*LocationPrototypeGetCommandStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetCommandStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getCommandState",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/command/state",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetCommandStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetCommandStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetCommandStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetDeviceSoundingState fetches the sounding states for eligible devices in this location

	<div><strong>200</strong>: Success, device sounding states returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetDeviceSoundingState(params *LocationPrototypeGetDeviceSoundingStateParams, opts ...ClientOption) (*LocationPrototypeGetDeviceSoundingStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetDeviceSoundingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getDeviceSoundingState",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeSecurity/devices/sounding",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetDeviceSoundingStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetDeviceSoundingStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetDeviceSoundingStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetDevicesByMacName gets the name and icon of device by mac lookup

	<div>To be used by notification for fetching device name and icon.</div>

<div><strong>200</strong>: Success, device details returned.</div>
<div><strong>404</strong>: Location ID or Device mac not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetDevicesByMacName(params *LocationPrototypeGetDevicesByMacNameParams, opts ...ClientOption) (*LocationPrototypeGetDevicesByMacNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetDevicesByMacNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getDevicesByMacName",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetDevicesByMacNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetDevicesByMacNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetDevicesByMacNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetEventHistory fetches the event history for this location

	<div><strong>200</strong>: Success, event array returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetEventHistory(params *LocationPrototypeGetEventHistoryParams, opts ...ClientOption) (*LocationPrototypeGetEventHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetEventHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getEventHistory",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeSecurity/events/history",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetEventHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetEventHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetEventHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetForceGraph vertices and edges used to display a network topology

	<div>The data used to initialize and dynamically display and update a Topology.</div>

<div>Can also be used to get a network's list of nodes + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>
<div><strong>200</strong>: Success, graph structure returned.</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetForceGraph(params *LocationPrototypeGetForceGraphParams, opts ...ClientOption) (*LocationPrototypeGetForceGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetForceGraphParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getForceGraph",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/forceGraph",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetForceGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetForceGraphOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetForceGraphDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetGatewayAccount gets account ID and gatweway ID of a location

	<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>

<div><strong>404</strong>: Location does not exist</div>
<div><strong>500</strong>: Internal Server error</div>
*/
func (a *Client) LocationPrototypeGetGatewayAccount(params *LocationPrototypeGetGatewayAccountParams, opts ...ClientOption) (*LocationPrototypeGetGatewayAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetGatewayAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getGatewayAccount",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/gatewayAccount",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetGatewayAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetGatewayAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetGatewayAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetHomeAwayConfig gets the home away configs to use for a location

	<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>

<div><strong>404</strong>: Location does not exist</div>
<div><strong>500</strong>: Internal Server error</div>
*/
func (a *Client) LocationPrototypeGetHomeAwayConfig(params *LocationPrototypeGetHomeAwayConfigParams, opts ...ClientOption) (*LocationPrototypeGetHomeAwayConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetHomeAwayConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getHomeAwayConfig",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeAway",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetHomeAwayConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetHomeAwayConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetHomeAwayConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetHomeSecurity fetches the home security configuration for this location

	<div><strong>200</strong>: Success, HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetHomeSecurity(params *LocationPrototypeGetHomeSecurityParams, opts ...ClientOption) (*LocationPrototypeGetHomeSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetHomeSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getHomeSecurity",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeSecurity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetHomeSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetHomeSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetHomeSecurityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetLocationPartnerIDProfileInfo gets the partner id location profile and other info for this location

	<div><strong>200</strong>: Success, wifiMotion object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetLocationPartnerIDProfileInfo(params *LocationPrototypeGetLocationPartnerIDProfileInfoParams, opts ...ClientOption) (*LocationPrototypeGetLocationPartnerIDProfileInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetLocationPartnerIDProfileInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getLocationPartnerIdProfileInfo",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/partnerIdProfileInfo",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetLocationPartnerIDProfileInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetLocationPartnerIDProfileInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetLocationPartnerIDProfileInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetLocationSummary gets the location summary for this location

	<div><strong>200</strong>: Success, wifiMotion object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetLocationSummary(params *LocationPrototypeGetLocationSummaryParams, opts ...ClientOption) (*LocationPrototypeGetLocationSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetLocationSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getLocationSummary",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/summary",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetLocationSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetLocationSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetLocationSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetMotionHistory fetches the motion density history for this location

	<div><strong>200</strong>: Success, motion density array returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetMotionHistory(params *LocationPrototypeGetMotionHistoryParams, opts ...ClientOption) (*LocationPrototypeGetMotionHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetMotionHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getMotionHistory",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeSecurity/motionHistory",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetMotionHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetMotionHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetMotionHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetMotionStateHistory fetches the motion state history for this location

	<div><strong>200</strong>: Success, motion state array returned (Each element of the array is in the form ["val", "unix_ts"], where "val" is one of:

<div>0 - Not armed, not tripped</div>
<div>1 - Not armed, tripped</div>
<div>2 - Armed, not tripped</div>
<div>3 - Armed, tripped</div></div>
<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetMotionStateHistory(params *LocationPrototypeGetMotionStateHistoryParams, opts ...ClientOption) (*LocationPrototypeGetMotionStateHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetMotionStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getMotionStateHistory",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/homeSecurity/motionHistory/state",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetMotionStateHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetMotionStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetMotionStateHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGetWifiMotion gets wifi motion config for this location

	<div><strong>200</strong>: Success, wifiMotion object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeGetWifiMotion(params *LocationPrototypeGetWifiMotionParams, opts ...ClientOption) (*LocationPrototypeGetWifiMotionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGetWifiMotionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.getWifiMotion",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/wifiMotion",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGetWifiMotionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGetWifiMotionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGetWifiMotionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeGroupProvisioning gets group provisioning details

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist</div>
<div><strong>500</strong>: Internal Server error</div>
*/
func (a *Client) LocationPrototypeGroupProvisioning(params *LocationPrototypeGroupProvisioningParams, opts ...ClientOption) (*LocationPrototypeGroupProvisioningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeGroupProvisioningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.groupProvisioning",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/groupProvisioning",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeGroupProvisioningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeGroupProvisioningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeGroupProvisioningDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeMarketingExport gets detailed information of location for updating c r ms

	<div><strong>200</strong>: Success, location data in response.</div>

<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeMarketingExport(params *LocationPrototypeMarketingExportParams, opts ...ClientOption) (*LocationPrototypeMarketingExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeMarketingExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.marketingExport",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/marketingExport",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeMarketingExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeMarketingExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeMarketingExportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeNasRedirect handles proxy redirects from walled garden networks requesting network access

	<div><strong>200</strong>: Success, redirect URL returned.</div>

<div><strong>404</strong>: Location does not exist</div>
<div><strong>500</strong>: Internal Server error</div>
*/
func (a *Client) LocationPrototypeNasRedirect(params *LocationPrototypeNasRedirectParams, opts ...ClientOption) (*LocationPrototypeNasRedirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeNasRedirectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.nasRedirect",
		Method:             "GET",
		PathPattern:        "/Locations/{id}/nasRedirect",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeNasRedirectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeNasRedirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeNasRedirectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchDeviceSoundingState patches the sounding states for the given devices

	<div><strong>200</strong>: Success, device sounding states returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchDeviceSoundingState(params *LocationPrototypePatchDeviceSoundingStateParams, opts ...ClientOption) (*LocationPrototypePatchDeviceSoundingStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchDeviceSoundingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchDeviceSoundingState",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}/homeSecurity/devices/sounding",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchDeviceSoundingStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchDeviceSoundingStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchDeviceSoundingStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchHomeSecurity enables disable live motion streaming and or motion events for this location

	<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchHomeSecurity(params *LocationPrototypePatchHomeSecurityParams, opts ...ClientOption) (*LocationPrototypePatchHomeSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchHomeSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchHomeSecurity",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}/homeSecurity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchHomeSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchHomeSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchHomeSecurityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchHomeSecuritySensitivity configures motion event configuration for this location

	<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchHomeSecuritySensitivity(params *LocationPrototypePatchHomeSecuritySensitivityParams, opts ...ClientOption) (*LocationPrototypePatchHomeSecuritySensitivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchHomeSecuritySensitivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchHomeSecuritySensitivity",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}/homeSecurity/sensitivity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchHomeSecuritySensitivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchHomeSecuritySensitivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchHomeSecuritySensitivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchMobileAppSignInRequired patches mobile app sign in required object handling the wifi disabling timer

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: mobileAppSignInRequired is not configured for this location</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>429</strong>: This location has already cancelled app engagement timer</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchMobileAppSignInRequired(params *LocationPrototypePatchMobileAppSignInRequiredParams, opts ...ClientOption) (*LocationPrototypePatchMobileAppSignInRequiredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchMobileAppSignInRequiredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchMobileAppSignInRequired",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}/mobileAppSignInRequired",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchMobileAppSignInRequiredReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchMobileAppSignInRequiredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchMobileAppSignInRequiredDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchUpriseOrFlex updates uprise value for the location

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchUpriseOrFlex(params *LocationPrototypePatchUpriseOrFlexParams, opts ...ClientOption) (*LocationPrototypePatchUpriseOrFlexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchUpriseOrFlexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchUpriseOrFlex",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchUpriseOrFlexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchUpriseOrFlexOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchUpriseOrFlexDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePatchWifiMotion enables disable wifi motion feature for this location

	<div><strong>200</strong>: Success, updated object returned.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePatchWifiMotion(params *LocationPrototypePatchWifiMotionParams, opts ...ClientOption) (*LocationPrototypePatchWifiMotionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePatchWifiMotionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.patchWifiMotion",
		Method:             "PATCH",
		PathPattern:        "/Locations/{id}/wifiMotion",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePatchWifiMotionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePatchWifiMotionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePatchWifiMotionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklist updates a device s anomaly security policy for a location ID to include a blacklisted website

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklist(params *LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistParams, opts ...ClientOption) (*LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.postDeviceSecurityPolicyAnomalyBlacklist",
		Method:             "POST",
		PathPattern:        "/Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePostDeviceSecurityPolicyAnomalyBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePutGeoIP updates raw geo IP information for the location

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePutGeoIP(params *LocationPrototypePutGeoIPParams, opts ...ClientOption) (*LocationPrototypePutGeoIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePutGeoIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.putGeoIp",
		Method:             "PUT",
		PathPattern:        "/Locations/{id}/geoIp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePutGeoIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePutGeoIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePutGeoIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypePutResyncLocation triggers controller to refresh all customer mongo data for a location ID

	<div><strong>200</strong>: Success, triggered right way.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypePutResyncLocation(params *LocationPrototypePutResyncLocationParams, opts ...ClientOption) (*LocationPrototypePutResyncLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypePutResyncLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.putResyncLocation",
		Method:             "PUT",
		PathPattern:        "/Locations/{id}/resyncLocation",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypePutResyncLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypePutResyncLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypePutResyncLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	LocationPrototypeUnclaimNode unclaims a particular node from a location with the option of preserving the original package ID

	<div><strong>204</strong>: Success, a job well done.</div>

<div><strong>400</strong>: Pod already unclaimed.</div>
<div><strong>401</strong>: Authorization required </div>
<div><strong>403</strong>: the node is online, and can not be unclaimed.<br/>
<div><strong>404</strong>: location id not found, nodeId missing from URL,<br/> or location has zero owned pods.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) LocationPrototypeUnclaimNode(params *LocationPrototypeUnclaimNodeParams, opts ...ClientOption) (*LocationPrototypeUnclaimNodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLocationPrototypeUnclaimNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Location.prototype.unclaimNode",
		Method:             "DELETE",
		PathPattern:        "/Locations/{id}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LocationPrototypeUnclaimNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LocationPrototypeUnclaimNodeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LocationPrototypeUnclaimNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
