// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLocationPrototypeGetDeviceSoundingStateParams creates a new LocationPrototypeGetDeviceSoundingStateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLocationPrototypeGetDeviceSoundingStateParams() *LocationPrototypeGetDeviceSoundingStateParams {
	return &LocationPrototypeGetDeviceSoundingStateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLocationPrototypeGetDeviceSoundingStateParamsWithTimeout creates a new LocationPrototypeGetDeviceSoundingStateParams object
// with the ability to set a timeout on a request.
func NewLocationPrototypeGetDeviceSoundingStateParamsWithTimeout(timeout time.Duration) *LocationPrototypeGetDeviceSoundingStateParams {
	return &LocationPrototypeGetDeviceSoundingStateParams{
		timeout: timeout,
	}
}

// NewLocationPrototypeGetDeviceSoundingStateParamsWithContext creates a new LocationPrototypeGetDeviceSoundingStateParams object
// with the ability to set a context for a request.
func NewLocationPrototypeGetDeviceSoundingStateParamsWithContext(ctx context.Context) *LocationPrototypeGetDeviceSoundingStateParams {
	return &LocationPrototypeGetDeviceSoundingStateParams{
		Context: ctx,
	}
}

// NewLocationPrototypeGetDeviceSoundingStateParamsWithHTTPClient creates a new LocationPrototypeGetDeviceSoundingStateParams object
// with the ability to set a custom HTTPClient for a request.
func NewLocationPrototypeGetDeviceSoundingStateParamsWithHTTPClient(client *http.Client) *LocationPrototypeGetDeviceSoundingStateParams {
	return &LocationPrototypeGetDeviceSoundingStateParams{
		HTTPClient: client,
	}
}

/*
LocationPrototypeGetDeviceSoundingStateParams contains all the parameters to send to the API endpoint

	for the location prototype get device sounding state operation.

	Typically these are written to a http.Request.
*/
type LocationPrototypeGetDeviceSoundingStateParams struct {

	/* ID.

	   Location id

	   Format: JSON
	*/
	ID string

	/* Mac.

	   Optional mac address for single device lookup (fetches all devices by default)
	*/
	Mac *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the location prototype get device sounding state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithDefaults() *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the location prototype get device sounding state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithTimeout(timeout time.Duration) *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithContext(ctx context.Context) *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithHTTPClient(client *http.Client) *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithID(id string) *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetID(id string) {
	o.ID = id
}

// WithMac adds the mac to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) WithMac(mac *string) *LocationPrototypeGetDeviceSoundingStateParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the location prototype get device sounding state params
func (o *LocationPrototypeGetDeviceSoundingStateParams) SetMac(mac *string) {
	o.Mac = mac
}

// WriteToRequest writes these params to a swagger request
func (o *LocationPrototypeGetDeviceSoundingStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Mac != nil {

		// query param mac
		var qrMac string

		if o.Mac != nil {
			qrMac = *o.Mac
		}
		qMac := qrMac
		if qMac != "" {

			if err := r.SetQueryParam("mac", qMac); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
