// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLocationPrototypeGetEventHistoryParams creates a new LocationPrototypeGetEventHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLocationPrototypeGetEventHistoryParams() *LocationPrototypeGetEventHistoryParams {
	return &LocationPrototypeGetEventHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLocationPrototypeGetEventHistoryParamsWithTimeout creates a new LocationPrototypeGetEventHistoryParams object
// with the ability to set a timeout on a request.
func NewLocationPrototypeGetEventHistoryParamsWithTimeout(timeout time.Duration) *LocationPrototypeGetEventHistoryParams {
	return &LocationPrototypeGetEventHistoryParams{
		timeout: timeout,
	}
}

// NewLocationPrototypeGetEventHistoryParamsWithContext creates a new LocationPrototypeGetEventHistoryParams object
// with the ability to set a context for a request.
func NewLocationPrototypeGetEventHistoryParamsWithContext(ctx context.Context) *LocationPrototypeGetEventHistoryParams {
	return &LocationPrototypeGetEventHistoryParams{
		Context: ctx,
	}
}

// NewLocationPrototypeGetEventHistoryParamsWithHTTPClient creates a new LocationPrototypeGetEventHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewLocationPrototypeGetEventHistoryParamsWithHTTPClient(client *http.Client) *LocationPrototypeGetEventHistoryParams {
	return &LocationPrototypeGetEventHistoryParams{
		HTTPClient: client,
	}
}

/*
LocationPrototypeGetEventHistoryParams contains all the parameters to send to the API endpoint

	for the location prototype get event history operation.

	Typically these are written to a http.Request.
*/
type LocationPrototypeGetEventHistoryParams struct {

	/* Category.

	   Filter events by category (Motion or Plume [config changes]). Multiple categories can be passed as a comma-separated string. Default is both.
	*/
	Category *string

	/* From.

	   UTC unix ts

	   Format: double
	*/
	From *float64

	/* ID.

	   Location id

	   Format: JSON
	*/
	ID string

	/* Limit.

	   Maximum number of events to return; defaults to 10

	   Format: double
	*/
	Limit *float64

	/* Sort.

	   whether the returned events will be post-sorted by timestamp
	*/
	Sort *bool

	/* To.

	   UTC unix ts, defaults to now

	   Format: double
	*/
	To *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the location prototype get event history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeGetEventHistoryParams) WithDefaults() *LocationPrototypeGetEventHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the location prototype get event history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LocationPrototypeGetEventHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithTimeout(timeout time.Duration) *LocationPrototypeGetEventHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithContext(ctx context.Context) *LocationPrototypeGetEventHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithHTTPClient(client *http.Client) *LocationPrototypeGetEventHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithCategory(category *string) *LocationPrototypeGetEventHistoryParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetCategory(category *string) {
	o.Category = category
}

// WithFrom adds the from to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithFrom(from *float64) *LocationPrototypeGetEventHistoryParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetFrom(from *float64) {
	o.From = from
}

// WithID adds the id to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithID(id string) *LocationPrototypeGetEventHistoryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetID(id string) {
	o.ID = id
}

// WithLimit adds the limit to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithLimit(limit *float64) *LocationPrototypeGetEventHistoryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithSort adds the sort to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithSort(sort *bool) *LocationPrototypeGetEventHistoryParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetSort(sort *bool) {
	o.Sort = sort
}

// WithTo adds the to to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) WithTo(to *float64) *LocationPrototypeGetEventHistoryParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the location prototype get event history params
func (o *LocationPrototypeGetEventHistoryParams) SetTo(to *float64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *LocationPrototypeGetEventHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string

		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {

			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom float64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatFloat64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort bool

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := swag.FormatBool(qrSort)
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo float64

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatFloat64(qrTo)
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
