// Code generated by go-swagger; DO NOT EDIT.

package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// LocationPrototypeGetCommandStateReader is a Reader for the LocationPrototypeGetCommandState structure.
type LocationPrototypeGetCommandStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LocationPrototypeGetCommandStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLocationPrototypeGetCommandStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewLocationPrototypeGetCommandStateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLocationPrototypeGetCommandStateOK creates a LocationPrototypeGetCommandStateOK with default headers values
func NewLocationPrototypeGetCommandStateOK() *LocationPrototypeGetCommandStateOK {
	return &LocationPrototypeGetCommandStateOK{}
}

/*
LocationPrototypeGetCommandStateOK describes a response with status code 200, with default header values.

Request was successful
*/
type LocationPrototypeGetCommandStateOK struct {
	Payload interface{}
}

// IsSuccess returns true when this location prototype get command state o k response has a 2xx status code
func (o *LocationPrototypeGetCommandStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this location prototype get command state o k response has a 3xx status code
func (o *LocationPrototypeGetCommandStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this location prototype get command state o k response has a 4xx status code
func (o *LocationPrototypeGetCommandStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this location prototype get command state o k response has a 5xx status code
func (o *LocationPrototypeGetCommandStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this location prototype get command state o k response a status code equal to that given
func (o *LocationPrototypeGetCommandStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the location prototype get command state o k response
func (o *LocationPrototypeGetCommandStateOK) Code() int {
	return 200
}

func (o *LocationPrototypeGetCommandStateOK) Error() string {
	return fmt.Sprintf("[GET /Locations/{id}/command/state][%d] locationPrototypeGetCommandStateOK  %+v", 200, o.Payload)
}

func (o *LocationPrototypeGetCommandStateOK) String() string {
	return fmt.Sprintf("[GET /Locations/{id}/command/state][%d] locationPrototypeGetCommandStateOK  %+v", 200, o.Payload)
}

func (o *LocationPrototypeGetCommandStateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *LocationPrototypeGetCommandStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLocationPrototypeGetCommandStateDefault creates a LocationPrototypeGetCommandStateDefault with default headers values
func NewLocationPrototypeGetCommandStateDefault(code int) *LocationPrototypeGetCommandStateDefault {
	return &LocationPrototypeGetCommandStateDefault{
		_statusCode: code,
	}
}

/*
LocationPrototypeGetCommandStateDefault describes a response with status code -1, with default header values.

unexpected error
*/
type LocationPrototypeGetCommandStateDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this location prototype get command state default response has a 2xx status code
func (o *LocationPrototypeGetCommandStateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this location prototype get command state default response has a 3xx status code
func (o *LocationPrototypeGetCommandStateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this location prototype get command state default response has a 4xx status code
func (o *LocationPrototypeGetCommandStateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this location prototype get command state default response has a 5xx status code
func (o *LocationPrototypeGetCommandStateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this location prototype get command state default response a status code equal to that given
func (o *LocationPrototypeGetCommandStateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the location prototype get command state default response
func (o *LocationPrototypeGetCommandStateDefault) Code() int {
	return o._statusCode
}

func (o *LocationPrototypeGetCommandStateDefault) Error() string {
	return fmt.Sprintf("[GET /Locations/{id}/command/state][%d] Location.prototype.getCommandState default  %+v", o._statusCode, o.Payload)
}

func (o *LocationPrototypeGetCommandStateDefault) String() string {
	return fmt.Sprintf("[GET /Locations/{id}/command/state][%d] Location.prototype.getCommandState default  %+v", o._statusCode, o.Payload)
}

func (o *LocationPrototypeGetCommandStateDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *LocationPrototypeGetCommandStateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
