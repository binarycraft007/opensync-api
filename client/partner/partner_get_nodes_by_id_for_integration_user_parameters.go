// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPartnerGetNodesByIDForIntegrationUserParams creates a new PartnerGetNodesByIDForIntegrationUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartnerGetNodesByIDForIntegrationUserParams() *PartnerGetNodesByIDForIntegrationUserParams {
	return &PartnerGetNodesByIDForIntegrationUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartnerGetNodesByIDForIntegrationUserParamsWithTimeout creates a new PartnerGetNodesByIDForIntegrationUserParams object
// with the ability to set a timeout on a request.
func NewPartnerGetNodesByIDForIntegrationUserParamsWithTimeout(timeout time.Duration) *PartnerGetNodesByIDForIntegrationUserParams {
	return &PartnerGetNodesByIDForIntegrationUserParams{
		timeout: timeout,
	}
}

// NewPartnerGetNodesByIDForIntegrationUserParamsWithContext creates a new PartnerGetNodesByIDForIntegrationUserParams object
// with the ability to set a context for a request.
func NewPartnerGetNodesByIDForIntegrationUserParamsWithContext(ctx context.Context) *PartnerGetNodesByIDForIntegrationUserParams {
	return &PartnerGetNodesByIDForIntegrationUserParams{
		Context: ctx,
	}
}

// NewPartnerGetNodesByIDForIntegrationUserParamsWithHTTPClient creates a new PartnerGetNodesByIDForIntegrationUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartnerGetNodesByIDForIntegrationUserParamsWithHTTPClient(client *http.Client) *PartnerGetNodesByIDForIntegrationUserParams {
	return &PartnerGetNodesByIDForIntegrationUserParams{
		HTTPClient: client,
	}
}

/*
PartnerGetNodesByIDForIntegrationUserParams contains all the parameters to send to the API endpoint

	for the partner get nodes by Id for integration user operation.

	Typically these are written to a http.Request.
*/
type PartnerGetNodesByIDForIntegrationUserParams struct {

	/* ExcludeUnclaimed.

	   whether to filter out unclaimed nodes
	*/
	ExcludeUnclaimed *bool

	/* NodeID.

	   node Id
	*/
	NodeID string

	/* PartnerID.

	   partner Id
	*/
	PartnerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partner get nodes by Id for integration user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithDefaults() *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partner get nodes by Id for integration user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithTimeout(timeout time.Duration) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithContext(ctx context.Context) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithHTTPClient(client *http.Client) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExcludeUnclaimed adds the excludeUnclaimed to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithExcludeUnclaimed(excludeUnclaimed *bool) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetExcludeUnclaimed(excludeUnclaimed)
	return o
}

// SetExcludeUnclaimed adds the excludeUnclaimed to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetExcludeUnclaimed(excludeUnclaimed *bool) {
	o.ExcludeUnclaimed = excludeUnclaimed
}

// WithNodeID adds the nodeID to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithNodeID(nodeID string) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetNodeID(nodeID string) {
	o.NodeID = nodeID
}

// WithPartnerID adds the partnerID to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) WithPartnerID(partnerID string) *PartnerGetNodesByIDForIntegrationUserParams {
	o.SetPartnerID(partnerID)
	return o
}

// SetPartnerID adds the partnerId to the partner get nodes by Id for integration user params
func (o *PartnerGetNodesByIDForIntegrationUserParams) SetPartnerID(partnerID string) {
	o.PartnerID = partnerID
}

// WriteToRequest writes these params to a swagger request
func (o *PartnerGetNodesByIDForIntegrationUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExcludeUnclaimed != nil {

		// query param excludeUnclaimed
		var qrExcludeUnclaimed bool

		if o.ExcludeUnclaimed != nil {
			qrExcludeUnclaimed = *o.ExcludeUnclaimed
		}
		qExcludeUnclaimed := swag.FormatBool(qrExcludeUnclaimed)
		if qExcludeUnclaimed != "" {

			if err := r.SetQueryParam("excludeUnclaimed", qExcludeUnclaimed); err != nil {
				return err
			}
		}
	}

	// path param nodeId
	if err := r.SetPathParam("nodeId", o.NodeID); err != nil {
		return err
	}

	// path param partnerId
	if err := r.SetPathParam("partnerId", o.PartnerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
