// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new partner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for partner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PartnerFindCustomers(params *PartnerFindCustomersParams, opts ...ClientOption) (*PartnerFindCustomersOK, error)

	PartnerFindCustomersForIntegrationUser(params *PartnerFindCustomersForIntegrationUserParams, opts ...ClientOption) (*PartnerFindCustomersForIntegrationUserOK, error)

	PartnerGetCustomerCount(params *PartnerGetCustomerCountParams, opts ...ClientOption) (*PartnerGetCustomerCountOK, error)

	PartnerGetLocations(params *PartnerGetLocationsParams, opts ...ClientOption) (*PartnerGetLocationsOK, error)

	PartnerGetNodesByID(params *PartnerGetNodesByIDParams, opts ...ClientOption) (*PartnerGetNodesByIDOK, error)

	PartnerGetNodesByIDForIntegrationUser(params *PartnerGetNodesByIDForIntegrationUserParams, opts ...ClientOption) (*PartnerGetNodesByIDForIntegrationUserOK, error)

	PartnerGetRecentCustomers(params *PartnerGetRecentCustomersParams, opts ...ClientOption) (*PartnerGetRecentCustomersOK, error)

	PartnerPatchNodesByID(params *PartnerPatchNodesByIDParams, opts ...ClientOption) (*PartnerPatchNodesByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	PartnerFindCustomers queries customers with caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerFindCustomers(params *PartnerFindCustomersParams, opts ...ClientOption) (*PartnerFindCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerFindCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.findCustomers",
		Method:             "GET",
		PathPattern:        "/partners/customers/search/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerFindCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerFindCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerFindCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerFindCustomersForIntegrationUser queries customers with caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>403</strong>: Not allowed to access partner.</div>
<div><strong>404</strong>: partnerId or nodeId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerFindCustomersForIntegrationUser(params *PartnerFindCustomersForIntegrationUserParams, opts ...ClientOption) (*PartnerFindCustomersForIntegrationUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerFindCustomersForIntegrationUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.findCustomersForIntegrationUser",
		Method:             "GET",
		PathPattern:        "/partners/{partnerId}/customers/search/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerFindCustomersForIntegrationUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerFindCustomersForIntegrationUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerFindCustomersForIntegrationUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerGetCustomerCount queries customers locations count with caller s groups

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Group id not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerGetCustomerCount(params *PartnerGetCustomerCountParams, opts ...ClientOption) (*PartnerGetCustomerCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerGetCustomerCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.getCustomerCount",
		Method:             "GET",
		PathPattern:        "/partners/{id}/customers/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerGetCustomerCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerGetCustomerCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerGetCustomerCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerGetLocations queries locations with service Id or location Id within the caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerGetLocations(params *PartnerGetLocationsParams, opts ...ClientOption) (*PartnerGetLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerGetLocationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.getLocations",
		Method:             "GET",
		PathPattern:        "/partners/locations/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerGetLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerGetLocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerGetLocationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerGetNodesByID queries customers locations nodes with caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>403</strong>: No right to access the node.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerGetNodesByID(params *PartnerGetNodesByIDParams, opts ...ClientOption) (*PartnerGetNodesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerGetNodesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.getNodesById",
		Method:             "GET",
		PathPattern:        "/partners/nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerGetNodesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerGetNodesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerGetNodesByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerGetNodesByIDForIntegrationUser queries customers locations nodes with caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>403</strong>: No right to access the node.</div>
<div><strong>404</strong>: partnerId or nodeId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerGetNodesByIDForIntegrationUser(params *PartnerGetNodesByIDForIntegrationUserParams, opts ...ClientOption) (*PartnerGetNodesByIDForIntegrationUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerGetNodesByIDForIntegrationUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.getNodesByIdForIntegrationUser",
		Method:             "GET",
		PathPattern:        "/partners/{partnerId}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerGetNodesByIDForIntegrationUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerGetNodesByIDForIntegrationUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerGetNodesByIDForIntegrationUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerGetRecentCustomers queries customers locations count with caller s partner Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Group id not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerGetRecentCustomers(params *PartnerGetRecentCustomersParams, opts ...ClientOption) (*PartnerGetRecentCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerGetRecentCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.getRecentCustomers",
		Method:             "GET",
		PathPattern:        "/partners/{id}/customers/recent",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerGetRecentCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerGetRecentCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerGetRecentCustomersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerPatchNodesByID queries customers locations nodes with caller s partner Id and update it

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerPatchNodesByID(params *PartnerPatchNodesByIDParams, opts ...ClientOption) (*PartnerPatchNodesByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerPatchNodesByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Partner.patchNodesById",
		Method:             "PATCH",
		PathPattern:        "/partners/nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerPatchNodesByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerPatchNodesByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerPatchNodesByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
