// Code generated by go-swagger; DO NOT EDIT.

package partner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPartnerFindCustomersParams creates a new PartnerFindCustomersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartnerFindCustomersParams() *PartnerFindCustomersParams {
	return &PartnerFindCustomersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartnerFindCustomersParamsWithTimeout creates a new PartnerFindCustomersParams object
// with the ability to set a timeout on a request.
func NewPartnerFindCustomersParamsWithTimeout(timeout time.Duration) *PartnerFindCustomersParams {
	return &PartnerFindCustomersParams{
		timeout: timeout,
	}
}

// NewPartnerFindCustomersParamsWithContext creates a new PartnerFindCustomersParams object
// with the ability to set a context for a request.
func NewPartnerFindCustomersParamsWithContext(ctx context.Context) *PartnerFindCustomersParams {
	return &PartnerFindCustomersParams{
		Context: ctx,
	}
}

// NewPartnerFindCustomersParamsWithHTTPClient creates a new PartnerFindCustomersParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartnerFindCustomersParamsWithHTTPClient(client *http.Client) *PartnerFindCustomersParams {
	return &PartnerFindCustomersParams{
		HTTPClient: client,
	}
}

/*
PartnerFindCustomersParams contains all the parameters to send to the API endpoint

	for the partner find customers operation.

	Typically these are written to a http.Request.
*/
type PartnerFindCustomersParams struct {

	// ExactMatch.
	ExactMatch *bool

	// Field.
	Field string

	// Keyword.
	Keyword string

	// Limit.
	//
	// Format: double
	// Default: 10
	Limit *float64

	// Skip.
	//
	// Format: double
	Skip *float64

	// StartsWith.
	StartsWith *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partner find customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerFindCustomersParams) WithDefaults() *PartnerFindCustomersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partner find customers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerFindCustomersParams) SetDefaults() {
	var (
		limitDefault = float64(10)

		skipDefault = float64(0)
	)

	val := PartnerFindCustomersParams{
		Limit: &limitDefault,
		Skip:  &skipDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the partner find customers params
func (o *PartnerFindCustomersParams) WithTimeout(timeout time.Duration) *PartnerFindCustomersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partner find customers params
func (o *PartnerFindCustomersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partner find customers params
func (o *PartnerFindCustomersParams) WithContext(ctx context.Context) *PartnerFindCustomersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partner find customers params
func (o *PartnerFindCustomersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partner find customers params
func (o *PartnerFindCustomersParams) WithHTTPClient(client *http.Client) *PartnerFindCustomersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partner find customers params
func (o *PartnerFindCustomersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExactMatch adds the exactMatch to the partner find customers params
func (o *PartnerFindCustomersParams) WithExactMatch(exactMatch *bool) *PartnerFindCustomersParams {
	o.SetExactMatch(exactMatch)
	return o
}

// SetExactMatch adds the exactMatch to the partner find customers params
func (o *PartnerFindCustomersParams) SetExactMatch(exactMatch *bool) {
	o.ExactMatch = exactMatch
}

// WithField adds the field to the partner find customers params
func (o *PartnerFindCustomersParams) WithField(field string) *PartnerFindCustomersParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the partner find customers params
func (o *PartnerFindCustomersParams) SetField(field string) {
	o.Field = field
}

// WithKeyword adds the keyword to the partner find customers params
func (o *PartnerFindCustomersParams) WithKeyword(keyword string) *PartnerFindCustomersParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the partner find customers params
func (o *PartnerFindCustomersParams) SetKeyword(keyword string) {
	o.Keyword = keyword
}

// WithLimit adds the limit to the partner find customers params
func (o *PartnerFindCustomersParams) WithLimit(limit *float64) *PartnerFindCustomersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the partner find customers params
func (o *PartnerFindCustomersParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithSkip adds the skip to the partner find customers params
func (o *PartnerFindCustomersParams) WithSkip(skip *float64) *PartnerFindCustomersParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the partner find customers params
func (o *PartnerFindCustomersParams) SetSkip(skip *float64) {
	o.Skip = skip
}

// WithStartsWith adds the startsWith to the partner find customers params
func (o *PartnerFindCustomersParams) WithStartsWith(startsWith *bool) *PartnerFindCustomersParams {
	o.SetStartsWith(startsWith)
	return o
}

// SetStartsWith adds the startsWith to the partner find customers params
func (o *PartnerFindCustomersParams) SetStartsWith(startsWith *bool) {
	o.StartsWith = startsWith
}

// WriteToRequest writes these params to a swagger request
func (o *PartnerFindCustomersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExactMatch != nil {

		// query param exactMatch
		var qrExactMatch bool

		if o.ExactMatch != nil {
			qrExactMatch = *o.ExactMatch
		}
		qExactMatch := swag.FormatBool(qrExactMatch)
		if qExactMatch != "" {

			if err := r.SetQueryParam("exactMatch", qExactMatch); err != nil {
				return err
			}
		}
	}

	// query param field
	qrField := o.Field
	qField := qrField
	if qField != "" {

		if err := r.SetQueryParam("field", qField); err != nil {
			return err
		}
	}

	// path param keyword
	if err := r.SetPathParam("keyword", o.Keyword); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip float64

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatFloat64(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.StartsWith != nil {

		// query param startsWith
		var qrStartsWith bool

		if o.StartsWith != nil {
			qrStartsWith = *o.StartsWith
		}
		qStartsWith := swag.FormatBool(qrStartsWith)
		if qStartsWith != "" {

			if err := r.SetQueryParam("startsWith", qStartsWith); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
