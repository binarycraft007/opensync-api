// Code generated by go-swagger; DO NOT EDIT.

package partner_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPartnerConfigPatchAppPrioritizationPartnerConfigParams creates a new PartnerConfigPatchAppPrioritizationPartnerConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartnerConfigPatchAppPrioritizationPartnerConfigParams() *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	return &PartnerConfigPatchAppPrioritizationPartnerConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithTimeout creates a new PartnerConfigPatchAppPrioritizationPartnerConfigParams object
// with the ability to set a timeout on a request.
func NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithTimeout(timeout time.Duration) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	return &PartnerConfigPatchAppPrioritizationPartnerConfigParams{
		timeout: timeout,
	}
}

// NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithContext creates a new PartnerConfigPatchAppPrioritizationPartnerConfigParams object
// with the ability to set a context for a request.
func NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithContext(ctx context.Context) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	return &PartnerConfigPatchAppPrioritizationPartnerConfigParams{
		Context: ctx,
	}
}

// NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithHTTPClient creates a new PartnerConfigPatchAppPrioritizationPartnerConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartnerConfigPatchAppPrioritizationPartnerConfigParamsWithHTTPClient(client *http.Client) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	return &PartnerConfigPatchAppPrioritizationPartnerConfigParams{
		HTTPClient: client,
	}
}

/*
PartnerConfigPatchAppPrioritizationPartnerConfigParams contains all the parameters to send to the API endpoint

	for the partner config patch app prioritization partner config operation.

	Typically these are written to a http.Request.
*/
type PartnerConfigPatchAppPrioritizationPartnerConfigParams struct {

	/* AppPriority.

	   priority for apps

	   Format: JSON
	*/
	AppPriority *string

	/* CustomSetting.

	   Settings for app prioritization

	   Format: JSON
	*/
	CustomSetting *string

	/* CustomSettingEnabled.

	   true if custom setting is enabled
	*/
	CustomSettingEnabled *bool

	/* DefaultMode.

	   App Prioritization mode - any of enable | disable
	*/
	DefaultMode *string

	/* Enabled.

	   (deprecated) true if app prioritization is enabled
	*/
	Enabled *bool

	/* InitialLocationEnabled.

	   true if app prioritization is enabled for all new locations
	*/
	InitialLocationEnabled *bool

	// PartnerID.
	PartnerID string

	/* Template.

	   Template for app prioritization
	*/
	Template *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partner config patch app prioritization partner config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithDefaults() *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partner config patch app prioritization partner config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithTimeout(timeout time.Duration) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithContext(ctx context.Context) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithHTTPClient(client *http.Client) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppPriority adds the appPriority to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithAppPriority(appPriority *string) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetAppPriority(appPriority)
	return o
}

// SetAppPriority adds the appPriority to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetAppPriority(appPriority *string) {
	o.AppPriority = appPriority
}

// WithCustomSetting adds the customSetting to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithCustomSetting(customSetting *string) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetCustomSetting(customSetting)
	return o
}

// SetCustomSetting adds the customSetting to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetCustomSetting(customSetting *string) {
	o.CustomSetting = customSetting
}

// WithCustomSettingEnabled adds the customSettingEnabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithCustomSettingEnabled(customSettingEnabled *bool) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetCustomSettingEnabled(customSettingEnabled)
	return o
}

// SetCustomSettingEnabled adds the customSettingEnabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetCustomSettingEnabled(customSettingEnabled *bool) {
	o.CustomSettingEnabled = customSettingEnabled
}

// WithDefaultMode adds the defaultMode to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithDefaultMode(defaultMode *string) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetDefaultMode(defaultMode)
	return o
}

// SetDefaultMode adds the defaultMode to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetDefaultMode(defaultMode *string) {
	o.DefaultMode = defaultMode
}

// WithEnabled adds the enabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithEnabled(enabled *bool) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithInitialLocationEnabled adds the initialLocationEnabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithInitialLocationEnabled(initialLocationEnabled *bool) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetInitialLocationEnabled(initialLocationEnabled)
	return o
}

// SetInitialLocationEnabled adds the initialLocationEnabled to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetInitialLocationEnabled(initialLocationEnabled *bool) {
	o.InitialLocationEnabled = initialLocationEnabled
}

// WithPartnerID adds the partnerID to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithPartnerID(partnerID string) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetPartnerID(partnerID)
	return o
}

// SetPartnerID adds the partnerId to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetPartnerID(partnerID string) {
	o.PartnerID = partnerID
}

// WithTemplate adds the template to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WithTemplate(template *string) *PartnerConfigPatchAppPrioritizationPartnerConfigParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the partner config patch app prioritization partner config params
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) SetTemplate(template *string) {
	o.Template = template
}

// WriteToRequest writes these params to a swagger request
func (o *PartnerConfigPatchAppPrioritizationPartnerConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppPriority != nil {

		// form param appPriority
		var frAppPriority string
		if o.AppPriority != nil {
			frAppPriority = *o.AppPriority
		}
		fAppPriority := frAppPriority
		if fAppPriority != "" {
			if err := r.SetFormParam("appPriority", fAppPriority); err != nil {
				return err
			}
		}
	}

	if o.CustomSetting != nil {

		// form param customSetting
		var frCustomSetting string
		if o.CustomSetting != nil {
			frCustomSetting = *o.CustomSetting
		}
		fCustomSetting := frCustomSetting
		if fCustomSetting != "" {
			if err := r.SetFormParam("customSetting", fCustomSetting); err != nil {
				return err
			}
		}
	}

	if o.CustomSettingEnabled != nil {

		// form param customSettingEnabled
		var frCustomSettingEnabled bool
		if o.CustomSettingEnabled != nil {
			frCustomSettingEnabled = *o.CustomSettingEnabled
		}
		fCustomSettingEnabled := swag.FormatBool(frCustomSettingEnabled)
		if fCustomSettingEnabled != "" {
			if err := r.SetFormParam("customSettingEnabled", fCustomSettingEnabled); err != nil {
				return err
			}
		}
	}

	if o.DefaultMode != nil {

		// form param defaultMode
		var frDefaultMode string
		if o.DefaultMode != nil {
			frDefaultMode = *o.DefaultMode
		}
		fDefaultMode := frDefaultMode
		if fDefaultMode != "" {
			if err := r.SetFormParam("defaultMode", fDefaultMode); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// form param enabled
		var frEnabled bool
		if o.Enabled != nil {
			frEnabled = *o.Enabled
		}
		fEnabled := swag.FormatBool(frEnabled)
		if fEnabled != "" {
			if err := r.SetFormParam("enabled", fEnabled); err != nil {
				return err
			}
		}
	}

	if o.InitialLocationEnabled != nil {

		// form param initialLocationEnabled
		var frInitialLocationEnabled bool
		if o.InitialLocationEnabled != nil {
			frInitialLocationEnabled = *o.InitialLocationEnabled
		}
		fInitialLocationEnabled := swag.FormatBool(frInitialLocationEnabled)
		if fInitialLocationEnabled != "" {
			if err := r.SetFormParam("initialLocationEnabled", fInitialLocationEnabled); err != nil {
				return err
			}
		}
	}

	// path param partnerId
	if err := r.SetPathParam("partnerId", o.PartnerID); err != nil {
		return err
	}

	if o.Template != nil {

		// form param template
		var frTemplate string
		if o.Template != nil {
			frTemplate = *o.Template
		}
		fTemplate := frTemplate
		if fTemplate != "" {
			if err := r.SetFormParam("template", fTemplate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
