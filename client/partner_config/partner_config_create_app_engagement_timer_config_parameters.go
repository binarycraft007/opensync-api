// Code generated by go-swagger; DO NOT EDIT.

package partner_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPartnerConfigCreateAppEngagementTimerConfigParams creates a new PartnerConfigCreateAppEngagementTimerConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPartnerConfigCreateAppEngagementTimerConfigParams() *PartnerConfigCreateAppEngagementTimerConfigParams {
	return &PartnerConfigCreateAppEngagementTimerConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPartnerConfigCreateAppEngagementTimerConfigParamsWithTimeout creates a new PartnerConfigCreateAppEngagementTimerConfigParams object
// with the ability to set a timeout on a request.
func NewPartnerConfigCreateAppEngagementTimerConfigParamsWithTimeout(timeout time.Duration) *PartnerConfigCreateAppEngagementTimerConfigParams {
	return &PartnerConfigCreateAppEngagementTimerConfigParams{
		timeout: timeout,
	}
}

// NewPartnerConfigCreateAppEngagementTimerConfigParamsWithContext creates a new PartnerConfigCreateAppEngagementTimerConfigParams object
// with the ability to set a context for a request.
func NewPartnerConfigCreateAppEngagementTimerConfigParamsWithContext(ctx context.Context) *PartnerConfigCreateAppEngagementTimerConfigParams {
	return &PartnerConfigCreateAppEngagementTimerConfigParams{
		Context: ctx,
	}
}

// NewPartnerConfigCreateAppEngagementTimerConfigParamsWithHTTPClient creates a new PartnerConfigCreateAppEngagementTimerConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewPartnerConfigCreateAppEngagementTimerConfigParamsWithHTTPClient(client *http.Client) *PartnerConfigCreateAppEngagementTimerConfigParams {
	return &PartnerConfigCreateAppEngagementTimerConfigParams{
		HTTPClient: client,
	}
}

/*
PartnerConfigCreateAppEngagementTimerConfigParams contains all the parameters to send to the API endpoint

	for the partner config create app engagement timer config operation.

	Typically these are written to a http.Request.
*/
type PartnerConfigCreateAppEngagementTimerConfigParams struct {

	// Enable.
	Enable bool

	// ID.
	ID string

	// NumberOfAllowedRetries.
	//
	// Format: double
	NumberOfAllowedRetries float64

	// TimerInSeconds.
	//
	// Format: double
	TimerInSeconds float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the partner config create app engagement timer config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithDefaults() *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the partner config create app engagement timer config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithTimeout(timeout time.Duration) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithContext(ctx context.Context) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithHTTPClient(client *http.Client) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnable adds the enable to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithEnable(enable bool) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetEnable(enable)
	return o
}

// SetEnable adds the enable to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetEnable(enable bool) {
	o.Enable = enable
}

// WithID adds the id to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithID(id string) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetID(id string) {
	o.ID = id
}

// WithNumberOfAllowedRetries adds the numberOfAllowedRetries to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithNumberOfAllowedRetries(numberOfAllowedRetries float64) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetNumberOfAllowedRetries(numberOfAllowedRetries)
	return o
}

// SetNumberOfAllowedRetries adds the numberOfAllowedRetries to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetNumberOfAllowedRetries(numberOfAllowedRetries float64) {
	o.NumberOfAllowedRetries = numberOfAllowedRetries
}

// WithTimerInSeconds adds the timerInSeconds to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WithTimerInSeconds(timerInSeconds float64) *PartnerConfigCreateAppEngagementTimerConfigParams {
	o.SetTimerInSeconds(timerInSeconds)
	return o
}

// SetTimerInSeconds adds the timerInSeconds to the partner config create app engagement timer config params
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) SetTimerInSeconds(timerInSeconds float64) {
	o.TimerInSeconds = timerInSeconds
}

// WriteToRequest writes these params to a swagger request
func (o *PartnerConfigCreateAppEngagementTimerConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param enable
	frEnable := o.Enable
	fEnable := swag.FormatBool(frEnable)
	if fEnable != "" {
		if err := r.SetFormParam("enable", fEnable); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param numberOfAllowedRetries
	frNumberOfAllowedRetries := o.NumberOfAllowedRetries
	fNumberOfAllowedRetries := swag.FormatFloat64(frNumberOfAllowedRetries)
	if fNumberOfAllowedRetries != "" {
		if err := r.SetFormParam("numberOfAllowedRetries", fNumberOfAllowedRetries); err != nil {
			return err
		}
	}

	// form param timerInSeconds
	frTimerInSeconds := o.TimerInSeconds
	fTimerInSeconds := swag.FormatFloat64(frTimerInSeconds)
	if fTimerInSeconds != "" {
		if err := r.SetFormParam("timerInSeconds", fTimerInSeconds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
