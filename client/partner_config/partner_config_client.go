// Code generated by go-swagger; DO NOT EDIT.

package partner_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new partner config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for partner config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PartnerConfigCreateAppEngagementTimerConfig(params *PartnerConfigCreateAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigCreateAppEngagementTimerConfigOK, error)

	PartnerConfigDeleteAppPrioritizationPartnerAppPriority(params *PartnerConfigDeleteAppPrioritizationPartnerAppPriorityParams, opts ...ClientOption) (*PartnerConfigDeleteAppPrioritizationPartnerAppPriorityOK, error)

	PartnerConfigDeleteAppPrioritizationPartnerCustomSetting(params *PartnerConfigDeleteAppPrioritizationPartnerCustomSettingParams, opts ...ClientOption) (*PartnerConfigDeleteAppPrioritizationPartnerCustomSettingOK, error)

	PartnerConfigDeleteAppQoe(params *PartnerConfigDeleteAppQoeParams, opts ...ClientOption) (*PartnerConfigDeleteAppQoeNoContent, error)

	PartnerConfigDeleteMachineToMachineToken(params *PartnerConfigDeleteMachineToMachineTokenParams, opts ...ClientOption) (*PartnerConfigDeleteMachineToMachineTokenOK, error)

	PartnerConfigDeletePreCacScheduler(params *PartnerConfigDeletePreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigDeletePreCacSchedulerNoContent, error)

	PartnerConfigDeleteSamKnows(params *PartnerConfigDeleteSamKnowsParams, opts ...ClientOption) (*PartnerConfigDeleteSamKnowsNoContent, error)

	PartnerConfigDeleteSipAlg(params *PartnerConfigDeleteSipAlgParams, opts ...ClientOption) (*PartnerConfigDeleteSipAlgNoContent, error)

	PartnerConfigDeleteSpeedTest(params *PartnerConfigDeleteSpeedTestParams, opts ...ClientOption) (*PartnerConfigDeleteSpeedTestNoContent, error)

	PartnerConfigDeleteVlanService(params *PartnerConfigDeleteVlanServiceParams, opts ...ClientOption) (*PartnerConfigDeleteVlanServiceNoContent, error)

	PartnerConfigDisableMachineToMachine(params *PartnerConfigDisableMachineToMachineParams, opts ...ClientOption) (*PartnerConfigDisableMachineToMachineOK, error)

	PartnerConfigEnableMachineToMachine(params *PartnerConfigEnableMachineToMachineParams, opts ...ClientOption) (*PartnerConfigEnableMachineToMachineOK, error)

	PartnerConfigGenerateMachineToMachineToken(params *PartnerConfigGenerateMachineToMachineTokenParams, opts ...ClientOption) (*PartnerConfigGenerateMachineToMachineTokenOK, error)

	PartnerConfigGetAppEngagementTimerConfig(params *PartnerConfigGetAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigGetAppEngagementTimerConfigOK, error)

	PartnerConfigGetAppPrioritizationPartnerConfig(params *PartnerConfigGetAppPrioritizationPartnerConfigParams, opts ...ClientOption) (*PartnerConfigGetAppPrioritizationPartnerConfigOK, error)

	PartnerConfigGetAppQoe(params *PartnerConfigGetAppQoeParams, opts ...ClientOption) (*PartnerConfigGetAppQoeOK, error)

	PartnerConfigGetCaptivePortalConfig(params *PartnerConfigGetCaptivePortalConfigParams, opts ...ClientOption) (*PartnerConfigGetCaptivePortalConfigOK, error)

	PartnerConfigGetCohorts(params *PartnerConfigGetCohortsParams, opts ...ClientOption) (*PartnerConfigGetCohortsOK, error)

	PartnerConfigGetFeatureFlags(params *PartnerConfigGetFeatureFlagsParams, opts ...ClientOption) (*PartnerConfigGetFeatureFlagsOK, error)

	PartnerConfigGetHomepassCustomerSupportConfigurations(params *PartnerConfigGetHomepassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigGetHomepassCustomerSupportConfigurationsOK, error)

	PartnerConfigGetMachineToMachine(params *PartnerConfigGetMachineToMachineParams, opts ...ClientOption) (*PartnerConfigGetMachineToMachineOK, error)

	PartnerConfigGetPreCacScheduler(params *PartnerConfigGetPreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigGetPreCacSchedulerOK, error)

	PartnerConfigGetSamKnows(params *PartnerConfigGetSamKnowsParams, opts ...ClientOption) (*PartnerConfigGetSamKnowsOK, error)

	PartnerConfigGetSecurityPolicy(params *PartnerConfigGetSecurityPolicyParams, opts ...ClientOption) (*PartnerConfigGetSecurityPolicyOK, error)

	PartnerConfigGetSipAlg(params *PartnerConfigGetSipAlgParams, opts ...ClientOption) (*PartnerConfigGetSipAlgOK, error)

	PartnerConfigGetSpeedTest(params *PartnerConfigGetSpeedTestParams, opts ...ClientOption) (*PartnerConfigGetSpeedTestOK, error)

	PartnerConfigGetVlanServices(params *PartnerConfigGetVlanServicesParams, opts ...ClientOption) (*PartnerConfigGetVlanServicesOK, error)

	PartnerConfigGetWorkpassCustomerSupportConfigurations(params *PartnerConfigGetWorkpassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigGetWorkpassCustomerSupportConfigurationsOK, error)

	PartnerConfigPatchAppEngagementTimerConfig(params *PartnerConfigPatchAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigPatchAppEngagementTimerConfigOK, error)

	PartnerConfigPatchAppPrioritizationPartnerConfig(params *PartnerConfigPatchAppPrioritizationPartnerConfigParams, opts ...ClientOption) (*PartnerConfigPatchAppPrioritizationPartnerConfigOK, error)

	PartnerConfigPatchHomepassCustomerSupportConfigurations(params *PartnerConfigPatchHomepassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigPatchHomepassCustomerSupportConfigurationsOK, error)

	PartnerConfigPatchSecurityPolicy(params *PartnerConfigPatchSecurityPolicyParams, opts ...ClientOption) (*PartnerConfigPatchSecurityPolicyOK, error)

	PartnerConfigPatchWorkpassCustomerSupportConfigurations(params *PartnerConfigPatchWorkpassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigPatchWorkpassCustomerSupportConfigurationsOK, error)

	PartnerConfigPutVlanServices(params *PartnerConfigPutVlanServicesParams, opts ...ClientOption) (*PartnerConfigPutVlanServicesOK, error)

	PartnerConfigUpdateAppQoe(params *PartnerConfigUpdateAppQoeParams, opts ...ClientOption) (*PartnerConfigUpdateAppQoeOK, error)

	PartnerConfigUpdateCaptivePortalConfig(params *PartnerConfigUpdateCaptivePortalConfigParams, opts ...ClientOption) (*PartnerConfigUpdateCaptivePortalConfigOK, error)

	PartnerConfigUpdateFeatureFlags(params *PartnerConfigUpdateFeatureFlagsParams, opts ...ClientOption) (*PartnerConfigUpdateFeatureFlagsOK, error)

	PartnerConfigUpdatePreCacScheduler(params *PartnerConfigUpdatePreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigUpdatePreCacSchedulerOK, error)

	PartnerConfigUpdateSamKnows(params *PartnerConfigUpdateSamKnowsParams, opts ...ClientOption) (*PartnerConfigUpdateSamKnowsOK, error)

	PartnerConfigUpdateSipAlg(params *PartnerConfigUpdateSipAlgParams, opts ...ClientOption) (*PartnerConfigUpdateSipAlgOK, error)

	PartnerConfigUpdateSpeedTest(params *PartnerConfigUpdateSpeedTestParams, opts ...ClientOption) (*PartnerConfigUpdateSpeedTestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	PartnerConfigCreateAppEngagementTimerConfig creates a partner config for app engagement timer

	<div><strong>200</strong>: Success. Created partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: "illegal field"</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigCreateAppEngagementTimerConfig(params *PartnerConfigCreateAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigCreateAppEngagementTimerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigCreateAppEngagementTimerConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.createAppEngagementTimerConfig",
		Method:             "POST",
		PathPattern:        "/partnerConfig/{id}/appEngagementTimer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigCreateAppEngagementTimerConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigCreateAppEngagementTimerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigCreateAppEngagementTimerConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PartnerConfigDeleteAppPrioritizationPartnerAppPriority sets app priority to default for app prioritization
*/
func (a *Client) PartnerConfigDeleteAppPrioritizationPartnerAppPriority(params *PartnerConfigDeleteAppPrioritizationPartnerAppPriorityParams, opts ...ClientOption) (*PartnerConfigDeleteAppPrioritizationPartnerAppPriorityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteAppPrioritizationPartnerAppPriorityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteAppPrioritizationPartnerAppPriority",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{partnerId}/qos/appPrioritization/appPriority",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteAppPrioritizationPartnerAppPriorityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteAppPrioritizationPartnerAppPriorityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteAppPrioritizationPartnerAppPriorityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PartnerConfigDeleteAppPrioritizationPartnerCustomSetting sets custom setting to default for app prioritization
*/
func (a *Client) PartnerConfigDeleteAppPrioritizationPartnerCustomSetting(params *PartnerConfigDeleteAppPrioritizationPartnerCustomSettingParams, opts ...ClientOption) (*PartnerConfigDeleteAppPrioritizationPartnerCustomSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteAppPrioritizationPartnerCustomSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteAppPrioritizationPartnerCustomSetting",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{partnerId}/qos/appPrioritization/customSetting",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteAppPrioritizationPartnerCustomSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteAppPrioritizationPartnerCustomSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteAppPrioritizationPartnerCustomSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteAppQoe deletes cohort app qoe config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeleteAppQoe(params *PartnerConfigDeleteAppQoeParams, opts ...ClientOption) (*PartnerConfigDeleteAppQoeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteAppQoeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteAppQoe",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/appQoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteAppQoeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteAppQoeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteAppQoeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteMachineToMachineToken deletes one of the tokens for the partner Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: There is not configuration for this partnerId</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigDeleteMachineToMachineToken(params *PartnerConfigDeleteMachineToMachineTokenParams, opts ...ClientOption) (*PartnerConfigDeleteMachineToMachineTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteMachineToMachineTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteMachineToMachineToken",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/machineToMachine/tokens/{tokenId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteMachineToMachineTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteMachineToMachineTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteMachineToMachineTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeletePreCacScheduler deletes cohort pre cac scheduler config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeletePreCacScheduler(params *PartnerConfigDeletePreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigDeletePreCacSchedulerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeletePreCacSchedulerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deletePreCacScheduler",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/pcs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeletePreCacSchedulerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeletePreCacSchedulerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeletePreCacSchedulerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteSamKnows deletes cohort sam knows config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeleteSamKnows(params *PartnerConfigDeleteSamKnowsParams, opts ...ClientOption) (*PartnerConfigDeleteSamKnowsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteSamKnowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteSamKnows",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/samKnows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteSamKnowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteSamKnowsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteSamKnowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteSipAlg deletes cohort sip alg config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeleteSipAlg(params *PartnerConfigDeleteSipAlgParams, opts ...ClientOption) (*PartnerConfigDeleteSipAlgNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteSipAlgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteSipAlg",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/sipAlg",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteSipAlgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteSipAlgNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteSipAlgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteSpeedTest deletes partners speed test config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeleteSpeedTest(params *PartnerConfigDeleteSpeedTestParams, opts ...ClientOption) (*PartnerConfigDeleteSpeedTestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteSpeedTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteSpeedTest",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/speedTest",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteSpeedTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteSpeedTestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteSpeedTestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDeleteVlanService deletes cohort vlan service config

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigDeleteVlanService(params *PartnerConfigDeleteVlanServiceParams, opts ...ClientOption) (*PartnerConfigDeleteVlanServiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDeleteVlanServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.deleteVlanService",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/platform/vlanServices",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDeleteVlanServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDeleteVlanServiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDeleteVlanServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigDisableMachineToMachine disables machine to machine token generation for partner

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>403</strong>: Not allowed to update configuration</div>
<div><strong>404</strong>: Group of partnerId not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigDisableMachineToMachine(params *PartnerConfigDisableMachineToMachineParams, opts ...ClientOption) (*PartnerConfigDisableMachineToMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigDisableMachineToMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.disableMachineToMachine",
		Method:             "DELETE",
		PathPattern:        "/partnerConfig/{id}/machineToMachine",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigDisableMachineToMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigDisableMachineToMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigDisableMachineToMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigEnableMachineToMachine enables machine to machine token generation for partner Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>403</strong>: Not allowed to update configuration</div>
<div><strong>404</strong>: Group of partnerId not found</div>
<div><strong>422</strong>: Illegal field</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigEnableMachineToMachine(params *PartnerConfigEnableMachineToMachineParams, opts ...ClientOption) (*PartnerConfigEnableMachineToMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigEnableMachineToMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.enableMachineToMachine",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/machineToMachine",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigEnableMachineToMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigEnableMachineToMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigEnableMachineToMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGenerateMachineToMachineToken generates a new machine to machine token for partner Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: There is not configuration for this partnerId</div>
<div><strong>422</strong>: Illegal field</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGenerateMachineToMachineToken(params *PartnerConfigGenerateMachineToMachineTokenParams, opts ...ClientOption) (*PartnerConfigGenerateMachineToMachineTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGenerateMachineToMachineTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.generateMachineToMachineToken",
		Method:             "POST",
		PathPattern:        "/partnerConfig/{id}/machineToMachine/tokens",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGenerateMachineToMachineTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGenerateMachineToMachineTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGenerateMachineToMachineTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetAppEngagementTimerConfig gets a partner config for app engagement timer

	<div><strong>200</strong>: Success. Retrieved partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Config does not exist </div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGetAppEngagementTimerConfig(params *PartnerConfigGetAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigGetAppEngagementTimerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetAppEngagementTimerConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getAppEngagementTimerConfig",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/appEngagementTimer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetAppEngagementTimerConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetAppEngagementTimerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetAppEngagementTimerConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetAppPrioritizationPartnerConfig gets status for app prioritization

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Partner id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetAppPrioritizationPartnerConfig(params *PartnerConfigGetAppPrioritizationPartnerConfigParams, opts ...ClientOption) (*PartnerConfigGetAppPrioritizationPartnerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetAppPrioritizationPartnerConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getAppPrioritizationPartnerConfig",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{partnerId}/qos/appPrioritization",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetAppPrioritizationPartnerConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetAppPrioritizationPartnerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetAppPrioritizationPartnerConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetAppQoe gets partners app qoe config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetAppQoe(params *PartnerConfigGetAppQoeParams, opts ...ClientOption) (*PartnerConfigGetAppQoeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetAppQoeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getAppQoe",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/appQoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetAppQoeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetAppQoeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetAppQoeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetCaptivePortalConfig gets partners captive portal configs

	<div><strong>200</strong>: Success. Patched partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGetCaptivePortalConfig(params *PartnerConfigGetCaptivePortalConfigParams, opts ...ClientOption) (*PartnerConfigGetCaptivePortalConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetCaptivePortalConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getCaptivePortalConfig",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/captivePortal",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetCaptivePortalConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetCaptivePortalConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetCaptivePortalConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetCohorts gets all partners cohort configs

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: PartnerId not found or no configurations exist for partner</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetCohorts(params *PartnerConfigGetCohortsParams, opts ...ClientOption) (*PartnerConfigGetCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetCohortsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getCohorts",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetCohortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetFeatureFlags gets partners feature flags

	<div><strong>200</strong>: Success. Patched partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>403</strong>: Not allowed to update configuration</div>
<div><strong>422</strong>: Illegal field</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGetFeatureFlags(params *PartnerConfigGetFeatureFlagsParams, opts ...ClientOption) (*PartnerConfigGetFeatureFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetFeatureFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getFeatureFlags",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/featureFlags",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetFeatureFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetFeatureFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetFeatureFlagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetHomepassCustomerSupportConfigurations gets homepass customer support configurations

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerConfigGetHomepassCustomerSupportConfigurations(params *PartnerConfigGetHomepassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigGetHomepassCustomerSupportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetHomepassCustomerSupportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getHomepassCustomerSupportConfigurations",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/homepass/customerSupportConfigurations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetHomepassCustomerSupportConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetHomepassCustomerSupportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetHomepassCustomerSupportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetMachineToMachine gets partners machine to machine information

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: There is not configuration for this partnerId</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGetMachineToMachine(params *PartnerConfigGetMachineToMachineParams, opts ...ClientOption) (*PartnerConfigGetMachineToMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetMachineToMachineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getMachineToMachine",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/machineToMachine",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetMachineToMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetMachineToMachineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetMachineToMachineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetPreCacScheduler gets pre c a c scheduler config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetPreCacScheduler(params *PartnerConfigGetPreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigGetPreCacSchedulerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetPreCacSchedulerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getPreCacScheduler",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/pcs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetPreCacSchedulerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetPreCacSchedulerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetPreCacSchedulerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetSamKnows gets partners sam knows config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetSamKnows(params *PartnerConfigGetSamKnowsParams, opts ...ClientOption) (*PartnerConfigGetSamKnowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetSamKnowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getSamKnows",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/samKnows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetSamKnowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetSamKnowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetSamKnowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetSecurityPolicy gets partner s default security policy

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: There is not configuration for this partnerId</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigGetSecurityPolicy(params *PartnerConfigGetSecurityPolicyParams, opts ...ClientOption) (*PartnerConfigGetSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetSipAlg gets partners sip alg config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetSipAlg(params *PartnerConfigGetSipAlgParams, opts ...ClientOption) (*PartnerConfigGetSipAlgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetSipAlgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getSipAlg",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/sipAlg",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetSipAlgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetSipAlgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetSipAlgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetSpeedTest gets partners speed test config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetSpeedTest(params *PartnerConfigGetSpeedTestParams, opts ...ClientOption) (*PartnerConfigGetSpeedTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetSpeedTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getSpeedTest",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/speedTest",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetSpeedTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetSpeedTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetSpeedTestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetVlanServices gets cohort vlan service configs

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: PartnerId not found or no configurations exist for partner</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigGetVlanServices(params *PartnerConfigGetVlanServicesParams, opts ...ClientOption) (*PartnerConfigGetVlanServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetVlanServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getVlanServices",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/platform/vlanServices",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetVlanServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetVlanServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetVlanServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigGetWorkpassCustomerSupportConfigurations gets workpass customer support configurations

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerConfigGetWorkpassCustomerSupportConfigurations(params *PartnerConfigGetWorkpassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigGetWorkpassCustomerSupportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigGetWorkpassCustomerSupportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.getWorkpassCustomerSupportConfigurations",
		Method:             "GET",
		PathPattern:        "/partnerConfig/{id}/workpass/customerSupportConfigurations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigGetWorkpassCustomerSupportConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigGetWorkpassCustomerSupportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigGetWorkpassCustomerSupportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPatchAppEngagementTimerConfig patches a partner config for app engagement timer

	<div><strong>200</strong>: Success. Patched partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: "illegal field"</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigPatchAppEngagementTimerConfig(params *PartnerConfigPatchAppEngagementTimerConfigParams, opts ...ClientOption) (*PartnerConfigPatchAppEngagementTimerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPatchAppEngagementTimerConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.patchAppEngagementTimerConfig",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/appEngagementTimer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPatchAppEngagementTimerConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPatchAppEngagementTimerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPatchAppEngagementTimerConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPatchAppPrioritizationPartnerConfig updates app prioritization config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Partner id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigPatchAppPrioritizationPartnerConfig(params *PartnerConfigPatchAppPrioritizationPartnerConfigParams, opts ...ClientOption) (*PartnerConfigPatchAppPrioritizationPartnerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPatchAppPrioritizationPartnerConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.patchAppPrioritizationPartnerConfig",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{partnerId}/qos/appPrioritization",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPatchAppPrioritizationPartnerConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPatchAppPrioritizationPartnerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPatchAppPrioritizationPartnerConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPatchHomepassCustomerSupportConfigurations patches customer support configurations

	<div><strong>200</strong>: Success. Patched customer support configurations.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerConfigPatchHomepassCustomerSupportConfigurations(params *PartnerConfigPatchHomepassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigPatchHomepassCustomerSupportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPatchHomepassCustomerSupportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.patchHomepassCustomerSupportConfigurations",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/homepass/customerSupportConfigurations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPatchHomepassCustomerSupportConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPatchHomepassCustomerSupportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPatchHomepassCustomerSupportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPatchSecurityPolicy sets partner s default security policy

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: There is not configuration for this partnerId</div>
<div><strong>422</strong>: Illegal field</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigPatchSecurityPolicy(params *PartnerConfigPatchSecurityPolicyParams, opts ...ClientOption) (*PartnerConfigPatchSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPatchSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.patchSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPatchSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPatchSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPatchSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPatchWorkpassCustomerSupportConfigurations patches customer support configurations

	<div><strong>200</strong>: Success. Patched customer support configurations.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) PartnerConfigPatchWorkpassCustomerSupportConfigurations(params *PartnerConfigPatchWorkpassCustomerSupportConfigurationsParams, opts ...ClientOption) (*PartnerConfigPatchWorkpassCustomerSupportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPatchWorkpassCustomerSupportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.patchWorkpassCustomerSupportConfigurations",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/workpass/customerSupportConfigurations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPatchWorkpassCustomerSupportConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPatchWorkpassCustomerSupportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPatchWorkpassCustomerSupportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigPutVlanServices updates cohort vlan service config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigPutVlanServices(params *PartnerConfigPutVlanServicesParams, opts ...ClientOption) (*PartnerConfigPutVlanServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigPutVlanServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.putVlanServices",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/vlanServices",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigPutVlanServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigPutVlanServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigPutVlanServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateAppQoe updates partners app qoe config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigUpdateAppQoe(params *PartnerConfigUpdateAppQoeParams, opts ...ClientOption) (*PartnerConfigUpdateAppQoeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateAppQoeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateAppQoe",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/appQoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateAppQoeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateAppQoeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateAppQoeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateCaptivePortalConfig patches a partners captive portal configs

	<div><strong>200</strong>: Success. Patched partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Incorrect language type</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigUpdateCaptivePortalConfig(params *PartnerConfigUpdateCaptivePortalConfigParams, opts ...ClientOption) (*PartnerConfigUpdateCaptivePortalConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateCaptivePortalConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateCaptivePortalConfig",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/captivePortal",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateCaptivePortalConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateCaptivePortalConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateCaptivePortalConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateFeatureFlags patches a partners feature flags

	<div><strong>200</strong>: Success. Patched partner config.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>403</strong>: Not allowed to update configuration</div>
<div><strong>422</strong>: Illegal field</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) PartnerConfigUpdateFeatureFlags(params *PartnerConfigUpdateFeatureFlagsParams, opts ...ClientOption) (*PartnerConfigUpdateFeatureFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateFeatureFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateFeatureFlags",
		Method:             "PATCH",
		PathPattern:        "/partnerConfig/{id}/featureFlags",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateFeatureFlagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateFeatureFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateFeatureFlagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdatePreCacScheduler updates partners pre c a c scheduler config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigUpdatePreCacScheduler(params *PartnerConfigUpdatePreCacSchedulerParams, opts ...ClientOption) (*PartnerConfigUpdatePreCacSchedulerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdatePreCacSchedulerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updatePreCacScheduler",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/pcs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdatePreCacSchedulerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdatePreCacSchedulerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdatePreCacSchedulerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateSamKnows updates partners sam knows config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigUpdateSamKnows(params *PartnerConfigUpdateSamKnowsParams, opts ...ClientOption) (*PartnerConfigUpdateSamKnowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateSamKnowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateSamKnows",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/samKnows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateSamKnowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateSamKnowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateSamKnowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateSipAlg updates partners sip alg config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigUpdateSipAlg(params *PartnerConfigUpdateSipAlgParams, opts ...ClientOption) (*PartnerConfigUpdateSipAlgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateSipAlgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateSipAlg",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/sipAlg",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateSipAlgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateSipAlgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateSipAlgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PartnerConfigUpdateSpeedTest updates partners speed test config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Invalid schema.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) PartnerConfigUpdateSpeedTest(params *PartnerConfigUpdateSpeedTestParams, opts ...ClientOption) (*PartnerConfigUpdateSpeedTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartnerConfigUpdateSpeedTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PartnerConfig.updateSpeedTest",
		Method:             "PUT",
		PathPattern:        "/partnerConfig/{id}/platform/speedTest",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PartnerConfigUpdateSpeedTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartnerConfigUpdateSpeedTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PartnerConfigUpdateSpeedTestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
