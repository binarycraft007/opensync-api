// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodeCustomCreateParams creates a new NodeCustomCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeCustomCreateParams() *NodeCustomCreateParams {
	return &NodeCustomCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeCustomCreateParamsWithTimeout creates a new NodeCustomCreateParams object
// with the ability to set a timeout on a request.
func NewNodeCustomCreateParamsWithTimeout(timeout time.Duration) *NodeCustomCreateParams {
	return &NodeCustomCreateParams{
		timeout: timeout,
	}
}

// NewNodeCustomCreateParamsWithContext creates a new NodeCustomCreateParams object
// with the ability to set a context for a request.
func NewNodeCustomCreateParamsWithContext(ctx context.Context) *NodeCustomCreateParams {
	return &NodeCustomCreateParams{
		Context: ctx,
	}
}

// NewNodeCustomCreateParamsWithHTTPClient creates a new NodeCustomCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeCustomCreateParamsWithHTTPClient(client *http.Client) *NodeCustomCreateParams {
	return &NodeCustomCreateParams{
		HTTPClient: client,
	}
}

/*
NodeCustomCreateParams contains all the parameters to send to the API endpoint

	for the node custom create operation.

	Typically these are written to a http.Request.
*/
type NodeCustomCreateParams struct {

	/* ClaimKeyRequired.

	   optional claimKeyRequired, default is false
	*/
	ClaimKeyRequired *bool

	/* Ethernet1Mac.

	   optional ethernet1Mac, must be a valid mac address
	*/
	Ethernet1Mac *string

	/* EthernetMac.

	   optional ethernetMac, must be a valid mac address
	*/
	EthernetMac *string

	// ID.
	ID string

	/* Model.

	   Node model ID value is required unless a Partner ID exemption has been configured
	*/
	Model *string

	/* PackID.

	   optional packId to group nodes
	*/
	PackID *string

	/* PartnerID.

	   Partner ID required on Plume production clouds
	*/
	PartnerID *string

	/* RadioMac24.

	   optional radioMac24, must be a valid mac address
	*/
	RadioMac24 *string

	/* RadioMac50.

	   optional radioMac50, must be a valid mac address
	*/
	RadioMac50 *string

	/* RadioMac50L.

	   optional radioMac50L, must be a valid mac address
	*/
	RadioMac50L *string

	/* RadioMac50U.

	   optional radioMac50U, must be a valid mac address
	*/
	RadioMac50U *string

	/* RadioMac60.

	   optional radioMac60, must be a valid mac address
	*/
	RadioMac60 *string

	// ResidentialGateway.
	ResidentialGateway bool

	/* SubscriptionRequired.

	   optional subscriptionRequired, default is false
	*/
	SubscriptionRequired *bool

	/* Thread.

	   optional Thread/Matter MAC addres
	*/
	Thread *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node custom create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeCustomCreateParams) WithDefaults() *NodeCustomCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node custom create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeCustomCreateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the node custom create params
func (o *NodeCustomCreateParams) WithTimeout(timeout time.Duration) *NodeCustomCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node custom create params
func (o *NodeCustomCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node custom create params
func (o *NodeCustomCreateParams) WithContext(ctx context.Context) *NodeCustomCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node custom create params
func (o *NodeCustomCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node custom create params
func (o *NodeCustomCreateParams) WithHTTPClient(client *http.Client) *NodeCustomCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node custom create params
func (o *NodeCustomCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClaimKeyRequired adds the claimKeyRequired to the node custom create params
func (o *NodeCustomCreateParams) WithClaimKeyRequired(claimKeyRequired *bool) *NodeCustomCreateParams {
	o.SetClaimKeyRequired(claimKeyRequired)
	return o
}

// SetClaimKeyRequired adds the claimKeyRequired to the node custom create params
func (o *NodeCustomCreateParams) SetClaimKeyRequired(claimKeyRequired *bool) {
	o.ClaimKeyRequired = claimKeyRequired
}

// WithEthernet1Mac adds the ethernet1Mac to the node custom create params
func (o *NodeCustomCreateParams) WithEthernet1Mac(ethernet1Mac *string) *NodeCustomCreateParams {
	o.SetEthernet1Mac(ethernet1Mac)
	return o
}

// SetEthernet1Mac adds the ethernet1Mac to the node custom create params
func (o *NodeCustomCreateParams) SetEthernet1Mac(ethernet1Mac *string) {
	o.Ethernet1Mac = ethernet1Mac
}

// WithEthernetMac adds the ethernetMac to the node custom create params
func (o *NodeCustomCreateParams) WithEthernetMac(ethernetMac *string) *NodeCustomCreateParams {
	o.SetEthernetMac(ethernetMac)
	return o
}

// SetEthernetMac adds the ethernetMac to the node custom create params
func (o *NodeCustomCreateParams) SetEthernetMac(ethernetMac *string) {
	o.EthernetMac = ethernetMac
}

// WithID adds the id to the node custom create params
func (o *NodeCustomCreateParams) WithID(id string) *NodeCustomCreateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the node custom create params
func (o *NodeCustomCreateParams) SetID(id string) {
	o.ID = id
}

// WithModel adds the model to the node custom create params
func (o *NodeCustomCreateParams) WithModel(model *string) *NodeCustomCreateParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the node custom create params
func (o *NodeCustomCreateParams) SetModel(model *string) {
	o.Model = model
}

// WithPackID adds the packID to the node custom create params
func (o *NodeCustomCreateParams) WithPackID(packID *string) *NodeCustomCreateParams {
	o.SetPackID(packID)
	return o
}

// SetPackID adds the packId to the node custom create params
func (o *NodeCustomCreateParams) SetPackID(packID *string) {
	o.PackID = packID
}

// WithPartnerID adds the partnerID to the node custom create params
func (o *NodeCustomCreateParams) WithPartnerID(partnerID *string) *NodeCustomCreateParams {
	o.SetPartnerID(partnerID)
	return o
}

// SetPartnerID adds the partnerId to the node custom create params
func (o *NodeCustomCreateParams) SetPartnerID(partnerID *string) {
	o.PartnerID = partnerID
}

// WithRadioMac24 adds the radioMac24 to the node custom create params
func (o *NodeCustomCreateParams) WithRadioMac24(radioMac24 *string) *NodeCustomCreateParams {
	o.SetRadioMac24(radioMac24)
	return o
}

// SetRadioMac24 adds the radioMac24 to the node custom create params
func (o *NodeCustomCreateParams) SetRadioMac24(radioMac24 *string) {
	o.RadioMac24 = radioMac24
}

// WithRadioMac50 adds the radioMac50 to the node custom create params
func (o *NodeCustomCreateParams) WithRadioMac50(radioMac50 *string) *NodeCustomCreateParams {
	o.SetRadioMac50(radioMac50)
	return o
}

// SetRadioMac50 adds the radioMac50 to the node custom create params
func (o *NodeCustomCreateParams) SetRadioMac50(radioMac50 *string) {
	o.RadioMac50 = radioMac50
}

// WithRadioMac50L adds the radioMac50L to the node custom create params
func (o *NodeCustomCreateParams) WithRadioMac50L(radioMac50L *string) *NodeCustomCreateParams {
	o.SetRadioMac50L(radioMac50L)
	return o
}

// SetRadioMac50L adds the radioMac50L to the node custom create params
func (o *NodeCustomCreateParams) SetRadioMac50L(radioMac50L *string) {
	o.RadioMac50L = radioMac50L
}

// WithRadioMac50U adds the radioMac50U to the node custom create params
func (o *NodeCustomCreateParams) WithRadioMac50U(radioMac50U *string) *NodeCustomCreateParams {
	o.SetRadioMac50U(radioMac50U)
	return o
}

// SetRadioMac50U adds the radioMac50U to the node custom create params
func (o *NodeCustomCreateParams) SetRadioMac50U(radioMac50U *string) {
	o.RadioMac50U = radioMac50U
}

// WithRadioMac60 adds the radioMac60 to the node custom create params
func (o *NodeCustomCreateParams) WithRadioMac60(radioMac60 *string) *NodeCustomCreateParams {
	o.SetRadioMac60(radioMac60)
	return o
}

// SetRadioMac60 adds the radioMac60 to the node custom create params
func (o *NodeCustomCreateParams) SetRadioMac60(radioMac60 *string) {
	o.RadioMac60 = radioMac60
}

// WithResidentialGateway adds the residentialGateway to the node custom create params
func (o *NodeCustomCreateParams) WithResidentialGateway(residentialGateway bool) *NodeCustomCreateParams {
	o.SetResidentialGateway(residentialGateway)
	return o
}

// SetResidentialGateway adds the residentialGateway to the node custom create params
func (o *NodeCustomCreateParams) SetResidentialGateway(residentialGateway bool) {
	o.ResidentialGateway = residentialGateway
}

// WithSubscriptionRequired adds the subscriptionRequired to the node custom create params
func (o *NodeCustomCreateParams) WithSubscriptionRequired(subscriptionRequired *bool) *NodeCustomCreateParams {
	o.SetSubscriptionRequired(subscriptionRequired)
	return o
}

// SetSubscriptionRequired adds the subscriptionRequired to the node custom create params
func (o *NodeCustomCreateParams) SetSubscriptionRequired(subscriptionRequired *bool) {
	o.SubscriptionRequired = subscriptionRequired
}

// WithThread adds the thread to the node custom create params
func (o *NodeCustomCreateParams) WithThread(thread *string) *NodeCustomCreateParams {
	o.SetThread(thread)
	return o
}

// SetThread adds the thread to the node custom create params
func (o *NodeCustomCreateParams) SetThread(thread *string) {
	o.Thread = thread
}

// WriteToRequest writes these params to a swagger request
func (o *NodeCustomCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClaimKeyRequired != nil {

		// form param claimKeyRequired
		var frClaimKeyRequired bool
		if o.ClaimKeyRequired != nil {
			frClaimKeyRequired = *o.ClaimKeyRequired
		}
		fClaimKeyRequired := swag.FormatBool(frClaimKeyRequired)
		if fClaimKeyRequired != "" {
			if err := r.SetFormParam("claimKeyRequired", fClaimKeyRequired); err != nil {
				return err
			}
		}
	}

	if o.Ethernet1Mac != nil {

		// form param ethernet1Mac
		var frEthernet1Mac string
		if o.Ethernet1Mac != nil {
			frEthernet1Mac = *o.Ethernet1Mac
		}
		fEthernet1Mac := frEthernet1Mac
		if fEthernet1Mac != "" {
			if err := r.SetFormParam("ethernet1Mac", fEthernet1Mac); err != nil {
				return err
			}
		}
	}

	if o.EthernetMac != nil {

		// form param ethernetMac
		var frEthernetMac string
		if o.EthernetMac != nil {
			frEthernetMac = *o.EthernetMac
		}
		fEthernetMac := frEthernetMac
		if fEthernetMac != "" {
			if err := r.SetFormParam("ethernetMac", fEthernetMac); err != nil {
				return err
			}
		}
	}

	// form param id
	frID := o.ID
	fID := frID
	if fID != "" {
		if err := r.SetFormParam("id", fID); err != nil {
			return err
		}
	}

	if o.Model != nil {

		// form param model
		var frModel string
		if o.Model != nil {
			frModel = *o.Model
		}
		fModel := frModel
		if fModel != "" {
			if err := r.SetFormParam("model", fModel); err != nil {
				return err
			}
		}
	}

	if o.PackID != nil {

		// form param packId
		var frPackID string
		if o.PackID != nil {
			frPackID = *o.PackID
		}
		fPackID := frPackID
		if fPackID != "" {
			if err := r.SetFormParam("packId", fPackID); err != nil {
				return err
			}
		}
	}

	if o.PartnerID != nil {

		// form param partnerId
		var frPartnerID string
		if o.PartnerID != nil {
			frPartnerID = *o.PartnerID
		}
		fPartnerID := frPartnerID
		if fPartnerID != "" {
			if err := r.SetFormParam("partnerId", fPartnerID); err != nil {
				return err
			}
		}
	}

	if o.RadioMac24 != nil {

		// form param radioMac24
		var frRadioMac24 string
		if o.RadioMac24 != nil {
			frRadioMac24 = *o.RadioMac24
		}
		fRadioMac24 := frRadioMac24
		if fRadioMac24 != "" {
			if err := r.SetFormParam("radioMac24", fRadioMac24); err != nil {
				return err
			}
		}
	}

	if o.RadioMac50 != nil {

		// form param radioMac50
		var frRadioMac50 string
		if o.RadioMac50 != nil {
			frRadioMac50 = *o.RadioMac50
		}
		fRadioMac50 := frRadioMac50
		if fRadioMac50 != "" {
			if err := r.SetFormParam("radioMac50", fRadioMac50); err != nil {
				return err
			}
		}
	}

	if o.RadioMac50L != nil {

		// form param radioMac50L
		var frRadioMac50L string
		if o.RadioMac50L != nil {
			frRadioMac50L = *o.RadioMac50L
		}
		fRadioMac50L := frRadioMac50L
		if fRadioMac50L != "" {
			if err := r.SetFormParam("radioMac50L", fRadioMac50L); err != nil {
				return err
			}
		}
	}

	if o.RadioMac50U != nil {

		// form param radioMac50U
		var frRadioMac50U string
		if o.RadioMac50U != nil {
			frRadioMac50U = *o.RadioMac50U
		}
		fRadioMac50U := frRadioMac50U
		if fRadioMac50U != "" {
			if err := r.SetFormParam("radioMac50U", fRadioMac50U); err != nil {
				return err
			}
		}
	}

	if o.RadioMac60 != nil {

		// form param radioMac60
		var frRadioMac60 string
		if o.RadioMac60 != nil {
			frRadioMac60 = *o.RadioMac60
		}
		fRadioMac60 := frRadioMac60
		if fRadioMac60 != "" {
			if err := r.SetFormParam("radioMac60", fRadioMac60); err != nil {
				return err
			}
		}
	}

	// form param residentialGateway
	frResidentialGateway := o.ResidentialGateway
	fResidentialGateway := swag.FormatBool(frResidentialGateway)
	if fResidentialGateway != "" {
		if err := r.SetFormParam("residentialGateway", fResidentialGateway); err != nil {
			return err
		}
	}

	if o.SubscriptionRequired != nil {

		// form param subscriptionRequired
		var frSubscriptionRequired bool
		if o.SubscriptionRequired != nil {
			frSubscriptionRequired = *o.SubscriptionRequired
		}
		fSubscriptionRequired := swag.FormatBool(frSubscriptionRequired)
		if fSubscriptionRequired != "" {
			if err := r.SetFormParam("subscriptionRequired", fSubscriptionRequired); err != nil {
				return err
			}
		}
	}

	if o.Thread != nil {

		// form param thread
		var frThread string
		if o.Thread != nil {
			frThread = *o.Thread
		}
		fThread := frThread
		if fThread != "" {
			if err := r.SetFormParam("thread", fThread); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
