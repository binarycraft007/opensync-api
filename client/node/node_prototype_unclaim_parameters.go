// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodePrototypeUnclaimParams creates a new NodePrototypeUnclaimParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodePrototypeUnclaimParams() *NodePrototypeUnclaimParams {
	return &NodePrototypeUnclaimParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodePrototypeUnclaimParamsWithTimeout creates a new NodePrototypeUnclaimParams object
// with the ability to set a timeout on a request.
func NewNodePrototypeUnclaimParamsWithTimeout(timeout time.Duration) *NodePrototypeUnclaimParams {
	return &NodePrototypeUnclaimParams{
		timeout: timeout,
	}
}

// NewNodePrototypeUnclaimParamsWithContext creates a new NodePrototypeUnclaimParams object
// with the ability to set a context for a request.
func NewNodePrototypeUnclaimParamsWithContext(ctx context.Context) *NodePrototypeUnclaimParams {
	return &NodePrototypeUnclaimParams{
		Context: ctx,
	}
}

// NewNodePrototypeUnclaimParamsWithHTTPClient creates a new NodePrototypeUnclaimParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodePrototypeUnclaimParamsWithHTTPClient(client *http.Client) *NodePrototypeUnclaimParams {
	return &NodePrototypeUnclaimParams{
		HTTPClient: client,
	}
}

/*
NodePrototypeUnclaimParams contains all the parameters to send to the API endpoint

	for the node prototype unclaim operation.

	Typically these are written to a http.Request.
*/
type NodePrototypeUnclaimParams struct {

	// ForceUnclaim.
	ForceUnclaim *bool

	/* ID.

	   Node id
	*/
	ID string

	// PreservePackID.
	PreservePackID *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node prototype unclaim params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodePrototypeUnclaimParams) WithDefaults() *NodePrototypeUnclaimParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node prototype unclaim params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodePrototypeUnclaimParams) SetDefaults() {
	var (
		forceUnclaimDefault = bool(false)

		preservePackIDDefault = bool(false)
	)

	val := NodePrototypeUnclaimParams{
		ForceUnclaim:   &forceUnclaimDefault,
		PreservePackID: &preservePackIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithTimeout(timeout time.Duration) *NodePrototypeUnclaimParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithContext(ctx context.Context) *NodePrototypeUnclaimParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithHTTPClient(client *http.Client) *NodePrototypeUnclaimParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceUnclaim adds the forceUnclaim to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithForceUnclaim(forceUnclaim *bool) *NodePrototypeUnclaimParams {
	o.SetForceUnclaim(forceUnclaim)
	return o
}

// SetForceUnclaim adds the forceUnclaim to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetForceUnclaim(forceUnclaim *bool) {
	o.ForceUnclaim = forceUnclaim
}

// WithID adds the id to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithID(id string) *NodePrototypeUnclaimParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetID(id string) {
	o.ID = id
}

// WithPreservePackID adds the preservePackID to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) WithPreservePackID(preservePackID *bool) *NodePrototypeUnclaimParams {
	o.SetPreservePackID(preservePackID)
	return o
}

// SetPreservePackID adds the preservePackId to the node prototype unclaim params
func (o *NodePrototypeUnclaimParams) SetPreservePackID(preservePackID *bool) {
	o.PreservePackID = preservePackID
}

// WriteToRequest writes these params to a swagger request
func (o *NodePrototypeUnclaimParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceUnclaim != nil {

		// form param forceUnclaim
		var frForceUnclaim bool
		if o.ForceUnclaim != nil {
			frForceUnclaim = *o.ForceUnclaim
		}
		fForceUnclaim := swag.FormatBool(frForceUnclaim)
		if fForceUnclaim != "" {
			if err := r.SetFormParam("forceUnclaim", fForceUnclaim); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.PreservePackID != nil {

		// form param preservePackId
		var frPreservePackID bool
		if o.PreservePackID != nil {
			frPreservePackID = *o.PreservePackID
		}
		fPreservePackID := swag.FormatBool(frPreservePackID)
		if fPreservePackID != "" {
			if err := r.SetFormParam("preservePackId", fPreservePackID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
