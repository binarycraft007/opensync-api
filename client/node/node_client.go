// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new node API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for node API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NodeCount(params *NodeCountParams, opts ...ClientOption) (*NodeCountOK, error)

	NodeCustomCreate(params *NodeCustomCreateParams, opts ...ClientOption) (*NodeCustomCreateOK, error)

	NodeFind(params *NodeFindParams, opts ...ClientOption) (*NodeFindOK, error)

	NodeFindByID(params *NodeFindByIDParams, opts ...ClientOption) (*NodeFindByIDOK, error)

	NodePrototypeGetCustomerByNodeID(params *NodePrototypeGetCustomerByNodeIDParams, opts ...ClientOption) (*NodePrototypeGetCustomerByNodeIDOK, error)

	NodePrototypeGetMqttBroker(params *NodePrototypeGetMqttBrokerParams, opts ...ClientOption) (*NodePrototypeGetMqttBrokerOK, error)

	NodePrototypeUnclaim(params *NodePrototypeUnclaimParams, opts ...ClientOption) (*NodePrototypeUnclaimNoContent, error)

	NodePrototypeVerifyEmailPasswordlessToken(params *NodePrototypeVerifyEmailPasswordlessTokenParams, opts ...ClientOption) (*NodePrototypeVerifyEmailPasswordlessTokenOK, error)

	NodeUpdatePackID(params *NodeUpdatePackIDParams, opts ...ClientOption) (*NodeUpdatePackIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NodeCount counts instances of the model matched by where from the data source
*/
func (a *Client) NodeCount(params *NodeCountParams, opts ...ClientOption) (*NodeCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.count",
		Method:             "GET",
		PathPattern:        "/Nodes/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodeCustomCreate imports a node into the global shared inventory does n o t claim

	<div><strong>200</strong>: Success, node imported.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>409</strong>: NodeId already exists in shared inventory.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) NodeCustomCreate(params *NodeCustomCreateParams, opts ...ClientOption) (*NodeCustomCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeCustomCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.customCreate",
		Method:             "POST",
		PathPattern:        "/Nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeCustomCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeCustomCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeCustomCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodeFind finds all instances of the model matched by filter from the data source
*/
func (a *Client) NodeFind(params *NodeFindParams, opts ...ClientOption) (*NodeFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.find",
		Method:             "GET",
		PathPattern:        "/Nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeFindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeFindDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodeFindByID finds a model instance by id from the data source
*/
func (a *Client) NodeFindByID(params *NodeFindByIDParams, opts ...ClientOption) (*NodeFindByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeFindByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.findById",
		Method:             "GET",
		PathPattern:        "/Nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeFindByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeFindByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeFindByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodePrototypeGetCustomerByNodeID gets the customer info with the node Id

	<div><strong>200</strong>: Success, return the customer info.</div>

<div><strong>403</strong>: Public ip not matched.</div>
<div><strong>404</strong>: NodeId not found.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) NodePrototypeGetCustomerByNodeID(params *NodePrototypeGetCustomerByNodeIDParams, opts ...ClientOption) (*NodePrototypeGetCustomerByNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodePrototypeGetCustomerByNodeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.prototype.getCustomerByNodeId",
		Method:             "GET",
		PathPattern:        "/Nodes/{id}/customer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodePrototypeGetCustomerByNodeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodePrototypeGetCustomerByNodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodePrototypeGetCustomerByNodeIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodePrototypeGetMqttBroker gets the m q t t broker address of the node

	<div><strong>200</strong>: Success, return the customer info.</div>

<div><strong>404</strong>: NodeId not found.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) NodePrototypeGetMqttBroker(params *NodePrototypeGetMqttBrokerParams, opts ...ClientOption) (*NodePrototypeGetMqttBrokerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodePrototypeGetMqttBrokerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.prototype.getMqttBroker",
		Method:             "GET",
		PathPattern:        "/Nodes/{id}/mqtt",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodePrototypeGetMqttBrokerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodePrototypeGetMqttBrokerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodePrototypeGetMqttBrokerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodePrototypeUnclaim unclaims a node by a group admin or admin

	<div><strong>204</strong>: Success, node changed.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) NodePrototypeUnclaim(params *NodePrototypeUnclaimParams, opts ...ClientOption) (*NodePrototypeUnclaimNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodePrototypeUnclaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.prototype.unclaim",
		Method:             "DELETE",
		PathPattern:        "/Nodes/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodePrototypeUnclaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodePrototypeUnclaimNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodePrototypeUnclaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodePrototypeVerifyEmailPasswordlessToken updates the name and email for customer and generate email token and app token

	<div><strong>200</strong>: Success, return the customer info.</div>

<div><strong>403</strong>: Public ip not matched.</div>
<div><strong>404</strong>: NodeId not found.</div>
<div><strong>422</strong>: Email must be defined and valid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) NodePrototypeVerifyEmailPasswordlessToken(params *NodePrototypeVerifyEmailPasswordlessTokenParams, opts ...ClientOption) (*NodePrototypeVerifyEmailPasswordlessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodePrototypeVerifyEmailPasswordlessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.prototype.verifyEmailPasswordlessToken",
		Method:             "POST",
		PathPattern:        "/Nodes/{id}/passwordLessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodePrototypeVerifyEmailPasswordlessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodePrototypeVerifyEmailPasswordlessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodePrototypeVerifyEmailPasswordlessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	NodeUpdatePackID renames an unclaimed node pod s pack Id in plume s global inventory

	<div><strong>200</strong>: Success, a job well done.</div>

<div><strong>400</strong>: Bad request, packId is undefined or empty string.</div>
<div><strong>404</strong>: NodeId not found.</div>
<div><strong>422</strong>: PackId is invalid (too long).</div>
<div><strong>423</strong>: PackId cannot be changed for a claimed pod.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) NodeUpdatePackID(params *NodeUpdatePackIDParams, opts ...ClientOption) (*NodeUpdatePackIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodeUpdatePackIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Node.updatePackId",
		Method:             "PUT",
		PathPattern:        "/Nodes/{id}/packId",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NodeUpdatePackIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodeUpdatePackIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodeUpdatePackIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
