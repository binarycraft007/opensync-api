// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams creates a new CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams() *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	return &CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithTimeout creates a new CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithTimeout(timeout time.Duration) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	return &CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithContext creates a new CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithContext(ctx context.Context) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	return &CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithHTTPClient creates a new CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParamsWithHTTPClient(client *http.Client) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	return &CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams contains all the parameters to send to the API endpoint

	for the customer prototype get company info captive portal network operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// URL.
	URL *string

	/* URLType.

	   only 'domain' currently supported
	*/
	URLType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype get company info captive portal network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithDefaults() *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype get company info captive portal network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithTimeout(timeout time.Duration) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithContext(ctx context.Context) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithHTTPClient(client *http.Client) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithID(id string) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithLocationID(locationID string) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithURL adds the url to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithURL(url *string) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetURL(url *string) {
	o.URL = url
}

// WithURLType adds the uRLType to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WithURLType(uRLType *string) *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams {
	o.SetURLType(uRLType)
	return o
}

// SetURLType adds the urlType to the customer prototype get company info captive portal network params
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) SetURLType(uRLType *string) {
	o.URLType = uRLType
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.URL != nil {

		// form param url
		var frURL string
		if o.URL != nil {
			frURL = *o.URL
		}
		fURL := frURL
		if fURL != "" {
			if err := r.SetFormParam("url", fURL); err != nil {
				return err
			}
		}
	}

	if o.URLType != nil {

		// form param urlType
		var frURLType string
		if o.URLType != nil {
			frURLType = *o.URLType
		}
		fURLType := frURLType
		if fURLType != "" {
			if err := r.SetFormParam("urlType", fURLType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
