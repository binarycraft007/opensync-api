// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePatchWifiNetworkParams creates a new CustomerPrototypePatchWifiNetworkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchWifiNetworkParams() *CustomerPrototypePatchWifiNetworkParams {
	return &CustomerPrototypePatchWifiNetworkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchWifiNetworkParamsWithTimeout creates a new CustomerPrototypePatchWifiNetworkParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchWifiNetworkParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchWifiNetworkParams {
	return &CustomerPrototypePatchWifiNetworkParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchWifiNetworkParamsWithContext creates a new CustomerPrototypePatchWifiNetworkParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchWifiNetworkParamsWithContext(ctx context.Context) *CustomerPrototypePatchWifiNetworkParams {
	return &CustomerPrototypePatchWifiNetworkParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchWifiNetworkParamsWithHTTPClient creates a new CustomerPrototypePatchWifiNetworkParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchWifiNetworkParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchWifiNetworkParams {
	return &CustomerPrototypePatchWifiNetworkParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchWifiNetworkParams contains all the parameters to send to the API endpoint

	for the customer prototype patch wifi network operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchWifiNetworkParams struct {

	/* Enabled.

	   enabled:true for active WiFi radios, enabled:false to turn `off` all WiFi radios
	*/
	Enabled *bool

	/* FastTransition.

	   auto || enable || disable
	*/
	FastTransition *string

	/* GroupRekey.

	   auto || enable || disable
	*/
	GroupRekey *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	/* MinWifiMode24.

	   auto || 11b || 11g || 11n
	*/
	MinWifiMode24 *string

	/* PrivateMode.

	   Stop collecting user info like DNS-Queries, UserAgent etc
	*/
	PrivateMode *bool

	// Ssid.
	Ssid *string

	// Uapsd.
	Uapsd *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch wifi network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchWifiNetworkParams) WithDefaults() *CustomerPrototypePatchWifiNetworkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch wifi network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchWifiNetworkParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchWifiNetworkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithContext(ctx context.Context) *CustomerPrototypePatchWifiNetworkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchWifiNetworkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithEnabled(enabled *bool) *CustomerPrototypePatchWifiNetworkParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithFastTransition adds the fastTransition to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithFastTransition(fastTransition *string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetFastTransition(fastTransition)
	return o
}

// SetFastTransition adds the fastTransition to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetFastTransition(fastTransition *string) {
	o.FastTransition = fastTransition
}

// WithGroupRekey adds the groupRekey to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithGroupRekey(groupRekey *string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetGroupRekey(groupRekey)
	return o
}

// SetGroupRekey adds the groupRekey to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetGroupRekey(groupRekey *string) {
	o.GroupRekey = groupRekey
}

// WithID adds the id to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithID(id string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithLocationID(locationID string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMinWifiMode24 adds the minWifiMode24 to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithMinWifiMode24(minWifiMode24 *string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetMinWifiMode24(minWifiMode24)
	return o
}

// SetMinWifiMode24 adds the minWifiMode24 to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetMinWifiMode24(minWifiMode24 *string) {
	o.MinWifiMode24 = minWifiMode24
}

// WithPrivateMode adds the privateMode to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithPrivateMode(privateMode *bool) *CustomerPrototypePatchWifiNetworkParams {
	o.SetPrivateMode(privateMode)
	return o
}

// SetPrivateMode adds the privateMode to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetPrivateMode(privateMode *bool) {
	o.PrivateMode = privateMode
}

// WithSsid adds the ssid to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithSsid(ssid *string) *CustomerPrototypePatchWifiNetworkParams {
	o.SetSsid(ssid)
	return o
}

// SetSsid adds the ssid to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetSsid(ssid *string) {
	o.Ssid = ssid
}

// WithUapsd adds the uapsd to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) WithUapsd(uapsd *bool) *CustomerPrototypePatchWifiNetworkParams {
	o.SetUapsd(uapsd)
	return o
}

// SetUapsd adds the uapsd to the customer prototype patch wifi network params
func (o *CustomerPrototypePatchWifiNetworkParams) SetUapsd(uapsd *bool) {
	o.Uapsd = uapsd
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchWifiNetworkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enabled != nil {

		// form param enabled
		var frEnabled bool
		if o.Enabled != nil {
			frEnabled = *o.Enabled
		}
		fEnabled := swag.FormatBool(frEnabled)
		if fEnabled != "" {
			if err := r.SetFormParam("enabled", fEnabled); err != nil {
				return err
			}
		}
	}

	if o.FastTransition != nil {

		// form param fastTransition
		var frFastTransition string
		if o.FastTransition != nil {
			frFastTransition = *o.FastTransition
		}
		fFastTransition := frFastTransition
		if fFastTransition != "" {
			if err := r.SetFormParam("fastTransition", fFastTransition); err != nil {
				return err
			}
		}
	}

	if o.GroupRekey != nil {

		// form param groupRekey
		var frGroupRekey string
		if o.GroupRekey != nil {
			frGroupRekey = *o.GroupRekey
		}
		fGroupRekey := frGroupRekey
		if fGroupRekey != "" {
			if err := r.SetFormParam("groupRekey", fGroupRekey); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.MinWifiMode24 != nil {

		// form param minWifiMode24
		var frMinWifiMode24 string
		if o.MinWifiMode24 != nil {
			frMinWifiMode24 = *o.MinWifiMode24
		}
		fMinWifiMode24 := frMinWifiMode24
		if fMinWifiMode24 != "" {
			if err := r.SetFormParam("minWifiMode24", fMinWifiMode24); err != nil {
				return err
			}
		}
	}

	if o.PrivateMode != nil {

		// form param privateMode
		var frPrivateMode bool
		if o.PrivateMode != nil {
			frPrivateMode = *o.PrivateMode
		}
		fPrivateMode := swag.FormatBool(frPrivateMode)
		if fPrivateMode != "" {
			if err := r.SetFormParam("privateMode", fPrivateMode); err != nil {
				return err
			}
		}
	}

	if o.Ssid != nil {

		// form param ssid
		var frSsid string
		if o.Ssid != nil {
			frSsid = *o.Ssid
		}
		fSsid := frSsid
		if fSsid != "" {
			if err := r.SetFormParam("ssid", fSsid); err != nil {
				return err
			}
		}
	}

	if o.Uapsd != nil {

		// form param uapsd
		var frUapsd bool
		if o.Uapsd != nil {
			frUapsd = *o.Uapsd
		}
		fUapsd := swag.FormatBool(frUapsd)
		if fUapsd != "" {
			if err := r.SetFormParam("uapsd", fUapsd); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
