// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePatchOptimizationsParams creates a new CustomerPrototypePatchOptimizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchOptimizationsParams() *CustomerPrototypePatchOptimizationsParams {
	return &CustomerPrototypePatchOptimizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchOptimizationsParamsWithTimeout creates a new CustomerPrototypePatchOptimizationsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchOptimizationsParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchOptimizationsParams {
	return &CustomerPrototypePatchOptimizationsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchOptimizationsParamsWithContext creates a new CustomerPrototypePatchOptimizationsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchOptimizationsParamsWithContext(ctx context.Context) *CustomerPrototypePatchOptimizationsParams {
	return &CustomerPrototypePatchOptimizationsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchOptimizationsParamsWithHTTPClient creates a new CustomerPrototypePatchOptimizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchOptimizationsParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchOptimizationsParams {
	return &CustomerPrototypePatchOptimizationsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchOptimizationsParams contains all the parameters to send to the API endpoint

	for the customer prototype patch optimizations operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchOptimizationsParams struct {

	/* Auto.

	   defaults to true

	   Format: JSON
	*/
	Auto *string

	/* DfsMode.

	   enum of values include: auto, enable, disable, demo, HomeNonDFSChannels, usDfs, deviceAware
	*/
	DfsMode *string

	/* HopPenalty.

	   enum of values include: auto, low, medium, high
	*/
	HopPenalty *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	/* PreCACScheduler.

	   enum of values include: auto, enable, disable

	   Default: "auto"
	*/
	PreCACScheduler *string

	/* Prefer160MhzMode.

	   enum of values include: auto, enable, disable
	*/
	Prefer160MhzMode *string

	/* ZeroWaitDfsMode.

	   enum of values include: auto, enable, disable
	*/
	ZeroWaitDfsMode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch optimizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchOptimizationsParams) WithDefaults() *CustomerPrototypePatchOptimizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch optimizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchOptimizationsParams) SetDefaults() {
	var (
		preCACSchedulerDefault = string("auto")
	)

	val := CustomerPrototypePatchOptimizationsParams{
		PreCACScheduler: &preCACSchedulerDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchOptimizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithContext(ctx context.Context) *CustomerPrototypePatchOptimizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchOptimizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuto adds the auto to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithAuto(auto *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetAuto(auto)
	return o
}

// SetAuto adds the auto to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetAuto(auto *string) {
	o.Auto = auto
}

// WithDfsMode adds the dfsMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithDfsMode(dfsMode *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetDfsMode(dfsMode)
	return o
}

// SetDfsMode adds the dfsMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetDfsMode(dfsMode *string) {
	o.DfsMode = dfsMode
}

// WithHopPenalty adds the hopPenalty to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithHopPenalty(hopPenalty *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetHopPenalty(hopPenalty)
	return o
}

// SetHopPenalty adds the hopPenalty to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetHopPenalty(hopPenalty *string) {
	o.HopPenalty = hopPenalty
}

// WithID adds the id to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithID(id string) *CustomerPrototypePatchOptimizationsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithLocationID(locationID string) *CustomerPrototypePatchOptimizationsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithPreCACScheduler adds the preCACScheduler to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithPreCACScheduler(preCACScheduler *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetPreCACScheduler(preCACScheduler)
	return o
}

// SetPreCACScheduler adds the preCACScheduler to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetPreCACScheduler(preCACScheduler *string) {
	o.PreCACScheduler = preCACScheduler
}

// WithPrefer160MhzMode adds the prefer160MhzMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithPrefer160MhzMode(prefer160MhzMode *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetPrefer160MhzMode(prefer160MhzMode)
	return o
}

// SetPrefer160MhzMode adds the prefer160MhzMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetPrefer160MhzMode(prefer160MhzMode *string) {
	o.Prefer160MhzMode = prefer160MhzMode
}

// WithZeroWaitDfsMode adds the zeroWaitDfsMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) WithZeroWaitDfsMode(zeroWaitDfsMode *string) *CustomerPrototypePatchOptimizationsParams {
	o.SetZeroWaitDfsMode(zeroWaitDfsMode)
	return o
}

// SetZeroWaitDfsMode adds the zeroWaitDfsMode to the customer prototype patch optimizations params
func (o *CustomerPrototypePatchOptimizationsParams) SetZeroWaitDfsMode(zeroWaitDfsMode *string) {
	o.ZeroWaitDfsMode = zeroWaitDfsMode
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchOptimizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Auto != nil {

		// form param auto
		var frAuto string
		if o.Auto != nil {
			frAuto = *o.Auto
		}
		fAuto := frAuto
		if fAuto != "" {
			if err := r.SetFormParam("auto", fAuto); err != nil {
				return err
			}
		}
	}

	if o.DfsMode != nil {

		// form param dfsMode
		var frDfsMode string
		if o.DfsMode != nil {
			frDfsMode = *o.DfsMode
		}
		fDfsMode := frDfsMode
		if fDfsMode != "" {
			if err := r.SetFormParam("dfsMode", fDfsMode); err != nil {
				return err
			}
		}
	}

	if o.HopPenalty != nil {

		// form param hopPenalty
		var frHopPenalty string
		if o.HopPenalty != nil {
			frHopPenalty = *o.HopPenalty
		}
		fHopPenalty := frHopPenalty
		if fHopPenalty != "" {
			if err := r.SetFormParam("hopPenalty", fHopPenalty); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.PreCACScheduler != nil {

		// form param preCACScheduler
		var frPreCACScheduler string
		if o.PreCACScheduler != nil {
			frPreCACScheduler = *o.PreCACScheduler
		}
		fPreCACScheduler := frPreCACScheduler
		if fPreCACScheduler != "" {
			if err := r.SetFormParam("preCACScheduler", fPreCACScheduler); err != nil {
				return err
			}
		}
	}

	if o.Prefer160MhzMode != nil {

		// form param prefer160MhzMode
		var frPrefer160MhzMode string
		if o.Prefer160MhzMode != nil {
			frPrefer160MhzMode = *o.Prefer160MhzMode
		}
		fPrefer160MhzMode := frPrefer160MhzMode
		if fPrefer160MhzMode != "" {
			if err := r.SetFormParam("prefer160MhzMode", fPrefer160MhzMode); err != nil {
				return err
			}
		}
	}

	if o.ZeroWaitDfsMode != nil {

		// form param zeroWaitDfsMode
		var frZeroWaitDfsMode string
		if o.ZeroWaitDfsMode != nil {
			frZeroWaitDfsMode = *o.ZeroWaitDfsMode
		}
		fZeroWaitDfsMode := frZeroWaitDfsMode
		if fZeroWaitDfsMode != "" {
			if err := r.SetFormParam("zeroWaitDfsMode", fZeroWaitDfsMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
