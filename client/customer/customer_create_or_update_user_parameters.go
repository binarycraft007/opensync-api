// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerCreateOrUpdateUserParams creates a new CustomerCreateOrUpdateUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerCreateOrUpdateUserParams() *CustomerCreateOrUpdateUserParams {
	return &CustomerCreateOrUpdateUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerCreateOrUpdateUserParamsWithTimeout creates a new CustomerCreateOrUpdateUserParams object
// with the ability to set a timeout on a request.
func NewCustomerCreateOrUpdateUserParamsWithTimeout(timeout time.Duration) *CustomerCreateOrUpdateUserParams {
	return &CustomerCreateOrUpdateUserParams{
		timeout: timeout,
	}
}

// NewCustomerCreateOrUpdateUserParamsWithContext creates a new CustomerCreateOrUpdateUserParams object
// with the ability to set a context for a request.
func NewCustomerCreateOrUpdateUserParamsWithContext(ctx context.Context) *CustomerCreateOrUpdateUserParams {
	return &CustomerCreateOrUpdateUserParams{
		Context: ctx,
	}
}

// NewCustomerCreateOrUpdateUserParamsWithHTTPClient creates a new CustomerCreateOrUpdateUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerCreateOrUpdateUserParamsWithHTTPClient(client *http.Client) *CustomerCreateOrUpdateUserParams {
	return &CustomerCreateOrUpdateUserParams{
		HTTPClient: client,
	}
}

/*
CustomerCreateOrUpdateUserParams contains all the parameters to send to the API endpoint

	for the customer create or update user operation.

	Typically these are written to a http.Request.
*/
type CustomerCreateOrUpdateUserParams struct {

	// Email.
	Email string

	// Groups.
	//
	// Format: JSON
	Groups *string

	// Name.
	Name string

	// Roles.
	//
	// Format: JSON
	Roles string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer create or update user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerCreateOrUpdateUserParams) WithDefaults() *CustomerCreateOrUpdateUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer create or update user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerCreateOrUpdateUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithTimeout(timeout time.Duration) *CustomerCreateOrUpdateUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithContext(ctx context.Context) *CustomerCreateOrUpdateUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithHTTPClient(client *http.Client) *CustomerCreateOrUpdateUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithEmail(email string) *CustomerCreateOrUpdateUserParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetEmail(email string) {
	o.Email = email
}

// WithGroups adds the groups to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithGroups(groups *string) *CustomerCreateOrUpdateUserParams {
	o.SetGroups(groups)
	return o
}

// SetGroups adds the groups to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetGroups(groups *string) {
	o.Groups = groups
}

// WithName adds the name to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithName(name string) *CustomerCreateOrUpdateUserParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetName(name string) {
	o.Name = name
}

// WithRoles adds the roles to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) WithRoles(roles string) *CustomerCreateOrUpdateUserParams {
	o.SetRoles(roles)
	return o
}

// SetRoles adds the roles to the customer create or update user params
func (o *CustomerCreateOrUpdateUserParams) SetRoles(roles string) {
	o.Roles = roles
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerCreateOrUpdateUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param email
	frEmail := o.Email
	fEmail := frEmail
	if fEmail != "" {
		if err := r.SetFormParam("email", fEmail); err != nil {
			return err
		}
	}

	if o.Groups != nil {

		// form param groups
		var frGroups string
		if o.Groups != nil {
			frGroups = *o.Groups
		}
		fGroups := frGroups
		if fGroups != "" {
			if err := r.SetFormParam("groups", fGroups); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	// form param roles
	frRoles := o.Roles
	fRoles := frRoles
	if fRoles != "" {
		if err := r.SetFormParam("roles", fRoles); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
