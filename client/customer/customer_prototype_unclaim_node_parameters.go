// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeUnclaimNodeParams creates a new CustomerPrototypeUnclaimNodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeUnclaimNodeParams() *CustomerPrototypeUnclaimNodeParams {
	return &CustomerPrototypeUnclaimNodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeUnclaimNodeParamsWithTimeout creates a new CustomerPrototypeUnclaimNodeParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeUnclaimNodeParamsWithTimeout(timeout time.Duration) *CustomerPrototypeUnclaimNodeParams {
	return &CustomerPrototypeUnclaimNodeParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeUnclaimNodeParamsWithContext creates a new CustomerPrototypeUnclaimNodeParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeUnclaimNodeParamsWithContext(ctx context.Context) *CustomerPrototypeUnclaimNodeParams {
	return &CustomerPrototypeUnclaimNodeParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeUnclaimNodeParamsWithHTTPClient creates a new CustomerPrototypeUnclaimNodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeUnclaimNodeParamsWithHTTPClient(client *http.Client) *CustomerPrototypeUnclaimNodeParams {
	return &CustomerPrototypeUnclaimNodeParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeUnclaimNodeParams contains all the parameters to send to the API endpoint

	for the customer prototype unclaim node operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeUnclaimNodeParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// NodeID.
	NodeID string

	/* PreservePackID.

	   packId should remain the same
	*/
	PreservePackID *bool

	/* RemoveAccountID.

	   delete account id on the inventory node
	*/
	RemoveAccountID *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype unclaim node params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeUnclaimNodeParams) WithDefaults() *CustomerPrototypeUnclaimNodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype unclaim node params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeUnclaimNodeParams) SetDefaults() {
	var (
		removeAccountIDDefault = bool(false)
	)

	val := CustomerPrototypeUnclaimNodeParams{
		RemoveAccountID: &removeAccountIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithTimeout(timeout time.Duration) *CustomerPrototypeUnclaimNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithContext(ctx context.Context) *CustomerPrototypeUnclaimNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithHTTPClient(client *http.Client) *CustomerPrototypeUnclaimNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithID(id string) *CustomerPrototypeUnclaimNodeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithLocationID(locationID string) *CustomerPrototypeUnclaimNodeParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithNodeID adds the nodeID to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithNodeID(nodeID string) *CustomerPrototypeUnclaimNodeParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetNodeID(nodeID string) {
	o.NodeID = nodeID
}

// WithPreservePackID adds the preservePackID to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithPreservePackID(preservePackID *bool) *CustomerPrototypeUnclaimNodeParams {
	o.SetPreservePackID(preservePackID)
	return o
}

// SetPreservePackID adds the preservePackId to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetPreservePackID(preservePackID *bool) {
	o.PreservePackID = preservePackID
}

// WithRemoveAccountID adds the removeAccountID to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) WithRemoveAccountID(removeAccountID *bool) *CustomerPrototypeUnclaimNodeParams {
	o.SetRemoveAccountID(removeAccountID)
	return o
}

// SetRemoveAccountID adds the removeAccountId to the customer prototype unclaim node params
func (o *CustomerPrototypeUnclaimNodeParams) SetRemoveAccountID(removeAccountID *bool) {
	o.RemoveAccountID = removeAccountID
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeUnclaimNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// path param nodeId
	if err := r.SetPathParam("nodeId", o.NodeID); err != nil {
		return err
	}

	if o.PreservePackID != nil {

		// form param preservePackId
		var frPreservePackID bool
		if o.PreservePackID != nil {
			frPreservePackID = *o.PreservePackID
		}
		fPreservePackID := swag.FormatBool(frPreservePackID)
		if fPreservePackID != "" {
			if err := r.SetFormParam("preservePackId", fPreservePackID); err != nil {
				return err
			}
		}
	}

	if o.RemoveAccountID != nil {

		// form param removeAccountId
		var frRemoveAccountID bool
		if o.RemoveAccountID != nil {
			frRemoveAccountID = *o.RemoveAccountID
		}
		fRemoveAccountID := swag.FormatBool(frRemoveAccountID)
		if fRemoveAccountID != "" {
			if err := r.SetFormParam("removeAccountId", fRemoveAccountID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
