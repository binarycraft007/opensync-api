// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePatchDeviceGroupParams creates a new CustomerPrototypePatchDeviceGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchDeviceGroupParams() *CustomerPrototypePatchDeviceGroupParams {
	return &CustomerPrototypePatchDeviceGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchDeviceGroupParamsWithTimeout creates a new CustomerPrototypePatchDeviceGroupParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchDeviceGroupParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchDeviceGroupParams {
	return &CustomerPrototypePatchDeviceGroupParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchDeviceGroupParamsWithContext creates a new CustomerPrototypePatchDeviceGroupParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchDeviceGroupParamsWithContext(ctx context.Context) *CustomerPrototypePatchDeviceGroupParams {
	return &CustomerPrototypePatchDeviceGroupParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchDeviceGroupParamsWithHTTPClient creates a new CustomerPrototypePatchDeviceGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchDeviceGroupParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchDeviceGroupParams {
	return &CustomerPrototypePatchDeviceGroupParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchDeviceGroupParams contains all the parameters to send to the API endpoint

	for the customer prototype patch device group operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchDeviceGroupParams struct {

	// Devices.
	//
	// Format: JSON
	Devices *string

	// GroupID.
	GroupID string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	// Name.
	Name *string

	// NetworkID.
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch device group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchDeviceGroupParams) WithDefaults() *CustomerPrototypePatchDeviceGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch device group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchDeviceGroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchDeviceGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithContext(ctx context.Context) *CustomerPrototypePatchDeviceGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchDeviceGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevices adds the devices to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithDevices(devices *string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetDevices(devices)
	return o
}

// SetDevices adds the devices to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetDevices(devices *string) {
	o.Devices = devices
}

// WithGroupID adds the groupID to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithGroupID(groupID string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithID adds the id to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithID(id string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithLocationID(locationID string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithName adds the name to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithName(name *string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetName(name *string) {
	o.Name = name
}

// WithNetworkID adds the networkID to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) WithNetworkID(networkID string) *CustomerPrototypePatchDeviceGroupParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the customer prototype patch device group params
func (o *CustomerPrototypePatchDeviceGroupParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchDeviceGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devices != nil {

		// form param devices
		var frDevices string
		if o.Devices != nil {
			frDevices = *o.Devices
		}
		fDevices := frDevices
		if fDevices != "" {
			if err := r.SetFormParam("devices", fDevices); err != nil {
				return err
			}
		}
	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
