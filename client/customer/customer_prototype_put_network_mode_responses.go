// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePutNetworkModeReader is a Reader for the CustomerPrototypePutNetworkMode structure.
type CustomerPrototypePutNetworkModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePutNetworkModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePutNetworkModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePutNetworkModeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePutNetworkModeOK creates a CustomerPrototypePutNetworkModeOK with default headers values
func NewCustomerPrototypePutNetworkModeOK() *CustomerPrototypePutNetworkModeOK {
	return &CustomerPrototypePutNetworkModeOK{}
}

/*
CustomerPrototypePutNetworkModeOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePutNetworkModeOK struct {
	Payload *CustomerPrototypePutNetworkModeOKBody
}

// IsSuccess returns true when this customer prototype put network mode o k response has a 2xx status code
func (o *CustomerPrototypePutNetworkModeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype put network mode o k response has a 3xx status code
func (o *CustomerPrototypePutNetworkModeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype put network mode o k response has a 4xx status code
func (o *CustomerPrototypePutNetworkModeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype put network mode o k response has a 5xx status code
func (o *CustomerPrototypePutNetworkModeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype put network mode o k response a status code equal to that given
func (o *CustomerPrototypePutNetworkModeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype put network mode o k response
func (o *CustomerPrototypePutNetworkModeOK) Code() int {
	return 200
}

func (o *CustomerPrototypePutNetworkModeOK) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/networkMode][%d] customerPrototypePutNetworkModeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutNetworkModeOK) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/networkMode][%d] customerPrototypePutNetworkModeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutNetworkModeOK) GetPayload() *CustomerPrototypePutNetworkModeOKBody {
	return o.Payload
}

func (o *CustomerPrototypePutNetworkModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CustomerPrototypePutNetworkModeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePutNetworkModeDefault creates a CustomerPrototypePutNetworkModeDefault with default headers values
func NewCustomerPrototypePutNetworkModeDefault(code int) *CustomerPrototypePutNetworkModeDefault {
	return &CustomerPrototypePutNetworkModeDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePutNetworkModeDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePutNetworkModeDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype put network mode default response has a 2xx status code
func (o *CustomerPrototypePutNetworkModeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype put network mode default response has a 3xx status code
func (o *CustomerPrototypePutNetworkModeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype put network mode default response has a 4xx status code
func (o *CustomerPrototypePutNetworkModeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype put network mode default response has a 5xx status code
func (o *CustomerPrototypePutNetworkModeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype put network mode default response a status code equal to that given
func (o *CustomerPrototypePutNetworkModeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype put network mode default response
func (o *CustomerPrototypePutNetworkModeDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePutNetworkModeDefault) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/networkMode][%d] Customer.prototype.putNetworkMode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutNetworkModeDefault) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/networkMode][%d] Customer.prototype.putNetworkMode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutNetworkModeDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePutNetworkModeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CustomerPrototypePutNetworkModeOKBody customer prototype put network mode o k body
swagger:model CustomerPrototypePutNetworkModeOKBody
*/
type CustomerPrototypePutNetworkModeOKBody struct {

	// location
	Location *models.Location `json:"location,omitempty"`
}

// Validate validates this customer prototype put network mode o k body
func (o *CustomerPrototypePutNetworkModeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CustomerPrototypePutNetworkModeOKBody) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerPrototypePutNetworkModeOK" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerPrototypePutNetworkModeOK" + "." + "location")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this customer prototype put network mode o k body based on the context it is used
func (o *CustomerPrototypePutNetworkModeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CustomerPrototypePutNetworkModeOKBody) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {
		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerPrototypePutNetworkModeOK" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customerPrototypePutNetworkModeOK" + "." + "location")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CustomerPrototypePutNetworkModeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CustomerPrototypePutNetworkModeOKBody) UnmarshalBinary(b []byte) error {
	var res CustomerPrototypePutNetworkModeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
