// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerCountReader is a Reader for the CustomerCount structure.
type CustomerCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerCountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerCountOK creates a CustomerCountOK with default headers values
func NewCustomerCountOK() *CustomerCountOK {
	return &CustomerCountOK{}
}

/*
CustomerCountOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerCountOK struct {
	Payload *CustomerCountOKBody
}

// IsSuccess returns true when this customer count o k response has a 2xx status code
func (o *CustomerCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer count o k response has a 3xx status code
func (o *CustomerCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer count o k response has a 4xx status code
func (o *CustomerCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer count o k response has a 5xx status code
func (o *CustomerCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer count o k response a status code equal to that given
func (o *CustomerCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer count o k response
func (o *CustomerCountOK) Code() int {
	return 200
}

func (o *CustomerCountOK) Error() string {
	return fmt.Sprintf("[GET /Customers/count][%d] customerCountOK  %+v", 200, o.Payload)
}

func (o *CustomerCountOK) String() string {
	return fmt.Sprintf("[GET /Customers/count][%d] customerCountOK  %+v", 200, o.Payload)
}

func (o *CustomerCountOK) GetPayload() *CustomerCountOKBody {
	return o.Payload
}

func (o *CustomerCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CustomerCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerCountDefault creates a CustomerCountDefault with default headers values
func NewCustomerCountDefault(code int) *CustomerCountDefault {
	return &CustomerCountDefault{
		_statusCode: code,
	}
}

/*
CustomerCountDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerCountDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer count default response has a 2xx status code
func (o *CustomerCountDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer count default response has a 3xx status code
func (o *CustomerCountDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer count default response has a 4xx status code
func (o *CustomerCountDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer count default response has a 5xx status code
func (o *CustomerCountDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer count default response a status code equal to that given
func (o *CustomerCountDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer count default response
func (o *CustomerCountDefault) Code() int {
	return o._statusCode
}

func (o *CustomerCountDefault) Error() string {
	return fmt.Sprintf("[GET /Customers/count][%d] Customer.count default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerCountDefault) String() string {
	return fmt.Sprintf("[GET /Customers/count][%d] Customer.count default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerCountDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerCountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CustomerCountOKBody customer count o k body
swagger:model CustomerCountOKBody
*/
type CustomerCountOKBody struct {

	// count
	Count float64 `json:"count,omitempty"`
}

// Validate validates this customer count o k body
func (o *CustomerCountOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this customer count o k body based on context it is used
func (o *CustomerCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CustomerCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CustomerCountOKBody) UnmarshalBinary(b []byte) error {
	var res CustomerCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
