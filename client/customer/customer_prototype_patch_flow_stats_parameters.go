// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePatchFlowStatsParams creates a new CustomerPrototypePatchFlowStatsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchFlowStatsParams() *CustomerPrototypePatchFlowStatsParams {
	return &CustomerPrototypePatchFlowStatsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchFlowStatsParamsWithTimeout creates a new CustomerPrototypePatchFlowStatsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchFlowStatsParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchFlowStatsParams {
	return &CustomerPrototypePatchFlowStatsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchFlowStatsParamsWithContext creates a new CustomerPrototypePatchFlowStatsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchFlowStatsParamsWithContext(ctx context.Context) *CustomerPrototypePatchFlowStatsParams {
	return &CustomerPrototypePatchFlowStatsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchFlowStatsParamsWithHTTPClient creates a new CustomerPrototypePatchFlowStatsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchFlowStatsParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchFlowStatsParams {
	return &CustomerPrototypePatchFlowStatsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchFlowStatsParams contains all the parameters to send to the API endpoint

	for the customer prototype patch flow stats operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchFlowStatsParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	/* InterfaceStatsConfig.

	   auto || enable || disable
	*/
	InterfaceStatsConfig *string

	/* IotDeviceConfig.

	   auto || enable || disable
	*/
	IotDeviceConfig *string

	/* LanIotDeviceConfig.

	   auto || enable || disable
	*/
	LanIotDeviceConfig *string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	/* ScreenDeviceConfig.

	   auto || enable || disable
	*/
	ScreenDeviceConfig *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch flow stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchFlowStatsParams) WithDefaults() *CustomerPrototypePatchFlowStatsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch flow stats params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchFlowStatsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchFlowStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithContext(ctx context.Context) *CustomerPrototypePatchFlowStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchFlowStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithID(id string) *CustomerPrototypePatchFlowStatsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetID(id string) {
	o.ID = id
}

// WithInterfaceStatsConfig adds the interfaceStatsConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithInterfaceStatsConfig(interfaceStatsConfig *string) *CustomerPrototypePatchFlowStatsParams {
	o.SetInterfaceStatsConfig(interfaceStatsConfig)
	return o
}

// SetInterfaceStatsConfig adds the interfaceStatsConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetInterfaceStatsConfig(interfaceStatsConfig *string) {
	o.InterfaceStatsConfig = interfaceStatsConfig
}

// WithIotDeviceConfig adds the iotDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithIotDeviceConfig(iotDeviceConfig *string) *CustomerPrototypePatchFlowStatsParams {
	o.SetIotDeviceConfig(iotDeviceConfig)
	return o
}

// SetIotDeviceConfig adds the iotDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetIotDeviceConfig(iotDeviceConfig *string) {
	o.IotDeviceConfig = iotDeviceConfig
}

// WithLanIotDeviceConfig adds the lanIotDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithLanIotDeviceConfig(lanIotDeviceConfig *string) *CustomerPrototypePatchFlowStatsParams {
	o.SetLanIotDeviceConfig(lanIotDeviceConfig)
	return o
}

// SetLanIotDeviceConfig adds the lanIotDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetLanIotDeviceConfig(lanIotDeviceConfig *string) {
	o.LanIotDeviceConfig = lanIotDeviceConfig
}

// WithLocationID adds the locationID to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithLocationID(locationID string) *CustomerPrototypePatchFlowStatsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithScreenDeviceConfig adds the screenDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) WithScreenDeviceConfig(screenDeviceConfig *string) *CustomerPrototypePatchFlowStatsParams {
	o.SetScreenDeviceConfig(screenDeviceConfig)
	return o
}

// SetScreenDeviceConfig adds the screenDeviceConfig to the customer prototype patch flow stats params
func (o *CustomerPrototypePatchFlowStatsParams) SetScreenDeviceConfig(screenDeviceConfig *string) {
	o.ScreenDeviceConfig = screenDeviceConfig
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchFlowStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.InterfaceStatsConfig != nil {

		// form param interfaceStatsConfig
		var frInterfaceStatsConfig string
		if o.InterfaceStatsConfig != nil {
			frInterfaceStatsConfig = *o.InterfaceStatsConfig
		}
		fInterfaceStatsConfig := frInterfaceStatsConfig
		if fInterfaceStatsConfig != "" {
			if err := r.SetFormParam("interfaceStatsConfig", fInterfaceStatsConfig); err != nil {
				return err
			}
		}
	}

	if o.IotDeviceConfig != nil {

		// form param iotDeviceConfig
		var frIotDeviceConfig string
		if o.IotDeviceConfig != nil {
			frIotDeviceConfig = *o.IotDeviceConfig
		}
		fIotDeviceConfig := frIotDeviceConfig
		if fIotDeviceConfig != "" {
			if err := r.SetFormParam("iotDeviceConfig", fIotDeviceConfig); err != nil {
				return err
			}
		}
	}

	if o.LanIotDeviceConfig != nil {

		// form param lanIotDeviceConfig
		var frLanIotDeviceConfig string
		if o.LanIotDeviceConfig != nil {
			frLanIotDeviceConfig = *o.LanIotDeviceConfig
		}
		fLanIotDeviceConfig := frLanIotDeviceConfig
		if fLanIotDeviceConfig != "" {
			if err := r.SetFormParam("lanIotDeviceConfig", fLanIotDeviceConfig); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.ScreenDeviceConfig != nil {

		// form param screenDeviceConfig
		var frScreenDeviceConfig string
		if o.ScreenDeviceConfig != nil {
			frScreenDeviceConfig = *o.ScreenDeviceConfig
		}
		fScreenDeviceConfig := frScreenDeviceConfig
		if fScreenDeviceConfig != "" {
			if err := r.SetFormParam("screenDeviceConfig", fScreenDeviceConfig); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
