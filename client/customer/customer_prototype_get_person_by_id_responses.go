// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypeGetPersonByIDReader is a Reader for the CustomerPrototypeGetPersonByID structure.
type CustomerPrototypeGetPersonByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypeGetPersonByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypeGetPersonByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypeGetPersonByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypeGetPersonByIDOK creates a CustomerPrototypeGetPersonByIDOK with default headers values
func NewCustomerPrototypeGetPersonByIDOK() *CustomerPrototypeGetPersonByIDOK {
	return &CustomerPrototypeGetPersonByIDOK{}
}

/*
CustomerPrototypeGetPersonByIDOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypeGetPersonByIDOK struct {
	Payload *models.Person
}

// IsSuccess returns true when this customer prototype get person by Id o k response has a 2xx status code
func (o *CustomerPrototypeGetPersonByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype get person by Id o k response has a 3xx status code
func (o *CustomerPrototypeGetPersonByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype get person by Id o k response has a 4xx status code
func (o *CustomerPrototypeGetPersonByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype get person by Id o k response has a 5xx status code
func (o *CustomerPrototypeGetPersonByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype get person by Id o k response a status code equal to that given
func (o *CustomerPrototypeGetPersonByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype get person by Id o k response
func (o *CustomerPrototypeGetPersonByIDOK) Code() int {
	return 200
}

func (o *CustomerPrototypeGetPersonByIDOK) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/persons/{personId}][%d] customerPrototypeGetPersonByIdOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeGetPersonByIDOK) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/persons/{personId}][%d] customerPrototypeGetPersonByIdOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeGetPersonByIDOK) GetPayload() *models.Person {
	return o.Payload
}

func (o *CustomerPrototypeGetPersonByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Person)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypeGetPersonByIDDefault creates a CustomerPrototypeGetPersonByIDDefault with default headers values
func NewCustomerPrototypeGetPersonByIDDefault(code int) *CustomerPrototypeGetPersonByIDDefault {
	return &CustomerPrototypeGetPersonByIDDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypeGetPersonByIDDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypeGetPersonByIDDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype get person by Id default response has a 2xx status code
func (o *CustomerPrototypeGetPersonByIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype get person by Id default response has a 3xx status code
func (o *CustomerPrototypeGetPersonByIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype get person by Id default response has a 4xx status code
func (o *CustomerPrototypeGetPersonByIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype get person by Id default response has a 5xx status code
func (o *CustomerPrototypeGetPersonByIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype get person by Id default response a status code equal to that given
func (o *CustomerPrototypeGetPersonByIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype get person by Id default response
func (o *CustomerPrototypeGetPersonByIDDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypeGetPersonByIDDefault) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/persons/{personId}][%d] Customer.prototype.getPersonById default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeGetPersonByIDDefault) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/persons/{personId}][%d] Customer.prototype.getPersonById default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeGetPersonByIDDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypeGetPersonByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
