// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeGetHomeAwayLocationEventsParams creates a new CustomerPrototypeGetHomeAwayLocationEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeGetHomeAwayLocationEventsParams() *CustomerPrototypeGetHomeAwayLocationEventsParams {
	return &CustomerPrototypeGetHomeAwayLocationEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithTimeout creates a new CustomerPrototypeGetHomeAwayLocationEventsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithTimeout(timeout time.Duration) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	return &CustomerPrototypeGetHomeAwayLocationEventsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithContext creates a new CustomerPrototypeGetHomeAwayLocationEventsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithContext(ctx context.Context) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	return &CustomerPrototypeGetHomeAwayLocationEventsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithHTTPClient creates a new CustomerPrototypeGetHomeAwayLocationEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeGetHomeAwayLocationEventsParamsWithHTTPClient(client *http.Client) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	return &CustomerPrototypeGetHomeAwayLocationEventsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeGetHomeAwayLocationEventsParams contains all the parameters to send to the API endpoint

	for the customer prototype get home away location events operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeGetHomeAwayLocationEventsParams struct {

	/* From.

	   UTC unix epoch ms, defaults to 1 week ago

	   Format: double
	*/
	From *float64

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	/* Limit.

	   Maximum number of events to return. Defaults to 100

	   Format: double
	*/
	Limit *float64

	// LocationID.
	//
	// Format: JSON
	LocationID string

	/* To.

	   UTC unix epoch ms, defaults to now

	   Format: double
	*/
	To *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype get home away location events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithDefaults() *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype get home away location events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithTimeout(timeout time.Duration) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithContext(ctx context.Context) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithHTTPClient(client *http.Client) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithFrom(from *float64) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetFrom(from *float64) {
	o.From = from
}

// WithID adds the id to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithID(id string) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetID(id string) {
	o.ID = id
}

// WithLimit adds the limit to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithLimit(limit *float64) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithLocationID(locationID string) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithTo adds the to to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WithTo(to *float64) *CustomerPrototypeGetHomeAwayLocationEventsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the customer prototype get home away location events params
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) SetTo(to *float64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeGetHomeAwayLocationEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom float64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatFloat64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo float64

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatFloat64(qrTo)
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
