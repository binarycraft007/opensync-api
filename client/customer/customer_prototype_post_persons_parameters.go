// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePostPersonsParams creates a new CustomerPrototypePostPersonsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePostPersonsParams() *CustomerPrototypePostPersonsParams {
	return &CustomerPrototypePostPersonsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePostPersonsParamsWithTimeout creates a new CustomerPrototypePostPersonsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePostPersonsParamsWithTimeout(timeout time.Duration) *CustomerPrototypePostPersonsParams {
	return &CustomerPrototypePostPersonsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePostPersonsParamsWithContext creates a new CustomerPrototypePostPersonsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePostPersonsParamsWithContext(ctx context.Context) *CustomerPrototypePostPersonsParams {
	return &CustomerPrototypePostPersonsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePostPersonsParamsWithHTTPClient creates a new CustomerPrototypePostPersonsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePostPersonsParamsWithHTTPClient(client *http.Client) *CustomerPrototypePostPersonsParams {
	return &CustomerPrototypePostPersonsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePostPersonsParams contains all the parameters to send to the API endpoint

	for the customer prototype post persons operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePostPersonsParams struct {

	/* AssignedDevices.

	   mac addresses of devices assigned to this Person

	   Format: JSON
	*/
	AssignedDevices *string

	/* Email.

	   email
	*/
	Email *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	/* ImageID.

	   unique identifier for referencing a Person's hosted profile image, defaults are PROFILE_MAN and PROFILE_WOMAN
	*/
	ImageID string

	// LocationID.
	LocationID string

	// Nickname.
	Nickname string

	/* Permission.

	   Permission object for creating a manager for the location

	   Format: JSON
	*/
	Permission *string

	/* Profile.

	   Profile object contains 'type' field - valid values: 'employee'

	   Format: JSON
	*/
	Profile *string

	/* ServiceLinking.

	   serviceLinking object that links this Person object to a 3rd party's Person

	   Format: JSON
	*/
	ServiceLinking *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype post persons params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostPersonsParams) WithDefaults() *CustomerPrototypePostPersonsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype post persons params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostPersonsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithTimeout(timeout time.Duration) *CustomerPrototypePostPersonsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithContext(ctx context.Context) *CustomerPrototypePostPersonsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithHTTPClient(client *http.Client) *CustomerPrototypePostPersonsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssignedDevices adds the assignedDevices to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithAssignedDevices(assignedDevices *string) *CustomerPrototypePostPersonsParams {
	o.SetAssignedDevices(assignedDevices)
	return o
}

// SetAssignedDevices adds the assignedDevices to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetAssignedDevices(assignedDevices *string) {
	o.AssignedDevices = assignedDevices
}

// WithEmail adds the email to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithEmail(email *string) *CustomerPrototypePostPersonsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetEmail(email *string) {
	o.Email = email
}

// WithID adds the id to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithID(id string) *CustomerPrototypePostPersonsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetID(id string) {
	o.ID = id
}

// WithImageID adds the imageID to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithImageID(imageID string) *CustomerPrototypePostPersonsParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetImageID(imageID string) {
	o.ImageID = imageID
}

// WithLocationID adds the locationID to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithLocationID(locationID string) *CustomerPrototypePostPersonsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithNickname adds the nickname to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithNickname(nickname string) *CustomerPrototypePostPersonsParams {
	o.SetNickname(nickname)
	return o
}

// SetNickname adds the nickname to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetNickname(nickname string) {
	o.Nickname = nickname
}

// WithPermission adds the permission to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithPermission(permission *string) *CustomerPrototypePostPersonsParams {
	o.SetPermission(permission)
	return o
}

// SetPermission adds the permission to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetPermission(permission *string) {
	o.Permission = permission
}

// WithProfile adds the profile to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithProfile(profile *string) *CustomerPrototypePostPersonsParams {
	o.SetProfile(profile)
	return o
}

// SetProfile adds the profile to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetProfile(profile *string) {
	o.Profile = profile
}

// WithServiceLinking adds the serviceLinking to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) WithServiceLinking(serviceLinking *string) *CustomerPrototypePostPersonsParams {
	o.SetServiceLinking(serviceLinking)
	return o
}

// SetServiceLinking adds the serviceLinking to the customer prototype post persons params
func (o *CustomerPrototypePostPersonsParams) SetServiceLinking(serviceLinking *string) {
	o.ServiceLinking = serviceLinking
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePostPersonsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssignedDevices != nil {

		// form param assignedDevices
		var frAssignedDevices string
		if o.AssignedDevices != nil {
			frAssignedDevices = *o.AssignedDevices
		}
		fAssignedDevices := frAssignedDevices
		if fAssignedDevices != "" {
			if err := r.SetFormParam("assignedDevices", fAssignedDevices); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// form param email
		var frEmail string
		if o.Email != nil {
			frEmail = *o.Email
		}
		fEmail := frEmail
		if fEmail != "" {
			if err := r.SetFormParam("email", fEmail); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param imageId
	frImageID := o.ImageID
	fImageID := frImageID
	if fImageID != "" {
		if err := r.SetFormParam("imageId", fImageID); err != nil {
			return err
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// form param nickname
	frNickname := o.Nickname
	fNickname := frNickname
	if fNickname != "" {
		if err := r.SetFormParam("nickname", fNickname); err != nil {
			return err
		}
	}

	if o.Permission != nil {

		// form param permission
		var frPermission string
		if o.Permission != nil {
			frPermission = *o.Permission
		}
		fPermission := frPermission
		if fPermission != "" {
			if err := r.SetFormParam("permission", fPermission); err != nil {
				return err
			}
		}
	}

	if o.Profile != nil {

		// form param profile
		var frProfile string
		if o.Profile != nil {
			frProfile = *o.Profile
		}
		fProfile := frProfile
		if fProfile != "" {
			if err := r.SetFormParam("profile", fProfile); err != nil {
				return err
			}
		}
	}

	if o.ServiceLinking != nil {

		// form param serviceLinking
		var frServiceLinking string
		if o.ServiceLinking != nil {
			frServiceLinking = *o.ServiceLinking
		}
		fServiceLinking := frServiceLinking
		if fServiceLinking != "" {
			if err := r.SetFormParam("serviceLinking", fServiceLinking); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
