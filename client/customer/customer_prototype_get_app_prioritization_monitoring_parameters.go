// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeGetAppPrioritizationMonitoringParams creates a new CustomerPrototypeGetAppPrioritizationMonitoringParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeGetAppPrioritizationMonitoringParams() *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	return &CustomerPrototypeGetAppPrioritizationMonitoringParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithTimeout creates a new CustomerPrototypeGetAppPrioritizationMonitoringParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithTimeout(timeout time.Duration) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	return &CustomerPrototypeGetAppPrioritizationMonitoringParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithContext creates a new CustomerPrototypeGetAppPrioritizationMonitoringParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithContext(ctx context.Context) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	return &CustomerPrototypeGetAppPrioritizationMonitoringParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithHTTPClient creates a new CustomerPrototypeGetAppPrioritizationMonitoringParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeGetAppPrioritizationMonitoringParamsWithHTTPClient(client *http.Client) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	return &CustomerPrototypeGetAppPrioritizationMonitoringParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeGetAppPrioritizationMonitoringParams contains all the parameters to send to the API endpoint

	for the customer prototype get app prioritization monitoring operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeGetAppPrioritizationMonitoringParams struct {

	/* EndTime.

	   format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC

	   Format: date-time
	*/
	EndTime strfmt.DateTime

	/* Granularity.

	   any of the values - total/15 minutes/1 hour/1 day
	*/
	Granularity *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	/* Limit.

	   Maximum number of devices to return.

	   Format: double
	*/
	Limit *float64

	// LocationID.
	LocationID string

	/* Macs.

	   array of macs[]

	   Format: JSON
	*/
	Macs *string

	/* SortOrder.

	   TxBytes"|| "RxBytes
	*/
	SortOrder *string

	/* StartTime.

	   format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in UTC

	   Format: date-time
	*/
	StartTime strfmt.DateTime

	/* TrafficClasses.

	   array of trafficClasses[]

	   Format: JSON
	*/
	TrafficClasses *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype get app prioritization monitoring params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithDefaults() *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype get app prioritization monitoring params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithTimeout(timeout time.Duration) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithContext(ctx context.Context) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithHTTPClient(client *http.Client) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithEndTime(endTime strfmt.DateTime) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetEndTime(endTime strfmt.DateTime) {
	o.EndTime = endTime
}

// WithGranularity adds the granularity to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithGranularity(granularity *string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetGranularity(granularity)
	return o
}

// SetGranularity adds the granularity to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetGranularity(granularity *string) {
	o.Granularity = granularity
}

// WithID adds the id to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithID(id string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetID(id string) {
	o.ID = id
}

// WithLimit adds the limit to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithLimit(limit *float64) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithLocationID adds the locationID to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithLocationID(locationID string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMacs adds the macs to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithMacs(macs *string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetMacs(macs)
	return o
}

// SetMacs adds the macs to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetMacs(macs *string) {
	o.Macs = macs
}

// WithSortOrder adds the sortOrder to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithSortOrder(sortOrder *string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStartTime adds the startTime to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithStartTime(startTime strfmt.DateTime) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetStartTime(startTime strfmt.DateTime) {
	o.StartTime = startTime
}

// WithTrafficClasses adds the trafficClasses to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WithTrafficClasses(trafficClasses *string) *CustomerPrototypeGetAppPrioritizationMonitoringParams {
	o.SetTrafficClasses(trafficClasses)
	return o
}

// SetTrafficClasses adds the trafficClasses to the customer prototype get app prioritization monitoring params
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) SetTrafficClasses(trafficClasses *string) {
	o.TrafficClasses = trafficClasses
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeGetAppPrioritizationMonitoringParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param endTime
	frEndTime := o.EndTime
	fEndTime := frEndTime.String()
	if fEndTime != "" {
		if err := r.SetFormParam("endTime", fEndTime); err != nil {
			return err
		}
	}

	if o.Granularity != nil {

		// form param granularity
		var frGranularity string
		if o.Granularity != nil {
			frGranularity = *o.Granularity
		}
		fGranularity := frGranularity
		if fGranularity != "" {
			if err := r.SetFormParam("granularity", fGranularity); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Limit != nil {

		// form param limit
		var frLimit float64
		if o.Limit != nil {
			frLimit = *o.Limit
		}
		fLimit := swag.FormatFloat64(frLimit)
		if fLimit != "" {
			if err := r.SetFormParam("limit", fLimit); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Macs != nil {

		// form param macs
		var frMacs string
		if o.Macs != nil {
			frMacs = *o.Macs
		}
		fMacs := frMacs
		if fMacs != "" {
			if err := r.SetFormParam("macs", fMacs); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// form param sortOrder
		var frSortOrder string
		if o.SortOrder != nil {
			frSortOrder = *o.SortOrder
		}
		fSortOrder := frSortOrder
		if fSortOrder != "" {
			if err := r.SetFormParam("sortOrder", fSortOrder); err != nil {
				return err
			}
		}
	}

	// form param startTime
	frStartTime := o.StartTime
	fStartTime := frStartTime.String()
	if fStartTime != "" {
		if err := r.SetFormParam("startTime", fStartTime); err != nil {
			return err
		}
	}

	if o.TrafficClasses != nil {

		// form param trafficClasses
		var frTrafficClasses string
		if o.TrafficClasses != nil {
			frTrafficClasses = *o.TrafficClasses
		}
		fTrafficClasses := frTrafficClasses
		if fTrafficClasses != "" {
			if err := r.SetFormParam("trafficClasses", fTrafficClasses); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
