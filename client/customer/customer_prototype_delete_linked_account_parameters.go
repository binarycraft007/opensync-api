// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypeDeleteLinkedAccountParams creates a new CustomerPrototypeDeleteLinkedAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeDeleteLinkedAccountParams() *CustomerPrototypeDeleteLinkedAccountParams {
	return &CustomerPrototypeDeleteLinkedAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeDeleteLinkedAccountParamsWithTimeout creates a new CustomerPrototypeDeleteLinkedAccountParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeDeleteLinkedAccountParamsWithTimeout(timeout time.Duration) *CustomerPrototypeDeleteLinkedAccountParams {
	return &CustomerPrototypeDeleteLinkedAccountParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeDeleteLinkedAccountParamsWithContext creates a new CustomerPrototypeDeleteLinkedAccountParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeDeleteLinkedAccountParamsWithContext(ctx context.Context) *CustomerPrototypeDeleteLinkedAccountParams {
	return &CustomerPrototypeDeleteLinkedAccountParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeDeleteLinkedAccountParamsWithHTTPClient creates a new CustomerPrototypeDeleteLinkedAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeDeleteLinkedAccountParamsWithHTTPClient(client *http.Client) *CustomerPrototypeDeleteLinkedAccountParams {
	return &CustomerPrototypeDeleteLinkedAccountParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeDeleteLinkedAccountParams contains all the parameters to send to the API endpoint

	for the customer prototype delete linked account operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeDeleteLinkedAccountParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Provider.
	Provider string

	// UserID.
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype delete linked account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithDefaults() *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype delete linked account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithTimeout(timeout time.Duration) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithContext(ctx context.Context) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithHTTPClient(client *http.Client) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithID(id string) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetID(id string) {
	o.ID = id
}

// WithProvider adds the provider to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithProvider(provider string) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetProvider(provider string) {
	o.Provider = provider
}

// WithUserID adds the userID to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) WithUserID(userID string) *CustomerPrototypeDeleteLinkedAccountParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the customer prototype delete linked account params
func (o *CustomerPrototypeDeleteLinkedAccountParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeDeleteLinkedAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param provider
	if err := r.SetPathParam("provider", o.Provider); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
