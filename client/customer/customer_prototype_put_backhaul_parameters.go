// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePutBackhaulParams creates a new CustomerPrototypePutBackhaulParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePutBackhaulParams() *CustomerPrototypePutBackhaulParams {
	return &CustomerPrototypePutBackhaulParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePutBackhaulParamsWithTimeout creates a new CustomerPrototypePutBackhaulParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePutBackhaulParamsWithTimeout(timeout time.Duration) *CustomerPrototypePutBackhaulParams {
	return &CustomerPrototypePutBackhaulParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePutBackhaulParamsWithContext creates a new CustomerPrototypePutBackhaulParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePutBackhaulParamsWithContext(ctx context.Context) *CustomerPrototypePutBackhaulParams {
	return &CustomerPrototypePutBackhaulParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePutBackhaulParamsWithHTTPClient creates a new CustomerPrototypePutBackhaulParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePutBackhaulParamsWithHTTPClient(client *http.Client) *CustomerPrototypePutBackhaulParams {
	return &CustomerPrototypePutBackhaulParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePutBackhaulParams contains all the parameters to send to the API endpoint

	for the customer prototype put backhaul operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePutBackhaulParams struct {

	/* DynamicBeacon.

	   A valid state for the dynamic beaconing setting. Either auto, enable, or disable
	*/
	DynamicBeacon *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	/* Mode.

	   auto || enable || disable
	*/
	Mode *string

	/* Wds.

	   auto || enable || disable
	*/
	Wds *string

	/* WpaMode.

	   auto || psk2 || sae-mixed
	*/
	WpaMode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype put backhaul params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutBackhaulParams) WithDefaults() *CustomerPrototypePutBackhaulParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype put backhaul params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutBackhaulParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithTimeout(timeout time.Duration) *CustomerPrototypePutBackhaulParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithContext(ctx context.Context) *CustomerPrototypePutBackhaulParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithHTTPClient(client *http.Client) *CustomerPrototypePutBackhaulParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDynamicBeacon adds the dynamicBeacon to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithDynamicBeacon(dynamicBeacon *string) *CustomerPrototypePutBackhaulParams {
	o.SetDynamicBeacon(dynamicBeacon)
	return o
}

// SetDynamicBeacon adds the dynamicBeacon to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetDynamicBeacon(dynamicBeacon *string) {
	o.DynamicBeacon = dynamicBeacon
}

// WithID adds the id to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithID(id string) *CustomerPrototypePutBackhaulParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithLocationID(locationID string) *CustomerPrototypePutBackhaulParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMode adds the mode to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithMode(mode *string) *CustomerPrototypePutBackhaulParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithWds adds the wds to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithWds(wds *string) *CustomerPrototypePutBackhaulParams {
	o.SetWds(wds)
	return o
}

// SetWds adds the wds to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetWds(wds *string) {
	o.Wds = wds
}

// WithWpaMode adds the wpaMode to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) WithWpaMode(wpaMode *string) *CustomerPrototypePutBackhaulParams {
	o.SetWpaMode(wpaMode)
	return o
}

// SetWpaMode adds the wpaMode to the customer prototype put backhaul params
func (o *CustomerPrototypePutBackhaulParams) SetWpaMode(wpaMode *string) {
	o.WpaMode = wpaMode
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePutBackhaulParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DynamicBeacon != nil {

		// form param dynamicBeacon
		var frDynamicBeacon string
		if o.DynamicBeacon != nil {
			frDynamicBeacon = *o.DynamicBeacon
		}
		fDynamicBeacon := frDynamicBeacon
		if fDynamicBeacon != "" {
			if err := r.SetFormParam("dynamicBeacon", fDynamicBeacon); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Mode != nil {

		// form param mode
		var frMode string
		if o.Mode != nil {
			frMode = *o.Mode
		}
		fMode := frMode
		if fMode != "" {
			if err := r.SetFormParam("mode", fMode); err != nil {
				return err
			}
		}
	}

	if o.Wds != nil {

		// form param wds
		var frWds string
		if o.Wds != nil {
			frWds = *o.Wds
		}
		fWds := frWds
		if fWds != "" {
			if err := r.SetFormParam("wds", fWds); err != nil {
				return err
			}
		}
	}

	if o.WpaMode != nil {

		// form param wpaMode
		var frWpaMode string
		if o.WpaMode != nil {
			frWpaMode = *o.WpaMode
		}
		fWpaMode := frWpaMode
		if fWpaMode != "" {
			if err := r.SetFormParam("wpaMode", fWpaMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
