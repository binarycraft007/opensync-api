// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerCustomCreateParams creates a new CustomerCustomCreateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerCustomCreateParams() *CustomerCustomCreateParams {
	return &CustomerCustomCreateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerCustomCreateParamsWithTimeout creates a new CustomerCustomCreateParams object
// with the ability to set a timeout on a request.
func NewCustomerCustomCreateParamsWithTimeout(timeout time.Duration) *CustomerCustomCreateParams {
	return &CustomerCustomCreateParams{
		timeout: timeout,
	}
}

// NewCustomerCustomCreateParamsWithContext creates a new CustomerCustomCreateParams object
// with the ability to set a context for a request.
func NewCustomerCustomCreateParamsWithContext(ctx context.Context) *CustomerCustomCreateParams {
	return &CustomerCustomCreateParams{
		Context: ctx,
	}
}

// NewCustomerCustomCreateParamsWithHTTPClient creates a new CustomerCustomCreateParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerCustomCreateParamsWithHTTPClient(client *http.Client) *CustomerCustomCreateParams {
	return &CustomerCustomCreateParams{
		HTTPClient: client,
	}
}

/*
CustomerCustomCreateParams contains all the parameters to send to the API endpoint

	for the customer custom create operation.

	Typically these are written to a http.Request.
*/
type CustomerCustomCreateParams struct {

	// Email.
	Email *string

	/* Location.

	   Location object should contain field 'name' (String)

	   Format: JSON
	*/
	Location *string

	// Name.
	Name *string

	// NotificationOptions.
	//
	// Format: JSON
	NotificationOptions *string

	// PartnerID.
	PartnerID *string

	// Password.
	Password *string

	// PasswordLessToken.
	PasswordLessToken *bool

	/* Person.

	   Person object should contain field 'imageId'  and object profile with field type (String)

	   Format: JSON
	*/
	Person *string

	// Source.
	//
	// Default: "customCreate"
	Source *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer custom create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerCustomCreateParams) WithDefaults() *CustomerCustomCreateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer custom create params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerCustomCreateParams) SetDefaults() {
	var (
		passwordLessTokenDefault = bool(false)

		sourceDefault = string("customCreate")
	)

	val := CustomerCustomCreateParams{
		PasswordLessToken: &passwordLessTokenDefault,
		Source:            &sourceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer custom create params
func (o *CustomerCustomCreateParams) WithTimeout(timeout time.Duration) *CustomerCustomCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer custom create params
func (o *CustomerCustomCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer custom create params
func (o *CustomerCustomCreateParams) WithContext(ctx context.Context) *CustomerCustomCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer custom create params
func (o *CustomerCustomCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer custom create params
func (o *CustomerCustomCreateParams) WithHTTPClient(client *http.Client) *CustomerCustomCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer custom create params
func (o *CustomerCustomCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the customer custom create params
func (o *CustomerCustomCreateParams) WithEmail(email *string) *CustomerCustomCreateParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer custom create params
func (o *CustomerCustomCreateParams) SetEmail(email *string) {
	o.Email = email
}

// WithLocation adds the location to the customer custom create params
func (o *CustomerCustomCreateParams) WithLocation(location *string) *CustomerCustomCreateParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the customer custom create params
func (o *CustomerCustomCreateParams) SetLocation(location *string) {
	o.Location = location
}

// WithName adds the name to the customer custom create params
func (o *CustomerCustomCreateParams) WithName(name *string) *CustomerCustomCreateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer custom create params
func (o *CustomerCustomCreateParams) SetName(name *string) {
	o.Name = name
}

// WithNotificationOptions adds the notificationOptions to the customer custom create params
func (o *CustomerCustomCreateParams) WithNotificationOptions(notificationOptions *string) *CustomerCustomCreateParams {
	o.SetNotificationOptions(notificationOptions)
	return o
}

// SetNotificationOptions adds the notificationOptions to the customer custom create params
func (o *CustomerCustomCreateParams) SetNotificationOptions(notificationOptions *string) {
	o.NotificationOptions = notificationOptions
}

// WithPartnerID adds the partnerID to the customer custom create params
func (o *CustomerCustomCreateParams) WithPartnerID(partnerID *string) *CustomerCustomCreateParams {
	o.SetPartnerID(partnerID)
	return o
}

// SetPartnerID adds the partnerId to the customer custom create params
func (o *CustomerCustomCreateParams) SetPartnerID(partnerID *string) {
	o.PartnerID = partnerID
}

// WithPassword adds the password to the customer custom create params
func (o *CustomerCustomCreateParams) WithPassword(password *string) *CustomerCustomCreateParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the customer custom create params
func (o *CustomerCustomCreateParams) SetPassword(password *string) {
	o.Password = password
}

// WithPasswordLessToken adds the passwordLessToken to the customer custom create params
func (o *CustomerCustomCreateParams) WithPasswordLessToken(passwordLessToken *bool) *CustomerCustomCreateParams {
	o.SetPasswordLessToken(passwordLessToken)
	return o
}

// SetPasswordLessToken adds the passwordLessToken to the customer custom create params
func (o *CustomerCustomCreateParams) SetPasswordLessToken(passwordLessToken *bool) {
	o.PasswordLessToken = passwordLessToken
}

// WithPerson adds the person to the customer custom create params
func (o *CustomerCustomCreateParams) WithPerson(person *string) *CustomerCustomCreateParams {
	o.SetPerson(person)
	return o
}

// SetPerson adds the person to the customer custom create params
func (o *CustomerCustomCreateParams) SetPerson(person *string) {
	o.Person = person
}

// WithSource adds the source to the customer custom create params
func (o *CustomerCustomCreateParams) WithSource(source *string) *CustomerCustomCreateParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the customer custom create params
func (o *CustomerCustomCreateParams) SetSource(source *string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerCustomCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Email != nil {

		// form param email
		var frEmail string
		if o.Email != nil {
			frEmail = *o.Email
		}
		fEmail := frEmail
		if fEmail != "" {
			if err := r.SetFormParam("email", fEmail); err != nil {
				return err
			}
		}
	}

	if o.Location != nil {

		// form param location
		var frLocation string
		if o.Location != nil {
			frLocation = *o.Location
		}
		fLocation := frLocation
		if fLocation != "" {
			if err := r.SetFormParam("location", fLocation); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.NotificationOptions != nil {

		// form param notificationOptions
		var frNotificationOptions string
		if o.NotificationOptions != nil {
			frNotificationOptions = *o.NotificationOptions
		}
		fNotificationOptions := frNotificationOptions
		if fNotificationOptions != "" {
			if err := r.SetFormParam("notificationOptions", fNotificationOptions); err != nil {
				return err
			}
		}
	}

	if o.PartnerID != nil {

		// form param partnerId
		var frPartnerID string
		if o.PartnerID != nil {
			frPartnerID = *o.PartnerID
		}
		fPartnerID := frPartnerID
		if fPartnerID != "" {
			if err := r.SetFormParam("partnerId", fPartnerID); err != nil {
				return err
			}
		}
	}

	if o.Password != nil {

		// form param password
		var frPassword string
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}
	}

	if o.PasswordLessToken != nil {

		// form param passwordLessToken
		var frPasswordLessToken bool
		if o.PasswordLessToken != nil {
			frPasswordLessToken = *o.PasswordLessToken
		}
		fPasswordLessToken := swag.FormatBool(frPasswordLessToken)
		if fPasswordLessToken != "" {
			if err := r.SetFormParam("passwordLessToken", fPasswordLessToken); err != nil {
				return err
			}
		}
	}

	if o.Person != nil {

		// form param person
		var frPerson string
		if o.Person != nil {
			frPerson = *o.Person
		}
		fPerson := frPerson
		if fPerson != "" {
			if err := r.SetFormParam("person", fPerson); err != nil {
				return err
			}
		}
	}

	if o.Source != nil {

		// form param source
		var frSource string
		if o.Source != nil {
			frSource = *o.Source
		}
		fSource := frSource
		if fSource != "" {
			if err := r.SetFormParam("source", fSource); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
