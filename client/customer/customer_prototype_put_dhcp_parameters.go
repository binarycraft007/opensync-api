// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePutDhcpParams creates a new CustomerPrototypePutDhcpParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePutDhcpParams() *CustomerPrototypePutDhcpParams {
	return &CustomerPrototypePutDhcpParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePutDhcpParamsWithTimeout creates a new CustomerPrototypePutDhcpParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePutDhcpParamsWithTimeout(timeout time.Duration) *CustomerPrototypePutDhcpParams {
	return &CustomerPrototypePutDhcpParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePutDhcpParamsWithContext creates a new CustomerPrototypePutDhcpParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePutDhcpParamsWithContext(ctx context.Context) *CustomerPrototypePutDhcpParams {
	return &CustomerPrototypePutDhcpParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePutDhcpParamsWithHTTPClient creates a new CustomerPrototypePutDhcpParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePutDhcpParamsWithHTTPClient(client *http.Client) *CustomerPrototypePutDhcpParams {
	return &CustomerPrototypePutDhcpParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePutDhcpParams contains all the parameters to send to the API endpoint

	for the customer prototype put dhcp operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePutDhcpParams struct {

	// EndIP.
	EndIP *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// StartIP.
	StartIP *string

	// Subnet.
	Subnet string

	// SubnetMask.
	SubnetMask *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype put dhcp params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutDhcpParams) WithDefaults() *CustomerPrototypePutDhcpParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype put dhcp params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutDhcpParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithTimeout(timeout time.Duration) *CustomerPrototypePutDhcpParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithContext(ctx context.Context) *CustomerPrototypePutDhcpParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithHTTPClient(client *http.Client) *CustomerPrototypePutDhcpParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndIP adds the endIP to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithEndIP(endIP *string) *CustomerPrototypePutDhcpParams {
	o.SetEndIP(endIP)
	return o
}

// SetEndIP adds the endIp to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetEndIP(endIP *string) {
	o.EndIP = endIP
}

// WithID adds the id to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithID(id string) *CustomerPrototypePutDhcpParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithLocationID(locationID string) *CustomerPrototypePutDhcpParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithStartIP adds the startIP to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithStartIP(startIP *string) *CustomerPrototypePutDhcpParams {
	o.SetStartIP(startIP)
	return o
}

// SetStartIP adds the startIp to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetStartIP(startIP *string) {
	o.StartIP = startIP
}

// WithSubnet adds the subnet to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithSubnet(subnet string) *CustomerPrototypePutDhcpParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetSubnet(subnet string) {
	o.Subnet = subnet
}

// WithSubnetMask adds the subnetMask to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) WithSubnetMask(subnetMask *string) *CustomerPrototypePutDhcpParams {
	o.SetSubnetMask(subnetMask)
	return o
}

// SetSubnetMask adds the subnetMask to the customer prototype put dhcp params
func (o *CustomerPrototypePutDhcpParams) SetSubnetMask(subnetMask *string) {
	o.SubnetMask = subnetMask
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePutDhcpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndIP != nil {

		// form param endIp
		var frEndIP string
		if o.EndIP != nil {
			frEndIP = *o.EndIP
		}
		fEndIP := frEndIP
		if fEndIP != "" {
			if err := r.SetFormParam("endIp", fEndIP); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.StartIP != nil {

		// form param startIp
		var frStartIP string
		if o.StartIP != nil {
			frStartIP = *o.StartIP
		}
		fStartIP := frStartIP
		if fStartIP != "" {
			if err := r.SetFormParam("startIp", fStartIP); err != nil {
				return err
			}
		}
	}

	// form param subnet
	frSubnet := o.Subnet
	fSubnet := frSubnet
	if fSubnet != "" {
		if err := r.SetFormParam("subnet", fSubnet); err != nil {
			return err
		}
	}

	if o.SubnetMask != nil {

		// form param subnetMask
		var frSubnetMask string
		if o.SubnetMask != nil {
			frSubnetMask = *o.SubnetMask
		}
		fSubnetMask := frSubnetMask
		if fSubnetMask != "" {
			if err := r.SetFormParam("subnetMask", fSubnetMask); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
