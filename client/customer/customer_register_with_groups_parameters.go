// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerRegisterWithGroupsParams creates a new CustomerRegisterWithGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerRegisterWithGroupsParams() *CustomerRegisterWithGroupsParams {
	return &CustomerRegisterWithGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerRegisterWithGroupsParamsWithTimeout creates a new CustomerRegisterWithGroupsParams object
// with the ability to set a timeout on a request.
func NewCustomerRegisterWithGroupsParamsWithTimeout(timeout time.Duration) *CustomerRegisterWithGroupsParams {
	return &CustomerRegisterWithGroupsParams{
		timeout: timeout,
	}
}

// NewCustomerRegisterWithGroupsParamsWithContext creates a new CustomerRegisterWithGroupsParams object
// with the ability to set a context for a request.
func NewCustomerRegisterWithGroupsParamsWithContext(ctx context.Context) *CustomerRegisterWithGroupsParams {
	return &CustomerRegisterWithGroupsParams{
		Context: ctx,
	}
}

// NewCustomerRegisterWithGroupsParamsWithHTTPClient creates a new CustomerRegisterWithGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerRegisterWithGroupsParamsWithHTTPClient(client *http.Client) *CustomerRegisterWithGroupsParams {
	return &CustomerRegisterWithGroupsParams{
		HTTPClient: client,
	}
}

/*
CustomerRegisterWithGroupsParams contains all the parameters to send to the API endpoint

	for the customer register with groups operation.

	Typically these are written to a http.Request.
*/
type CustomerRegisterWithGroupsParams struct {

	/* AcceptLanguage.

	   acceptable language
	*/
	AcceptLanguage *string

	/* AccountID.

	   must be unique, a UUID is recommended, min length is 6 characters.
	*/
	AccountID string

	// Email.
	Email string

	/* GroupIds.

	   at least one groupId

	   Format: JSON
	*/
	GroupIds *string

	/* Name.

	   Full name of customer, defaults to value of accountId
	*/
	Name string

	/* PartnerID.

	   PartnerId of customer for accountId
	*/
	PartnerID *string

	// Password.
	Password *string

	/* Profile.

	   location profile
	*/
	Profile *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer register with groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerRegisterWithGroupsParams) WithDefaults() *CustomerRegisterWithGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer register with groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerRegisterWithGroupsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithTimeout(timeout time.Duration) *CustomerRegisterWithGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithContext(ctx context.Context) *CustomerRegisterWithGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithHTTPClient(client *http.Client) *CustomerRegisterWithGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithAcceptLanguage(acceptLanguage *string) *CustomerRegisterWithGroupsParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithAccountID adds the accountID to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithAccountID(accountID string) *CustomerRegisterWithGroupsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithEmail adds the email to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithEmail(email string) *CustomerRegisterWithGroupsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetEmail(email string) {
	o.Email = email
}

// WithGroupIds adds the groupIds to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithGroupIds(groupIds *string) *CustomerRegisterWithGroupsParams {
	o.SetGroupIds(groupIds)
	return o
}

// SetGroupIds adds the groupIds to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetGroupIds(groupIds *string) {
	o.GroupIds = groupIds
}

// WithName adds the name to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithName(name string) *CustomerRegisterWithGroupsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetName(name string) {
	o.Name = name
}

// WithPartnerID adds the partnerID to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithPartnerID(partnerID *string) *CustomerRegisterWithGroupsParams {
	o.SetPartnerID(partnerID)
	return o
}

// SetPartnerID adds the partnerId to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetPartnerID(partnerID *string) {
	o.PartnerID = partnerID
}

// WithPassword adds the password to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithPassword(password *string) *CustomerRegisterWithGroupsParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetPassword(password *string) {
	o.Password = password
}

// WithProfile adds the profile to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) WithProfile(profile *string) *CustomerRegisterWithGroupsParams {
	o.SetProfile(profile)
	return o
}

// SetProfile adds the profile to the customer register with groups params
func (o *CustomerRegisterWithGroupsParams) SetProfile(profile *string) {
	o.Profile = profile
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerRegisterWithGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// form param acceptLanguage
		var frAcceptLanguage string
		if o.AcceptLanguage != nil {
			frAcceptLanguage = *o.AcceptLanguage
		}
		fAcceptLanguage := frAcceptLanguage
		if fAcceptLanguage != "" {
			if err := r.SetFormParam("acceptLanguage", fAcceptLanguage); err != nil {
				return err
			}
		}
	}

	// form param accountId
	frAccountID := o.AccountID
	fAccountID := frAccountID
	if fAccountID != "" {
		if err := r.SetFormParam("accountId", fAccountID); err != nil {
			return err
		}
	}

	// form param email
	frEmail := o.Email
	fEmail := frEmail
	if fEmail != "" {
		if err := r.SetFormParam("email", fEmail); err != nil {
			return err
		}
	}

	if o.GroupIds != nil {

		// form param groupIds
		var frGroupIds string
		if o.GroupIds != nil {
			frGroupIds = *o.GroupIds
		}
		fGroupIds := frGroupIds
		if fGroupIds != "" {
			if err := r.SetFormParam("groupIds", fGroupIds); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.PartnerID != nil {

		// form param partnerId
		var frPartnerID string
		if o.PartnerID != nil {
			frPartnerID = *o.PartnerID
		}
		fPartnerID := frPartnerID
		if fPartnerID != "" {
			if err := r.SetFormParam("partnerId", fPartnerID); err != nil {
				return err
			}
		}
	}

	if o.Password != nil {

		// form param password
		var frPassword string
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}
	}

	if o.Profile != nil {

		// form param profile
		var frProfile string
		if o.Profile != nil {
			frProfile = *o.Profile
		}
		fProfile := frProfile
		if fProfile != "" {
			if err := r.SetFormParam("profile", fProfile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
