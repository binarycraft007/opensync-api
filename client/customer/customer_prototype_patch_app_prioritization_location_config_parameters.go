// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePatchAppPrioritizationLocationConfigParams creates a new CustomerPrototypePatchAppPrioritizationLocationConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchAppPrioritizationLocationConfigParams() *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	return &CustomerPrototypePatchAppPrioritizationLocationConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithTimeout creates a new CustomerPrototypePatchAppPrioritizationLocationConfigParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	return &CustomerPrototypePatchAppPrioritizationLocationConfigParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithContext creates a new CustomerPrototypePatchAppPrioritizationLocationConfigParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithContext(ctx context.Context) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	return &CustomerPrototypePatchAppPrioritizationLocationConfigParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithHTTPClient creates a new CustomerPrototypePatchAppPrioritizationLocationConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchAppPrioritizationLocationConfigParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	return &CustomerPrototypePatchAppPrioritizationLocationConfigParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchAppPrioritizationLocationConfigParams contains all the parameters to send to the API endpoint

	for the customer prototype patch app prioritization location config operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchAppPrioritizationLocationConfigParams struct {

	/* CustomSetting.

	   Settings for app prioritization

	   Format: JSON
	*/
	CustomSetting *string

	/* CustomSettingEnabled.

	   true if custom setting is enabled
	*/
	CustomSettingEnabled *bool

	/* Enabled.

	   true if app prioritization is enabled
	*/
	Enabled *bool

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	/* IsFirstTimeUserExperience.

	   true if it is first time user experience
	*/
	IsFirstTimeUserExperience *bool

	// LocationID.
	LocationID string

	/* Mode.

	   App Prioritization mode - any of auto | enable | disable
	*/
	Mode *string

	/* Template.

	   Template for app prioritization
	*/
	Template *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch app prioritization location config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithDefaults() *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch app prioritization location config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithContext(ctx context.Context) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomSetting adds the customSetting to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithCustomSetting(customSetting *string) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetCustomSetting(customSetting)
	return o
}

// SetCustomSetting adds the customSetting to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetCustomSetting(customSetting *string) {
	o.CustomSetting = customSetting
}

// WithCustomSettingEnabled adds the customSettingEnabled to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithCustomSettingEnabled(customSettingEnabled *bool) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetCustomSettingEnabled(customSettingEnabled)
	return o
}

// SetCustomSettingEnabled adds the customSettingEnabled to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetCustomSettingEnabled(customSettingEnabled *bool) {
	o.CustomSettingEnabled = customSettingEnabled
}

// WithEnabled adds the enabled to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithEnabled(enabled *bool) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithID adds the id to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithID(id string) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetID(id string) {
	o.ID = id
}

// WithIsFirstTimeUserExperience adds the isFirstTimeUserExperience to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithIsFirstTimeUserExperience(isFirstTimeUserExperience *bool) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetIsFirstTimeUserExperience(isFirstTimeUserExperience)
	return o
}

// SetIsFirstTimeUserExperience adds the isFirstTimeUserExperience to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetIsFirstTimeUserExperience(isFirstTimeUserExperience *bool) {
	o.IsFirstTimeUserExperience = isFirstTimeUserExperience
}

// WithLocationID adds the locationID to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithLocationID(locationID string) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMode adds the mode to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithMode(mode *string) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithTemplate adds the template to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WithTemplate(template *string) *CustomerPrototypePatchAppPrioritizationLocationConfigParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the customer prototype patch app prioritization location config params
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) SetTemplate(template *string) {
	o.Template = template
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchAppPrioritizationLocationConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CustomSetting != nil {

		// form param customSetting
		var frCustomSetting string
		if o.CustomSetting != nil {
			frCustomSetting = *o.CustomSetting
		}
		fCustomSetting := frCustomSetting
		if fCustomSetting != "" {
			if err := r.SetFormParam("customSetting", fCustomSetting); err != nil {
				return err
			}
		}
	}

	if o.CustomSettingEnabled != nil {

		// form param customSettingEnabled
		var frCustomSettingEnabled bool
		if o.CustomSettingEnabled != nil {
			frCustomSettingEnabled = *o.CustomSettingEnabled
		}
		fCustomSettingEnabled := swag.FormatBool(frCustomSettingEnabled)
		if fCustomSettingEnabled != "" {
			if err := r.SetFormParam("customSettingEnabled", fCustomSettingEnabled); err != nil {
				return err
			}
		}
	}

	if o.Enabled != nil {

		// form param enabled
		var frEnabled bool
		if o.Enabled != nil {
			frEnabled = *o.Enabled
		}
		fEnabled := swag.FormatBool(frEnabled)
		if fEnabled != "" {
			if err := r.SetFormParam("enabled", fEnabled); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IsFirstTimeUserExperience != nil {

		// form param isFirstTimeUserExperience
		var frIsFirstTimeUserExperience bool
		if o.IsFirstTimeUserExperience != nil {
			frIsFirstTimeUserExperience = *o.IsFirstTimeUserExperience
		}
		fIsFirstTimeUserExperience := swag.FormatBool(frIsFirstTimeUserExperience)
		if fIsFirstTimeUserExperience != "" {
			if err := r.SetFormParam("isFirstTimeUserExperience", fIsFirstTimeUserExperience); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Mode != nil {

		// form param mode
		var frMode string
		if o.Mode != nil {
			frMode = *o.Mode
		}
		fMode := frMode
		if fMode != "" {
			if err := r.SetFormParam("mode", fMode); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// form param template
		var frTemplate string
		if o.Template != nil {
			frTemplate = *o.Template
		}
		fTemplate := frTemplate
		if fTemplate != "" {
			if err := r.SetFormParam("template", fTemplate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
