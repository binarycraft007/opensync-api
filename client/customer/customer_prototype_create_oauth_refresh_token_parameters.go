// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypeCreateOauthRefreshTokenParams creates a new CustomerPrototypeCreateOauthRefreshTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeCreateOauthRefreshTokenParams() *CustomerPrototypeCreateOauthRefreshTokenParams {
	return &CustomerPrototypeCreateOauthRefreshTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeCreateOauthRefreshTokenParamsWithTimeout creates a new CustomerPrototypeCreateOauthRefreshTokenParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeCreateOauthRefreshTokenParamsWithTimeout(timeout time.Duration) *CustomerPrototypeCreateOauthRefreshTokenParams {
	return &CustomerPrototypeCreateOauthRefreshTokenParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeCreateOauthRefreshTokenParamsWithContext creates a new CustomerPrototypeCreateOauthRefreshTokenParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeCreateOauthRefreshTokenParamsWithContext(ctx context.Context) *CustomerPrototypeCreateOauthRefreshTokenParams {
	return &CustomerPrototypeCreateOauthRefreshTokenParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeCreateOauthRefreshTokenParamsWithHTTPClient creates a new CustomerPrototypeCreateOauthRefreshTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeCreateOauthRefreshTokenParamsWithHTTPClient(client *http.Client) *CustomerPrototypeCreateOauthRefreshTokenParams {
	return &CustomerPrototypeCreateOauthRefreshTokenParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeCreateOauthRefreshTokenParams contains all the parameters to send to the API endpoint

	for the customer prototype create oauth refresh token operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeCreateOauthRefreshTokenParams struct {

	// ClientID.
	ClientID *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LinkedAccessToken.
	//
	// Format: JSON
	LinkedAccessToken *string

	// PrevLinkedRefreshTokenID.
	PrevLinkedRefreshTokenID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype create oauth refresh token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithDefaults() *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype create oauth refresh token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithTimeout(timeout time.Duration) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithContext(ctx context.Context) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithHTTPClient(client *http.Client) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithClientID(clientID *string) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithID adds the id to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithID(id string) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetID(id string) {
	o.ID = id
}

// WithLinkedAccessToken adds the linkedAccessToken to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithLinkedAccessToken(linkedAccessToken *string) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetLinkedAccessToken(linkedAccessToken)
	return o
}

// SetLinkedAccessToken adds the linkedAccessToken to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetLinkedAccessToken(linkedAccessToken *string) {
	o.LinkedAccessToken = linkedAccessToken
}

// WithPrevLinkedRefreshTokenID adds the prevLinkedRefreshTokenID to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WithPrevLinkedRefreshTokenID(prevLinkedRefreshTokenID *string) *CustomerPrototypeCreateOauthRefreshTokenParams {
	o.SetPrevLinkedRefreshTokenID(prevLinkedRefreshTokenID)
	return o
}

// SetPrevLinkedRefreshTokenID adds the prevLinkedRefreshTokenId to the customer prototype create oauth refresh token params
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) SetPrevLinkedRefreshTokenID(prevLinkedRefreshTokenID *string) {
	o.PrevLinkedRefreshTokenID = prevLinkedRefreshTokenID
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeCreateOauthRefreshTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// form param clientId
		var frClientID string
		if o.ClientID != nil {
			frClientID = *o.ClientID
		}
		fClientID := frClientID
		if fClientID != "" {
			if err := r.SetFormParam("clientId", fClientID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.LinkedAccessToken != nil {

		// form param linkedAccessToken
		var frLinkedAccessToken string
		if o.LinkedAccessToken != nil {
			frLinkedAccessToken = *o.LinkedAccessToken
		}
		fLinkedAccessToken := frLinkedAccessToken
		if fLinkedAccessToken != "" {
			if err := r.SetFormParam("linkedAccessToken", fLinkedAccessToken); err != nil {
				return err
			}
		}
	}

	if o.PrevLinkedRefreshTokenID != nil {

		// form param prevLinkedRefreshTokenId
		var frPrevLinkedRefreshTokenID string
		if o.PrevLinkedRefreshTokenID != nil {
			frPrevLinkedRefreshTokenID = *o.PrevLinkedRefreshTokenID
		}
		fPrevLinkedRefreshTokenID := frPrevLinkedRefreshTokenID
		if fPrevLinkedRefreshTokenID != "" {
			if err := r.SetFormParam("prevLinkedRefreshTokenId", fPrevLinkedRefreshTokenID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
