// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePatchMulticastReader is a Reader for the CustomerPrototypePatchMulticast structure.
type CustomerPrototypePatchMulticastReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePatchMulticastReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePatchMulticastOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePatchMulticastDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePatchMulticastOK creates a CustomerPrototypePatchMulticastOK with default headers values
func NewCustomerPrototypePatchMulticastOK() *CustomerPrototypePatchMulticastOK {
	return &CustomerPrototypePatchMulticastOK{}
}

/*
CustomerPrototypePatchMulticastOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePatchMulticastOK struct {
	Payload *models.Multicast
}

// IsSuccess returns true when this customer prototype patch multicast o k response has a 2xx status code
func (o *CustomerPrototypePatchMulticastOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype patch multicast o k response has a 3xx status code
func (o *CustomerPrototypePatchMulticastOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype patch multicast o k response has a 4xx status code
func (o *CustomerPrototypePatchMulticastOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype patch multicast o k response has a 5xx status code
func (o *CustomerPrototypePatchMulticastOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype patch multicast o k response a status code equal to that given
func (o *CustomerPrototypePatchMulticastOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype patch multicast o k response
func (o *CustomerPrototypePatchMulticastOK) Code() int {
	return 200
}

func (o *CustomerPrototypePatchMulticastOK) Error() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/networkConfiguration/multicast][%d] customerPrototypePatchMulticastOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePatchMulticastOK) String() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/networkConfiguration/multicast][%d] customerPrototypePatchMulticastOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePatchMulticastOK) GetPayload() *models.Multicast {
	return o.Payload
}

func (o *CustomerPrototypePatchMulticastOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Multicast)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePatchMulticastDefault creates a CustomerPrototypePatchMulticastDefault with default headers values
func NewCustomerPrototypePatchMulticastDefault(code int) *CustomerPrototypePatchMulticastDefault {
	return &CustomerPrototypePatchMulticastDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePatchMulticastDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePatchMulticastDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype patch multicast default response has a 2xx status code
func (o *CustomerPrototypePatchMulticastDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype patch multicast default response has a 3xx status code
func (o *CustomerPrototypePatchMulticastDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype patch multicast default response has a 4xx status code
func (o *CustomerPrototypePatchMulticastDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype patch multicast default response has a 5xx status code
func (o *CustomerPrototypePatchMulticastDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype patch multicast default response a status code equal to that given
func (o *CustomerPrototypePatchMulticastDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype patch multicast default response
func (o *CustomerPrototypePatchMulticastDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePatchMulticastDefault) Error() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/networkConfiguration/multicast][%d] Customer.prototype.patchMulticast default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePatchMulticastDefault) String() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/networkConfiguration/multicast][%d] Customer.prototype.patchMulticast default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePatchMulticastDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePatchMulticastDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
