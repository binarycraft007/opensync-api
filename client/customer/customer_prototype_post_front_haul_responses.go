// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePostFrontHaulReader is a Reader for the CustomerPrototypePostFrontHaul structure.
type CustomerPrototypePostFrontHaulReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePostFrontHaulReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePostFrontHaulOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePostFrontHaulDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePostFrontHaulOK creates a CustomerPrototypePostFrontHaulOK with default headers values
func NewCustomerPrototypePostFrontHaulOK() *CustomerPrototypePostFrontHaulOK {
	return &CustomerPrototypePostFrontHaulOK{}
}

/*
CustomerPrototypePostFrontHaulOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePostFrontHaulOK struct {
	Payload models.NetworkConfig
}

// IsSuccess returns true when this customer prototype post front haul o k response has a 2xx status code
func (o *CustomerPrototypePostFrontHaulOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype post front haul o k response has a 3xx status code
func (o *CustomerPrototypePostFrontHaulOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype post front haul o k response has a 4xx status code
func (o *CustomerPrototypePostFrontHaulOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype post front haul o k response has a 5xx status code
func (o *CustomerPrototypePostFrontHaulOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype post front haul o k response a status code equal to that given
func (o *CustomerPrototypePostFrontHaulOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype post front haul o k response
func (o *CustomerPrototypePostFrontHaulOK) Code() int {
	return 200
}

func (o *CustomerPrototypePostFrontHaulOK) Error() string {
	return fmt.Sprintf("[POST /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls][%d] customerPrototypePostFrontHaulOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePostFrontHaulOK) String() string {
	return fmt.Sprintf("[POST /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls][%d] customerPrototypePostFrontHaulOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePostFrontHaulOK) GetPayload() models.NetworkConfig {
	return o.Payload
}

func (o *CustomerPrototypePostFrontHaulOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePostFrontHaulDefault creates a CustomerPrototypePostFrontHaulDefault with default headers values
func NewCustomerPrototypePostFrontHaulDefault(code int) *CustomerPrototypePostFrontHaulDefault {
	return &CustomerPrototypePostFrontHaulDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePostFrontHaulDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePostFrontHaulDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype post front haul default response has a 2xx status code
func (o *CustomerPrototypePostFrontHaulDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype post front haul default response has a 3xx status code
func (o *CustomerPrototypePostFrontHaulDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype post front haul default response has a 4xx status code
func (o *CustomerPrototypePostFrontHaulDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype post front haul default response has a 5xx status code
func (o *CustomerPrototypePostFrontHaulDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype post front haul default response a status code equal to that given
func (o *CustomerPrototypePostFrontHaulDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype post front haul default response
func (o *CustomerPrototypePostFrontHaulDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePostFrontHaulDefault) Error() string {
	return fmt.Sprintf("[POST /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls][%d] Customer.prototype.postFrontHaul default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePostFrontHaulDefault) String() string {
	return fmt.Sprintf("[POST /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls][%d] Customer.prototype.postFrontHaul default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePostFrontHaulDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePostFrontHaulDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
