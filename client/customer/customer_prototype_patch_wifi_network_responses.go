// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePatchWifiNetworkReader is a Reader for the CustomerPrototypePatchWifiNetwork structure.
type CustomerPrototypePatchWifiNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePatchWifiNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePatchWifiNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePatchWifiNetworkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePatchWifiNetworkOK creates a CustomerPrototypePatchWifiNetworkOK with default headers values
func NewCustomerPrototypePatchWifiNetworkOK() *CustomerPrototypePatchWifiNetworkOK {
	return &CustomerPrototypePatchWifiNetworkOK{}
}

/*
CustomerPrototypePatchWifiNetworkOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePatchWifiNetworkOK struct {
	Payload *models.WifiNetwork
}

// IsSuccess returns true when this customer prototype patch wifi network o k response has a 2xx status code
func (o *CustomerPrototypePatchWifiNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype patch wifi network o k response has a 3xx status code
func (o *CustomerPrototypePatchWifiNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype patch wifi network o k response has a 4xx status code
func (o *CustomerPrototypePatchWifiNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype patch wifi network o k response has a 5xx status code
func (o *CustomerPrototypePatchWifiNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype patch wifi network o k response a status code equal to that given
func (o *CustomerPrototypePatchWifiNetworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype patch wifi network o k response
func (o *CustomerPrototypePatchWifiNetworkOK) Code() int {
	return 200
}

func (o *CustomerPrototypePatchWifiNetworkOK) Error() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/wifiNetwork][%d] customerPrototypePatchWifiNetworkOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePatchWifiNetworkOK) String() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/wifiNetwork][%d] customerPrototypePatchWifiNetworkOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePatchWifiNetworkOK) GetPayload() *models.WifiNetwork {
	return o.Payload
}

func (o *CustomerPrototypePatchWifiNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WifiNetwork)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePatchWifiNetworkDefault creates a CustomerPrototypePatchWifiNetworkDefault with default headers values
func NewCustomerPrototypePatchWifiNetworkDefault(code int) *CustomerPrototypePatchWifiNetworkDefault {
	return &CustomerPrototypePatchWifiNetworkDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePatchWifiNetworkDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePatchWifiNetworkDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype patch wifi network default response has a 2xx status code
func (o *CustomerPrototypePatchWifiNetworkDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype patch wifi network default response has a 3xx status code
func (o *CustomerPrototypePatchWifiNetworkDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype patch wifi network default response has a 4xx status code
func (o *CustomerPrototypePatchWifiNetworkDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype patch wifi network default response has a 5xx status code
func (o *CustomerPrototypePatchWifiNetworkDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype patch wifi network default response a status code equal to that given
func (o *CustomerPrototypePatchWifiNetworkDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype patch wifi network default response
func (o *CustomerPrototypePatchWifiNetworkDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePatchWifiNetworkDefault) Error() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/wifiNetwork][%d] Customer.prototype.patchWifiNetwork default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePatchWifiNetworkDefault) String() string {
	return fmt.Sprintf("[PATCH /Customers/{id}/locations/{locationId}/wifiNetwork][%d] Customer.prototype.patchWifiNetwork default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePatchWifiNetworkDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePatchWifiNetworkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
