// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePatchLocationManagerParams creates a new CustomerPrototypePatchLocationManagerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchLocationManagerParams() *CustomerPrototypePatchLocationManagerParams {
	return &CustomerPrototypePatchLocationManagerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchLocationManagerParamsWithTimeout creates a new CustomerPrototypePatchLocationManagerParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchLocationManagerParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchLocationManagerParams {
	return &CustomerPrototypePatchLocationManagerParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchLocationManagerParamsWithContext creates a new CustomerPrototypePatchLocationManagerParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchLocationManagerParamsWithContext(ctx context.Context) *CustomerPrototypePatchLocationManagerParams {
	return &CustomerPrototypePatchLocationManagerParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchLocationManagerParamsWithHTTPClient creates a new CustomerPrototypePatchLocationManagerParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchLocationManagerParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchLocationManagerParams {
	return &CustomerPrototypePatchLocationManagerParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchLocationManagerParams contains all the parameters to send to the API endpoint

	for the customer prototype patch location manager operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchLocationManagerParams struct {

	// AccessType.
	AccessType *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	// ManagerID.
	ManagerID string

	// Name.
	Name *string

	// NotificationOptions.
	//
	// Format: JSON
	NotificationOptions *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch location manager params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchLocationManagerParams) WithDefaults() *CustomerPrototypePatchLocationManagerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch location manager params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchLocationManagerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchLocationManagerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithContext(ctx context.Context) *CustomerPrototypePatchLocationManagerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchLocationManagerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessType adds the accessType to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithAccessType(accessType *string) *CustomerPrototypePatchLocationManagerParams {
	o.SetAccessType(accessType)
	return o
}

// SetAccessType adds the accessType to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetAccessType(accessType *string) {
	o.AccessType = accessType
}

// WithID adds the id to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithID(id string) *CustomerPrototypePatchLocationManagerParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithLocationID(locationID string) *CustomerPrototypePatchLocationManagerParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithManagerID adds the managerID to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithManagerID(managerID string) *CustomerPrototypePatchLocationManagerParams {
	o.SetManagerID(managerID)
	return o
}

// SetManagerID adds the managerId to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetManagerID(managerID string) {
	o.ManagerID = managerID
}

// WithName adds the name to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithName(name *string) *CustomerPrototypePatchLocationManagerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetName(name *string) {
	o.Name = name
}

// WithNotificationOptions adds the notificationOptions to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) WithNotificationOptions(notificationOptions *string) *CustomerPrototypePatchLocationManagerParams {
	o.SetNotificationOptions(notificationOptions)
	return o
}

// SetNotificationOptions adds the notificationOptions to the customer prototype patch location manager params
func (o *CustomerPrototypePatchLocationManagerParams) SetNotificationOptions(notificationOptions *string) {
	o.NotificationOptions = notificationOptions
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchLocationManagerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessType != nil {

		// form param accessType
		var frAccessType string
		if o.AccessType != nil {
			frAccessType = *o.AccessType
		}
		fAccessType := frAccessType
		if fAccessType != "" {
			if err := r.SetFormParam("accessType", fAccessType); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// path param managerId
	if err := r.SetPathParam("managerId", o.ManagerID); err != nil {
		return err
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.NotificationOptions != nil {

		// form param notificationOptions
		var frNotificationOptions string
		if o.NotificationOptions != nil {
			frNotificationOptions = *o.NotificationOptions
		}
		fNotificationOptions := frNotificationOptions
		if fNotificationOptions != "" {
			if err := r.SetFormParam("notificationOptions", fNotificationOptions); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
