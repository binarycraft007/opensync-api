// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypeCreateLocationParams creates a new CustomerPrototypeCreateLocationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeCreateLocationParams() *CustomerPrototypeCreateLocationParams {
	return &CustomerPrototypeCreateLocationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeCreateLocationParamsWithTimeout creates a new CustomerPrototypeCreateLocationParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeCreateLocationParamsWithTimeout(timeout time.Duration) *CustomerPrototypeCreateLocationParams {
	return &CustomerPrototypeCreateLocationParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeCreateLocationParamsWithContext creates a new CustomerPrototypeCreateLocationParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeCreateLocationParamsWithContext(ctx context.Context) *CustomerPrototypeCreateLocationParams {
	return &CustomerPrototypeCreateLocationParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeCreateLocationParamsWithHTTPClient creates a new CustomerPrototypeCreateLocationParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeCreateLocationParamsWithHTTPClient(client *http.Client) *CustomerPrototypeCreateLocationParams {
	return &CustomerPrototypeCreateLocationParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeCreateLocationParams contains all the parameters to send to the API endpoint

	for the customer prototype create location operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeCreateLocationParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Name.
	Name string

	// Profile.
	Profile *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype create location params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateLocationParams) WithDefaults() *CustomerPrototypeCreateLocationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype create location params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateLocationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithTimeout(timeout time.Duration) *CustomerPrototypeCreateLocationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithContext(ctx context.Context) *CustomerPrototypeCreateLocationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithHTTPClient(client *http.Client) *CustomerPrototypeCreateLocationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithID(id string) *CustomerPrototypeCreateLocationParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetID(id string) {
	o.ID = id
}

// WithName adds the name to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithName(name string) *CustomerPrototypeCreateLocationParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetName(name string) {
	o.Name = name
}

// WithProfile adds the profile to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) WithProfile(profile *string) *CustomerPrototypeCreateLocationParams {
	o.SetProfile(profile)
	return o
}

// SetProfile adds the profile to the customer prototype create location params
func (o *CustomerPrototypeCreateLocationParams) SetProfile(profile *string) {
	o.Profile = profile
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeCreateLocationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Profile != nil {

		// form param profile
		var frProfile string
		if o.Profile != nil {
			frProfile = *o.Profile
		}
		fProfile := frProfile
		if fProfile != "" {
			if err := r.SetFormParam("profile", fProfile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
