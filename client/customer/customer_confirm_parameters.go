// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerConfirmParams creates a new CustomerConfirmParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerConfirmParams() *CustomerConfirmParams {
	return &CustomerConfirmParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerConfirmParamsWithTimeout creates a new CustomerConfirmParams object
// with the ability to set a timeout on a request.
func NewCustomerConfirmParamsWithTimeout(timeout time.Duration) *CustomerConfirmParams {
	return &CustomerConfirmParams{
		timeout: timeout,
	}
}

// NewCustomerConfirmParamsWithContext creates a new CustomerConfirmParams object
// with the ability to set a context for a request.
func NewCustomerConfirmParamsWithContext(ctx context.Context) *CustomerConfirmParams {
	return &CustomerConfirmParams{
		Context: ctx,
	}
}

// NewCustomerConfirmParamsWithHTTPClient creates a new CustomerConfirmParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerConfirmParamsWithHTTPClient(client *http.Client) *CustomerConfirmParams {
	return &CustomerConfirmParams{
		HTTPClient: client,
	}
}

/*
CustomerConfirmParams contains all the parameters to send to the API endpoint

	for the customer confirm operation.

	Typically these are written to a http.Request.
*/
type CustomerConfirmParams struct {

	// Redirect.
	Redirect *string

	// Token.
	Token string

	// UID.
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer confirm params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerConfirmParams) WithDefaults() *CustomerConfirmParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer confirm params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerConfirmParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer confirm params
func (o *CustomerConfirmParams) WithTimeout(timeout time.Duration) *CustomerConfirmParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer confirm params
func (o *CustomerConfirmParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer confirm params
func (o *CustomerConfirmParams) WithContext(ctx context.Context) *CustomerConfirmParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer confirm params
func (o *CustomerConfirmParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer confirm params
func (o *CustomerConfirmParams) WithHTTPClient(client *http.Client) *CustomerConfirmParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer confirm params
func (o *CustomerConfirmParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRedirect adds the redirect to the customer confirm params
func (o *CustomerConfirmParams) WithRedirect(redirect *string) *CustomerConfirmParams {
	o.SetRedirect(redirect)
	return o
}

// SetRedirect adds the redirect to the customer confirm params
func (o *CustomerConfirmParams) SetRedirect(redirect *string) {
	o.Redirect = redirect
}

// WithToken adds the token to the customer confirm params
func (o *CustomerConfirmParams) WithToken(token string) *CustomerConfirmParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the customer confirm params
func (o *CustomerConfirmParams) SetToken(token string) {
	o.Token = token
}

// WithUID adds the uid to the customer confirm params
func (o *CustomerConfirmParams) WithUID(uid string) *CustomerConfirmParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the customer confirm params
func (o *CustomerConfirmParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerConfirmParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Redirect != nil {

		// query param redirect
		var qrRedirect string

		if o.Redirect != nil {
			qrRedirect = *o.Redirect
		}
		qRedirect := qrRedirect
		if qRedirect != "" {

			if err := r.SetQueryParam("redirect", qRedirect); err != nil {
				return err
			}
		}
	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {

		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	// query param uid
	qrUID := o.UID
	qUID := qrUID
	if qUID != "" {

		if err := r.SetQueryParam("uid", qUID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
