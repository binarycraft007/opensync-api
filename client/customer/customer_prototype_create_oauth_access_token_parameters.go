// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeCreateOauthAccessTokenParams creates a new CustomerPrototypeCreateOauthAccessTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeCreateOauthAccessTokenParams() *CustomerPrototypeCreateOauthAccessTokenParams {
	return &CustomerPrototypeCreateOauthAccessTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeCreateOauthAccessTokenParamsWithTimeout creates a new CustomerPrototypeCreateOauthAccessTokenParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeCreateOauthAccessTokenParamsWithTimeout(timeout time.Duration) *CustomerPrototypeCreateOauthAccessTokenParams {
	return &CustomerPrototypeCreateOauthAccessTokenParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeCreateOauthAccessTokenParamsWithContext creates a new CustomerPrototypeCreateOauthAccessTokenParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeCreateOauthAccessTokenParamsWithContext(ctx context.Context) *CustomerPrototypeCreateOauthAccessTokenParams {
	return &CustomerPrototypeCreateOauthAccessTokenParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeCreateOauthAccessTokenParamsWithHTTPClient creates a new CustomerPrototypeCreateOauthAccessTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeCreateOauthAccessTokenParamsWithHTTPClient(client *http.Client) *CustomerPrototypeCreateOauthAccessTokenParams {
	return &CustomerPrototypeCreateOauthAccessTokenParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeCreateOauthAccessTokenParams contains all the parameters to send to the API endpoint

	for the customer prototype create oauth access token operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeCreateOauthAccessTokenParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Scope.
	Scope *string

	// SingleToken.
	SingleToken *bool

	// TTLSeconds.
	//
	// Format: double
	TTLSeconds *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype create oauth access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithDefaults() *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype create oauth access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithTimeout(timeout time.Duration) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithContext(ctx context.Context) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithHTTPClient(client *http.Client) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithID(id string) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetID(id string) {
	o.ID = id
}

// WithScope adds the scope to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithScope(scope *string) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSingleToken adds the singleToken to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithSingleToken(singleToken *bool) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetSingleToken(singleToken)
	return o
}

// SetSingleToken adds the singleToken to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetSingleToken(singleToken *bool) {
	o.SingleToken = singleToken
}

// WithTTLSeconds adds the tTLSeconds to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WithTTLSeconds(tTLSeconds *float64) *CustomerPrototypeCreateOauthAccessTokenParams {
	o.SetTTLSeconds(tTLSeconds)
	return o
}

// SetTTLSeconds adds the ttlSeconds to the customer prototype create oauth access token params
func (o *CustomerPrototypeCreateOauthAccessTokenParams) SetTTLSeconds(tTLSeconds *float64) {
	o.TTLSeconds = tTLSeconds
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeCreateOauthAccessTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	if o.SingleToken != nil {

		// form param singleToken
		var frSingleToken bool
		if o.SingleToken != nil {
			frSingleToken = *o.SingleToken
		}
		fSingleToken := swag.FormatBool(frSingleToken)
		if fSingleToken != "" {
			if err := r.SetFormParam("singleToken", fSingleToken); err != nil {
				return err
			}
		}
	}

	if o.TTLSeconds != nil {

		// form param ttlSeconds
		var frTTLSeconds float64
		if o.TTLSeconds != nil {
			frTTLSeconds = *o.TTLSeconds
		}
		fTTLSeconds := swag.FormatFloat64(frTTLSeconds)
		if fTTLSeconds != "" {
			if err := r.SetFormParam("ttlSeconds", fTTLSeconds); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
