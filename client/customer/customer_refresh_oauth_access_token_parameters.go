// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerRefreshOauthAccessTokenParams creates a new CustomerRefreshOauthAccessTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerRefreshOauthAccessTokenParams() *CustomerRefreshOauthAccessTokenParams {
	return &CustomerRefreshOauthAccessTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerRefreshOauthAccessTokenParamsWithTimeout creates a new CustomerRefreshOauthAccessTokenParams object
// with the ability to set a timeout on a request.
func NewCustomerRefreshOauthAccessTokenParamsWithTimeout(timeout time.Duration) *CustomerRefreshOauthAccessTokenParams {
	return &CustomerRefreshOauthAccessTokenParams{
		timeout: timeout,
	}
}

// NewCustomerRefreshOauthAccessTokenParamsWithContext creates a new CustomerRefreshOauthAccessTokenParams object
// with the ability to set a context for a request.
func NewCustomerRefreshOauthAccessTokenParamsWithContext(ctx context.Context) *CustomerRefreshOauthAccessTokenParams {
	return &CustomerRefreshOauthAccessTokenParams{
		Context: ctx,
	}
}

// NewCustomerRefreshOauthAccessTokenParamsWithHTTPClient creates a new CustomerRefreshOauthAccessTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerRefreshOauthAccessTokenParamsWithHTTPClient(client *http.Client) *CustomerRefreshOauthAccessTokenParams {
	return &CustomerRefreshOauthAccessTokenParams{
		HTTPClient: client,
	}
}

/*
CustomerRefreshOauthAccessTokenParams contains all the parameters to send to the API endpoint

	for the customer refresh oauth access token operation.

	Typically these are written to a http.Request.
*/
type CustomerRefreshOauthAccessTokenParams struct {

	// ClientID.
	ClientID *string

	// RefreshToken.
	RefreshToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer refresh oauth access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerRefreshOauthAccessTokenParams) WithDefaults() *CustomerRefreshOauthAccessTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer refresh oauth access token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerRefreshOauthAccessTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) WithTimeout(timeout time.Duration) *CustomerRefreshOauthAccessTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) WithContext(ctx context.Context) *CustomerRefreshOauthAccessTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) WithHTTPClient(client *http.Client) *CustomerRefreshOauthAccessTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) WithClientID(clientID *string) *CustomerRefreshOauthAccessTokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithRefreshToken adds the refreshToken to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) WithRefreshToken(refreshToken *string) *CustomerRefreshOauthAccessTokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the customer refresh oauth access token params
func (o *CustomerRefreshOauthAccessTokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerRefreshOauthAccessTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// form param clientId
		var frClientID string
		if o.ClientID != nil {
			frClientID = *o.ClientID
		}
		fClientID := frClientID
		if fClientID != "" {
			if err := r.SetFormParam("clientId", fClientID); err != nil {
				return err
			}
		}
	}

	if o.RefreshToken != nil {

		// form param refreshToken
		var frRefreshToken string
		if o.RefreshToken != nil {
			frRefreshToken = *o.RefreshToken
		}
		fRefreshToken := frRefreshToken
		if fRefreshToken != "" {
			if err := r.SetFormParam("refreshToken", fRefreshToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
