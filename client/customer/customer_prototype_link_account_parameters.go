// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypeLinkAccountParams creates a new CustomerPrototypeLinkAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeLinkAccountParams() *CustomerPrototypeLinkAccountParams {
	return &CustomerPrototypeLinkAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeLinkAccountParamsWithTimeout creates a new CustomerPrototypeLinkAccountParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeLinkAccountParamsWithTimeout(timeout time.Duration) *CustomerPrototypeLinkAccountParams {
	return &CustomerPrototypeLinkAccountParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeLinkAccountParamsWithContext creates a new CustomerPrototypeLinkAccountParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeLinkAccountParamsWithContext(ctx context.Context) *CustomerPrototypeLinkAccountParams {
	return &CustomerPrototypeLinkAccountParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeLinkAccountParamsWithHTTPClient creates a new CustomerPrototypeLinkAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeLinkAccountParamsWithHTTPClient(client *http.Client) *CustomerPrototypeLinkAccountParams {
	return &CustomerPrototypeLinkAccountParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeLinkAccountParams contains all the parameters to send to the API endpoint

	for the customer prototype link account operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeLinkAccountParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Provider.
	Provider string

	// SessionToken.
	SessionToken string

	// UserDisplayName.
	UserDisplayName *string

	// UserID.
	UserID string

	// UserName.
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype link account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeLinkAccountParams) WithDefaults() *CustomerPrototypeLinkAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype link account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeLinkAccountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithTimeout(timeout time.Duration) *CustomerPrototypeLinkAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithContext(ctx context.Context) *CustomerPrototypeLinkAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithHTTPClient(client *http.Client) *CustomerPrototypeLinkAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithID(id string) *CustomerPrototypeLinkAccountParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetID(id string) {
	o.ID = id
}

// WithProvider adds the provider to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithProvider(provider string) *CustomerPrototypeLinkAccountParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetProvider(provider string) {
	o.Provider = provider
}

// WithSessionToken adds the sessionToken to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithSessionToken(sessionToken string) *CustomerPrototypeLinkAccountParams {
	o.SetSessionToken(sessionToken)
	return o
}

// SetSessionToken adds the sessionToken to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetSessionToken(sessionToken string) {
	o.SessionToken = sessionToken
}

// WithUserDisplayName adds the userDisplayName to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithUserDisplayName(userDisplayName *string) *CustomerPrototypeLinkAccountParams {
	o.SetUserDisplayName(userDisplayName)
	return o
}

// SetUserDisplayName adds the userDisplayName to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetUserDisplayName(userDisplayName *string) {
	o.UserDisplayName = userDisplayName
}

// WithUserID adds the userID to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithUserID(userID string) *CustomerPrototypeLinkAccountParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetUserID(userID string) {
	o.UserID = userID
}

// WithUserName adds the userName to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) WithUserName(userName *string) *CustomerPrototypeLinkAccountParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the customer prototype link account params
func (o *CustomerPrototypeLinkAccountParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeLinkAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param provider
	frProvider := o.Provider
	fProvider := frProvider
	if fProvider != "" {
		if err := r.SetFormParam("provider", fProvider); err != nil {
			return err
		}
	}

	// form param sessionToken
	frSessionToken := o.SessionToken
	fSessionToken := frSessionToken
	if fSessionToken != "" {
		if err := r.SetFormParam("sessionToken", fSessionToken); err != nil {
			return err
		}
	}

	if o.UserDisplayName != nil {

		// form param userDisplayName
		var frUserDisplayName string
		if o.UserDisplayName != nil {
			frUserDisplayName = *o.UserDisplayName
		}
		fUserDisplayName := frUserDisplayName
		if fUserDisplayName != "" {
			if err := r.SetFormParam("userDisplayName", fUserDisplayName); err != nil {
				return err
			}
		}
	}

	// form param userId
	frUserID := o.UserID
	fUserID := frUserID
	if fUserID != "" {
		if err := r.SetFormParam("userId", fUserID); err != nil {
			return err
		}
	}

	if o.UserName != nil {

		// form param userName
		var frUserName string
		if o.UserName != nil {
			frUserName = *o.UserName
		}
		fUserName := frUserName
		if fUserName != "" {
			if err := r.SetFormParam("userName", fUserName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
