// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePutSniffingParams creates a new CustomerPrototypePutSniffingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePutSniffingParams() *CustomerPrototypePutSniffingParams {
	return &CustomerPrototypePutSniffingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePutSniffingParamsWithTimeout creates a new CustomerPrototypePutSniffingParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePutSniffingParamsWithTimeout(timeout time.Duration) *CustomerPrototypePutSniffingParams {
	return &CustomerPrototypePutSniffingParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePutSniffingParamsWithContext creates a new CustomerPrototypePutSniffingParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePutSniffingParamsWithContext(ctx context.Context) *CustomerPrototypePutSniffingParams {
	return &CustomerPrototypePutSniffingParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePutSniffingParamsWithHTTPClient creates a new CustomerPrototypePutSniffingParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePutSniffingParamsWithHTTPClient(client *http.Client) *CustomerPrototypePutSniffingParams {
	return &CustomerPrototypePutSniffingParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePutSniffingParams contains all the parameters to send to the API endpoint

	for the customer prototype put sniffing operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePutSniffingParams struct {

	/* DNS.

	   object with property "mode": an enum of values which include: auto, enable, disable

	   Format: JSON
	*/
	DNS string

	/* HTTP.

	   object with property "mode": an enum of values which include: auto, enable, disable

	   Format: JSON
	*/
	HTTP string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	/* Mdns.

	   object with property "mode": an enum of values which include: auto, enable, disable

	   Format: JSON
	*/
	Mdns string

	/* Upnp.

	   object with property "mode": an enum of values which include: auto, enable, disable

	   Format: JSON
	*/
	Upnp string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype put sniffing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutSniffingParams) WithDefaults() *CustomerPrototypePutSniffingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype put sniffing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutSniffingParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithTimeout(timeout time.Duration) *CustomerPrototypePutSniffingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithContext(ctx context.Context) *CustomerPrototypePutSniffingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithHTTPClient(client *http.Client) *CustomerPrototypePutSniffingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDNS adds the dns to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithDNS(dns string) *CustomerPrototypePutSniffingParams {
	o.SetDNS(dns)
	return o
}

// SetDNS adds the dns to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetDNS(dns string) {
	o.DNS = dns
}

// WithHTTP adds the http to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithHTTP(http string) *CustomerPrototypePutSniffingParams {
	o.SetHTTP(http)
	return o
}

// SetHTTP adds the http to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetHTTP(http string) {
	o.HTTP = http
}

// WithID adds the id to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithID(id string) *CustomerPrototypePutSniffingParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithLocationID(locationID string) *CustomerPrototypePutSniffingParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMdns adds the mdns to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithMdns(mdns string) *CustomerPrototypePutSniffingParams {
	o.SetMdns(mdns)
	return o
}

// SetMdns adds the mdns to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetMdns(mdns string) {
	o.Mdns = mdns
}

// WithUpnp adds the upnp to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) WithUpnp(upnp string) *CustomerPrototypePutSniffingParams {
	o.SetUpnp(upnp)
	return o
}

// SetUpnp adds the upnp to the customer prototype put sniffing params
func (o *CustomerPrototypePutSniffingParams) SetUpnp(upnp string) {
	o.Upnp = upnp
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePutSniffingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param dns
	frDNS := o.DNS
	fDNS := frDNS
	if fDNS != "" {
		if err := r.SetFormParam("dns", fDNS); err != nil {
			return err
		}
	}

	// form param http
	frHTTP := o.HTTP
	fHTTP := frHTTP
	if fHTTP != "" {
		if err := r.SetFormParam("http", fHTTP); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// form param mdns
	frMdns := o.Mdns
	fMdns := frMdns
	if fMdns != "" {
		if err := r.SetFormParam("mdns", fMdns); err != nil {
			return err
		}
	}

	// form param upnp
	frUpnp := o.Upnp
	fUpnp := frUpnp
	if fUpnp != "" {
		if err := r.SetFormParam("upnp", fUpnp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
