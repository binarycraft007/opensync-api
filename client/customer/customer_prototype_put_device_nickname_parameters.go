// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePutDeviceNicknameParams creates a new CustomerPrototypePutDeviceNicknameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePutDeviceNicknameParams() *CustomerPrototypePutDeviceNicknameParams {
	return &CustomerPrototypePutDeviceNicknameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePutDeviceNicknameParamsWithTimeout creates a new CustomerPrototypePutDeviceNicknameParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePutDeviceNicknameParamsWithTimeout(timeout time.Duration) *CustomerPrototypePutDeviceNicknameParams {
	return &CustomerPrototypePutDeviceNicknameParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePutDeviceNicknameParamsWithContext creates a new CustomerPrototypePutDeviceNicknameParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePutDeviceNicknameParamsWithContext(ctx context.Context) *CustomerPrototypePutDeviceNicknameParams {
	return &CustomerPrototypePutDeviceNicknameParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePutDeviceNicknameParamsWithHTTPClient creates a new CustomerPrototypePutDeviceNicknameParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePutDeviceNicknameParamsWithHTTPClient(client *http.Client) *CustomerPrototypePutDeviceNicknameParams {
	return &CustomerPrototypePutDeviceNicknameParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePutDeviceNicknameParams contains all the parameters to send to the API endpoint

	for the customer prototype put device nickname operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePutDeviceNicknameParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Mac.
	Mac string

	// Nickname.
	Nickname *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype put device nickname params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutDeviceNicknameParams) WithDefaults() *CustomerPrototypePutDeviceNicknameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype put device nickname params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutDeviceNicknameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithTimeout(timeout time.Duration) *CustomerPrototypePutDeviceNicknameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithContext(ctx context.Context) *CustomerPrototypePutDeviceNicknameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithHTTPClient(client *http.Client) *CustomerPrototypePutDeviceNicknameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithID(id string) *CustomerPrototypePutDeviceNicknameParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetID(id string) {
	o.ID = id
}

// WithMac adds the mac to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithMac(mac string) *CustomerPrototypePutDeviceNicknameParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetMac(mac string) {
	o.Mac = mac
}

// WithNickname adds the nickname to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) WithNickname(nickname *string) *CustomerPrototypePutDeviceNicknameParams {
	o.SetNickname(nickname)
	return o
}

// SetNickname adds the nickname to the customer prototype put device nickname params
func (o *CustomerPrototypePutDeviceNicknameParams) SetNickname(nickname *string) {
	o.Nickname = nickname
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePutDeviceNicknameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param mac
	if err := r.SetPathParam("mac", o.Mac); err != nil {
		return err
	}

	if o.Nickname != nil {

		// form param nickname
		var frNickname string
		if o.Nickname != nil {
			frNickname = *o.Nickname
		}
		fNickname := frNickname
		if fNickname != "" {
			if err := r.SetFormParam("nickname", fNickname); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
