// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerPrototypePutPortForwardParams creates a new CustomerPrototypePutPortForwardParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePutPortForwardParams() *CustomerPrototypePutPortForwardParams {
	return &CustomerPrototypePutPortForwardParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePutPortForwardParamsWithTimeout creates a new CustomerPrototypePutPortForwardParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePutPortForwardParamsWithTimeout(timeout time.Duration) *CustomerPrototypePutPortForwardParams {
	return &CustomerPrototypePutPortForwardParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePutPortForwardParamsWithContext creates a new CustomerPrototypePutPortForwardParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePutPortForwardParamsWithContext(ctx context.Context) *CustomerPrototypePutPortForwardParams {
	return &CustomerPrototypePutPortForwardParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePutPortForwardParamsWithHTTPClient creates a new CustomerPrototypePutPortForwardParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePutPortForwardParamsWithHTTPClient(client *http.Client) *CustomerPrototypePutPortForwardParams {
	return &CustomerPrototypePutPortForwardParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePutPortForwardParams contains all the parameters to send to the API endpoint

	for the customer prototype put port forward operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePutPortForwardParams struct {

	// ExternalPort.
	//
	// Format: JSON
	ExternalPort string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// InternalPort.
	//
	// Format: JSON
	InternalPort *string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// Mac.
	//
	// Format: JSON
	Mac string

	// Name.
	//
	// Format: JSON
	Name *string

	// Protocol.
	//
	// Format: JSON
	Protocol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype put port forward params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutPortForwardParams) WithDefaults() *CustomerPrototypePutPortForwardParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype put port forward params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePutPortForwardParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithTimeout(timeout time.Duration) *CustomerPrototypePutPortForwardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithContext(ctx context.Context) *CustomerPrototypePutPortForwardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithHTTPClient(client *http.Client) *CustomerPrototypePutPortForwardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExternalPort adds the externalPort to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithExternalPort(externalPort string) *CustomerPrototypePutPortForwardParams {
	o.SetExternalPort(externalPort)
	return o
}

// SetExternalPort adds the externalPort to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetExternalPort(externalPort string) {
	o.ExternalPort = externalPort
}

// WithID adds the id to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithID(id string) *CustomerPrototypePutPortForwardParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetID(id string) {
	o.ID = id
}

// WithInternalPort adds the internalPort to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithInternalPort(internalPort *string) *CustomerPrototypePutPortForwardParams {
	o.SetInternalPort(internalPort)
	return o
}

// SetInternalPort adds the internalPort to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetInternalPort(internalPort *string) {
	o.InternalPort = internalPort
}

// WithLocationID adds the locationID to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithLocationID(locationID string) *CustomerPrototypePutPortForwardParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithMac adds the mac to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithMac(mac string) *CustomerPrototypePutPortForwardParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetMac(mac string) {
	o.Mac = mac
}

// WithName adds the name to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithName(name *string) *CustomerPrototypePutPortForwardParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetName(name *string) {
	o.Name = name
}

// WithProtocol adds the protocol to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) WithProtocol(protocol *string) *CustomerPrototypePutPortForwardParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the customer prototype put port forward params
func (o *CustomerPrototypePutPortForwardParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePutPortForwardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param externalPort
	if err := r.SetPathParam("externalPort", o.ExternalPort); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.InternalPort != nil {

		// form param internalPort
		var frInternalPort string
		if o.InternalPort != nil {
			frInternalPort = *o.InternalPort
		}
		fInternalPort := frInternalPort
		if fInternalPort != "" {
			if err := r.SetFormParam("internalPort", fInternalPort); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// path param mac
	if err := r.SetPathParam("mac", o.Mac); err != nil {
		return err
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// form param protocol
		var frProtocol string
		if o.Protocol != nil {
			frProtocol = *o.Protocol
		}
		fProtocol := frProtocol
		if fProtocol != "" {
			if err := r.SetFormParam("protocol", fProtocol); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
