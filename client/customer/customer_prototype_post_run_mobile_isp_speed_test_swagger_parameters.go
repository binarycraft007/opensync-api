// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePostRunMobileIspSpeedTestParams creates a new CustomerPrototypePostRunMobileIspSpeedTestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePostRunMobileIspSpeedTestParams() *CustomerPrototypePostRunMobileIspSpeedTestParams {
	return &CustomerPrototypePostRunMobileIspSpeedTestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithTimeout creates a new CustomerPrototypePostRunMobileIspSpeedTestParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithTimeout(timeout time.Duration) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	return &CustomerPrototypePostRunMobileIspSpeedTestParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithContext creates a new CustomerPrototypePostRunMobileIspSpeedTestParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithContext(ctx context.Context) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	return &CustomerPrototypePostRunMobileIspSpeedTestParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithHTTPClient creates a new CustomerPrototypePostRunMobileIspSpeedTestParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePostRunMobileIspSpeedTestParamsWithHTTPClient(client *http.Client) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	return &CustomerPrototypePostRunMobileIspSpeedTestParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePostRunMobileIspSpeedTestParams contains all the parameters to send to the API endpoint

	for the customer prototype post run mobile isp speed test operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePostRunMobileIspSpeedTestParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	// RequestID.
	RequestID *string

	// ServerID.
	//
	// Format: double
	ServerID *float64

	// UplinkType.
	//
	// Default: "wire"
	UplinkType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype post run mobile isp speed test params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithDefaults() *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype post run mobile isp speed test params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetDefaults() {
	var (
		uplinkTypeDefault = string("wire")
	)

	val := CustomerPrototypePostRunMobileIspSpeedTestParams{
		UplinkType: &uplinkTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithTimeout(timeout time.Duration) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithContext(ctx context.Context) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithHTTPClient(client *http.Client) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithID(id string) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithLocationID(locationID string) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithRequestID adds the requestID to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithRequestID(requestID *string) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetRequestID(requestID)
	return o
}

// SetRequestID adds the requestId to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetRequestID(requestID *string) {
	o.RequestID = requestID
}

// WithServerID adds the serverID to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithServerID(serverID *float64) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetServerID(serverID)
	return o
}

// SetServerID adds the serverId to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetServerID(serverID *float64) {
	o.ServerID = serverID
}

// WithUplinkType adds the uplinkType to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WithUplinkType(uplinkType *string) *CustomerPrototypePostRunMobileIspSpeedTestParams {
	o.SetUplinkType(uplinkType)
	return o
}

// SetUplinkType adds the uplinkType to the customer prototype post run mobile isp speed test params
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) SetUplinkType(uplinkType *string) {
	o.UplinkType = uplinkType
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePostRunMobileIspSpeedTestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.RequestID != nil {

		// form param requestId
		var frRequestID string
		if o.RequestID != nil {
			frRequestID = *o.RequestID
		}
		fRequestID := frRequestID
		if fRequestID != "" {
			if err := r.SetFormParam("requestId", fRequestID); err != nil {
				return err
			}
		}
	}

	if o.ServerID != nil {

		// form param serverId
		var frServerID float64
		if o.ServerID != nil {
			frServerID = *o.ServerID
		}
		fServerID := swag.FormatFloat64(frServerID)
		if fServerID != "" {
			if err := r.SetFormParam("serverId", fServerID); err != nil {
				return err
			}
		}
	}

	if o.UplinkType != nil {

		// form param uplinkType
		var frUplinkType string
		if o.UplinkType != nil {
			frUplinkType = *o.UplinkType
		}
		fUplinkType := frUplinkType
		if fUplinkType != "" {
			if err := r.SetFormParam("uplinkType", fUplinkType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
