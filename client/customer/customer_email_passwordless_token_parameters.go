// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCustomerEmailPasswordlessTokenParams creates a new CustomerEmailPasswordlessTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerEmailPasswordlessTokenParams() *CustomerEmailPasswordlessTokenParams {
	return &CustomerEmailPasswordlessTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerEmailPasswordlessTokenParamsWithTimeout creates a new CustomerEmailPasswordlessTokenParams object
// with the ability to set a timeout on a request.
func NewCustomerEmailPasswordlessTokenParamsWithTimeout(timeout time.Duration) *CustomerEmailPasswordlessTokenParams {
	return &CustomerEmailPasswordlessTokenParams{
		timeout: timeout,
	}
}

// NewCustomerEmailPasswordlessTokenParamsWithContext creates a new CustomerEmailPasswordlessTokenParams object
// with the ability to set a context for a request.
func NewCustomerEmailPasswordlessTokenParamsWithContext(ctx context.Context) *CustomerEmailPasswordlessTokenParams {
	return &CustomerEmailPasswordlessTokenParams{
		Context: ctx,
	}
}

// NewCustomerEmailPasswordlessTokenParamsWithHTTPClient creates a new CustomerEmailPasswordlessTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerEmailPasswordlessTokenParamsWithHTTPClient(client *http.Client) *CustomerEmailPasswordlessTokenParams {
	return &CustomerEmailPasswordlessTokenParams{
		HTTPClient: client,
	}
}

/*
CustomerEmailPasswordlessTokenParams contains all the parameters to send to the API endpoint

	for the customer email passwordless token operation.

	Typically these are written to a http.Request.
*/
type CustomerEmailPasswordlessTokenParams struct {

	// Email.
	Email string

	// NotificationOptions.
	//
	// Format: JSON
	NotificationOptions *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer email passwordless token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerEmailPasswordlessTokenParams) WithDefaults() *CustomerEmailPasswordlessTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer email passwordless token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerEmailPasswordlessTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) WithTimeout(timeout time.Duration) *CustomerEmailPasswordlessTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) WithContext(ctx context.Context) *CustomerEmailPasswordlessTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) WithHTTPClient(client *http.Client) *CustomerEmailPasswordlessTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) WithEmail(email string) *CustomerEmailPasswordlessTokenParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) SetEmail(email string) {
	o.Email = email
}

// WithNotificationOptions adds the notificationOptions to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) WithNotificationOptions(notificationOptions *string) *CustomerEmailPasswordlessTokenParams {
	o.SetNotificationOptions(notificationOptions)
	return o
}

// SetNotificationOptions adds the notificationOptions to the customer email passwordless token params
func (o *CustomerEmailPasswordlessTokenParams) SetNotificationOptions(notificationOptions *string) {
	o.NotificationOptions = notificationOptions
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerEmailPasswordlessTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param email
	frEmail := o.Email
	fEmail := frEmail
	if fEmail != "" {
		if err := r.SetFormParam("email", fEmail); err != nil {
			return err
		}
	}

	if o.NotificationOptions != nil {

		// form param notificationOptions
		var frNotificationOptions string
		if o.NotificationOptions != nil {
			frNotificationOptions = *o.NotificationOptions
		}
		fNotificationOptions := frNotificationOptions
		if fNotificationOptions != "" {
			if err := r.SetFormParam("notificationOptions", fNotificationOptions); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
