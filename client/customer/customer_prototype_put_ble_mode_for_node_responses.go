// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePutBleModeForNodeReader is a Reader for the CustomerPrototypePutBleModeForNode structure.
type CustomerPrototypePutBleModeForNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePutBleModeForNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePutBleModeForNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePutBleModeForNodeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePutBleModeForNodeOK creates a CustomerPrototypePutBleModeForNodeOK with default headers values
func NewCustomerPrototypePutBleModeForNodeOK() *CustomerPrototypePutBleModeForNodeOK {
	return &CustomerPrototypePutBleModeForNodeOK{}
}

/*
CustomerPrototypePutBleModeForNodeOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePutBleModeForNodeOK struct {
	Payload *CustomerPrototypePutBleModeForNodeOKBody
}

// IsSuccess returns true when this customer prototype put ble mode for node o k response has a 2xx status code
func (o *CustomerPrototypePutBleModeForNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype put ble mode for node o k response has a 3xx status code
func (o *CustomerPrototypePutBleModeForNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype put ble mode for node o k response has a 4xx status code
func (o *CustomerPrototypePutBleModeForNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype put ble mode for node o k response has a 5xx status code
func (o *CustomerPrototypePutBleModeForNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype put ble mode for node o k response a status code equal to that given
func (o *CustomerPrototypePutBleModeForNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype put ble mode for node o k response
func (o *CustomerPrototypePutBleModeForNodeOK) Code() int {
	return 200
}

func (o *CustomerPrototypePutBleModeForNodeOK) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode][%d] customerPrototypePutBleModeForNodeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutBleModeForNodeOK) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode][%d] customerPrototypePutBleModeForNodeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutBleModeForNodeOK) GetPayload() *CustomerPrototypePutBleModeForNodeOKBody {
	return o.Payload
}

func (o *CustomerPrototypePutBleModeForNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CustomerPrototypePutBleModeForNodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePutBleModeForNodeDefault creates a CustomerPrototypePutBleModeForNodeDefault with default headers values
func NewCustomerPrototypePutBleModeForNodeDefault(code int) *CustomerPrototypePutBleModeForNodeDefault {
	return &CustomerPrototypePutBleModeForNodeDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePutBleModeForNodeDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePutBleModeForNodeDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype put ble mode for node default response has a 2xx status code
func (o *CustomerPrototypePutBleModeForNodeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype put ble mode for node default response has a 3xx status code
func (o *CustomerPrototypePutBleModeForNodeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype put ble mode for node default response has a 4xx status code
func (o *CustomerPrototypePutBleModeForNodeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype put ble mode for node default response has a 5xx status code
func (o *CustomerPrototypePutBleModeForNodeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype put ble mode for node default response a status code equal to that given
func (o *CustomerPrototypePutBleModeForNodeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype put ble mode for node default response
func (o *CustomerPrototypePutBleModeForNodeDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePutBleModeForNodeDefault) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode][%d] Customer.prototype.putBleModeForNode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutBleModeForNodeDefault) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode][%d] Customer.prototype.putBleModeForNode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutBleModeForNodeDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePutBleModeForNodeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CustomerPrototypePutBleModeForNodeOKBody customer prototype put ble mode for node o k body
swagger:model CustomerPrototypePutBleModeForNodeOKBody
*/
type CustomerPrototypePutBleModeForNodeOKBody struct {

	// mode
	Mode string `json:"mode,omitempty"`
}

// Validate validates this customer prototype put ble mode for node o k body
func (o *CustomerPrototypePutBleModeForNodeOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this customer prototype put ble mode for node o k body based on context it is used
func (o *CustomerPrototypePutBleModeForNodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CustomerPrototypePutBleModeForNodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CustomerPrototypePutBleModeForNodeOKBody) UnmarshalBinary(b []byte) error {
	var res CustomerPrototypePutBleModeForNodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
