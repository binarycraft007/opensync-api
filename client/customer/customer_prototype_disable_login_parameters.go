// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeDisableLoginParams creates a new CustomerPrototypeDisableLoginParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeDisableLoginParams() *CustomerPrototypeDisableLoginParams {
	return &CustomerPrototypeDisableLoginParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeDisableLoginParamsWithTimeout creates a new CustomerPrototypeDisableLoginParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeDisableLoginParamsWithTimeout(timeout time.Duration) *CustomerPrototypeDisableLoginParams {
	return &CustomerPrototypeDisableLoginParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeDisableLoginParamsWithContext creates a new CustomerPrototypeDisableLoginParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeDisableLoginParamsWithContext(ctx context.Context) *CustomerPrototypeDisableLoginParams {
	return &CustomerPrototypeDisableLoginParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeDisableLoginParamsWithHTTPClient creates a new CustomerPrototypeDisableLoginParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeDisableLoginParamsWithHTTPClient(client *http.Client) *CustomerPrototypeDisableLoginParams {
	return &CustomerPrototypeDisableLoginParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeDisableLoginParams contains all the parameters to send to the API endpoint

	for the customer prototype disable login operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeDisableLoginParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// TriggerReset.
	TriggerReset *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype disable login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDisableLoginParams) WithDefaults() *CustomerPrototypeDisableLoginParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype disable login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDisableLoginParams) SetDefaults() {
	var (
		triggerResetDefault = bool(false)
	)

	val := CustomerPrototypeDisableLoginParams{
		TriggerReset: &triggerResetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) WithTimeout(timeout time.Duration) *CustomerPrototypeDisableLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) WithContext(ctx context.Context) *CustomerPrototypeDisableLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) WithHTTPClient(client *http.Client) *CustomerPrototypeDisableLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) WithID(id string) *CustomerPrototypeDisableLoginParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) SetID(id string) {
	o.ID = id
}

// WithTriggerReset adds the triggerReset to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) WithTriggerReset(triggerReset *bool) *CustomerPrototypeDisableLoginParams {
	o.SetTriggerReset(triggerReset)
	return o
}

// SetTriggerReset adds the triggerReset to the customer prototype disable login params
func (o *CustomerPrototypeDisableLoginParams) SetTriggerReset(triggerReset *bool) {
	o.TriggerReset = triggerReset
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeDisableLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.TriggerReset != nil {

		// form param triggerReset
		var frTriggerReset bool
		if o.TriggerReset != nil {
			frTriggerReset = *o.TriggerReset
		}
		fTriggerReset := swag.FormatBool(frTriggerReset)
		if fTriggerReset != "" {
			if err := r.SetFormParam("triggerReset", fTriggerReset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
