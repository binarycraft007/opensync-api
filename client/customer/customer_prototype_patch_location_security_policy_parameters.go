// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePatchLocationSecurityPolicyParams creates a new CustomerPrototypePatchLocationSecurityPolicyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePatchLocationSecurityPolicyParams() *CustomerPrototypePatchLocationSecurityPolicyParams {
	return &CustomerPrototypePatchLocationSecurityPolicyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePatchLocationSecurityPolicyParamsWithTimeout creates a new CustomerPrototypePatchLocationSecurityPolicyParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePatchLocationSecurityPolicyParamsWithTimeout(timeout time.Duration) *CustomerPrototypePatchLocationSecurityPolicyParams {
	return &CustomerPrototypePatchLocationSecurityPolicyParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePatchLocationSecurityPolicyParamsWithContext creates a new CustomerPrototypePatchLocationSecurityPolicyParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePatchLocationSecurityPolicyParamsWithContext(ctx context.Context) *CustomerPrototypePatchLocationSecurityPolicyParams {
	return &CustomerPrototypePatchLocationSecurityPolicyParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePatchLocationSecurityPolicyParamsWithHTTPClient creates a new CustomerPrototypePatchLocationSecurityPolicyParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePatchLocationSecurityPolicyParamsWithHTTPClient(client *http.Client) *CustomerPrototypePatchLocationSecurityPolicyParams {
	return &CustomerPrototypePatchLocationSecurityPolicyParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePatchLocationSecurityPolicyParams contains all the parameters to send to the API endpoint

	for the customer prototype patch location security policy operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePatchLocationSecurityPolicyParams struct {

	/* AppliesToAllDevices.

	   hash map of security policy IDs that should be applied to all devices

	   Format: JSON
	*/
	AppliesToAllDevices *string

	/* Content.

	   Valid values: 'kids || teenagers || adBlocking || adultAndSensitive || workAppropriate'

	   Format: JSON
	*/
	Content *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// IotProtect.
	IotProtect *bool

	// LocationID.
	LocationID string

	// SecureAndProtect.
	SecureAndProtect *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype patch location security policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithDefaults() *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype patch location security policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithTimeout(timeout time.Duration) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithContext(ctx context.Context) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithHTTPClient(client *http.Client) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppliesToAllDevices adds the appliesToAllDevices to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithAppliesToAllDevices(appliesToAllDevices *string) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetAppliesToAllDevices(appliesToAllDevices)
	return o
}

// SetAppliesToAllDevices adds the appliesToAllDevices to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetAppliesToAllDevices(appliesToAllDevices *string) {
	o.AppliesToAllDevices = appliesToAllDevices
}

// WithContent adds the content to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithContent(content *string) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetContent(content *string) {
	o.Content = content
}

// WithID adds the id to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithID(id string) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetID(id string) {
	o.ID = id
}

// WithIotProtect adds the iotProtect to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithIotProtect(iotProtect *bool) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetIotProtect(iotProtect)
	return o
}

// SetIotProtect adds the iotProtect to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetIotProtect(iotProtect *bool) {
	o.IotProtect = iotProtect
}

// WithLocationID adds the locationID to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithLocationID(locationID string) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithSecureAndProtect adds the secureAndProtect to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WithSecureAndProtect(secureAndProtect *bool) *CustomerPrototypePatchLocationSecurityPolicyParams {
	o.SetSecureAndProtect(secureAndProtect)
	return o
}

// SetSecureAndProtect adds the secureAndProtect to the customer prototype patch location security policy params
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) SetSecureAndProtect(secureAndProtect *bool) {
	o.SecureAndProtect = secureAndProtect
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePatchLocationSecurityPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppliesToAllDevices != nil {

		// form param appliesToAllDevices
		var frAppliesToAllDevices string
		if o.AppliesToAllDevices != nil {
			frAppliesToAllDevices = *o.AppliesToAllDevices
		}
		fAppliesToAllDevices := frAppliesToAllDevices
		if fAppliesToAllDevices != "" {
			if err := r.SetFormParam("appliesToAllDevices", fAppliesToAllDevices); err != nil {
				return err
			}
		}
	}

	if o.Content != nil {

		// form param content
		var frContent string
		if o.Content != nil {
			frContent = *o.Content
		}
		fContent := frContent
		if fContent != "" {
			if err := r.SetFormParam("content", fContent); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IotProtect != nil {

		// form param iotProtect
		var frIotProtect bool
		if o.IotProtect != nil {
			frIotProtect = *o.IotProtect
		}
		fIotProtect := swag.FormatBool(frIotProtect)
		if fIotProtect != "" {
			if err := r.SetFormParam("iotProtect", fIotProtect); err != nil {
				return err
			}
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.SecureAndProtect != nil {

		// form param secureAndProtect
		var frSecureAndProtect bool
		if o.SecureAndProtect != nil {
			frSecureAndProtect = *o.SecureAndProtect
		}
		fSecureAndProtect := swag.FormatBool(frSecureAndProtect)
		if fSecureAndProtect != "" {
			if err := r.SetFormParam("secureAndProtect", fSecureAndProtect); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
