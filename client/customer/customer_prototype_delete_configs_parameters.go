// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeDeleteConfigsParams creates a new CustomerPrototypeDeleteConfigsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeDeleteConfigsParams() *CustomerPrototypeDeleteConfigsParams {
	return &CustomerPrototypeDeleteConfigsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeDeleteConfigsParamsWithTimeout creates a new CustomerPrototypeDeleteConfigsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeDeleteConfigsParamsWithTimeout(timeout time.Duration) *CustomerPrototypeDeleteConfigsParams {
	return &CustomerPrototypeDeleteConfigsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeDeleteConfigsParamsWithContext creates a new CustomerPrototypeDeleteConfigsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeDeleteConfigsParamsWithContext(ctx context.Context) *CustomerPrototypeDeleteConfigsParams {
	return &CustomerPrototypeDeleteConfigsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeDeleteConfigsParamsWithHTTPClient creates a new CustomerPrototypeDeleteConfigsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeDeleteConfigsParamsWithHTTPClient(client *http.Client) *CustomerPrototypeDeleteConfigsParams {
	return &CustomerPrototypeDeleteConfigsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeDeleteConfigsParams contains all the parameters to send to the API endpoint

	for the customer prototype delete configs operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeDeleteConfigsParams struct {

	/* DeviceFreeze.

	   Whether or not to delete device freeze templates
	*/
	DeviceFreeze *bool

	/* DeviceNicknames.

	   Whether or not to delete device nicknames
	*/
	DeviceNicknames *bool

	/* Devices.

	   Whether or not to delete devices related information
	*/
	Devices *bool

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	/* Managers.

	   Whether or not to delete managers of the location
	*/
	Managers *bool

	/* NetworkConfiguration.

	   Whether or not to delete network configuration
	*/
	NetworkConfiguration *bool

	/* OnboardingCheckpoints.

	   Whether or not to delete onboarding checkpoints
	*/
	OnboardingCheckpoints *bool

	/* Persons.

	   Whether or not to delete person information
	*/
	Persons *bool

	/* WanConfiguration.

	   Whether or not to delete wanConfiguration
	*/
	WanConfiguration *bool

	/* WifiNetwork.

	   Whether or not to delete wifi network
	*/
	WifiNetwork *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype delete configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDeleteConfigsParams) WithDefaults() *CustomerPrototypeDeleteConfigsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype delete configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeDeleteConfigsParams) SetDefaults() {
	var (
		deviceFreezeDefault = bool(false)

		deviceNicknamesDefault = bool(false)

		devicesDefault = bool(false)

		managersDefault = bool(false)

		networkConfigurationDefault = bool(false)

		onboardingCheckpointsDefault = bool(false)

		personsDefault = bool(false)

		wanConfigurationDefault = bool(false)

		wifiNetworkDefault = bool(false)
	)

	val := CustomerPrototypeDeleteConfigsParams{
		DeviceFreeze:          &deviceFreezeDefault,
		DeviceNicknames:       &deviceNicknamesDefault,
		Devices:               &devicesDefault,
		Managers:              &managersDefault,
		NetworkConfiguration:  &networkConfigurationDefault,
		OnboardingCheckpoints: &onboardingCheckpointsDefault,
		Persons:               &personsDefault,
		WanConfiguration:      &wanConfigurationDefault,
		WifiNetwork:           &wifiNetworkDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithTimeout(timeout time.Duration) *CustomerPrototypeDeleteConfigsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithContext(ctx context.Context) *CustomerPrototypeDeleteConfigsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithHTTPClient(client *http.Client) *CustomerPrototypeDeleteConfigsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceFreeze adds the deviceFreeze to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithDeviceFreeze(deviceFreeze *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetDeviceFreeze(deviceFreeze)
	return o
}

// SetDeviceFreeze adds the deviceFreeze to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetDeviceFreeze(deviceFreeze *bool) {
	o.DeviceFreeze = deviceFreeze
}

// WithDeviceNicknames adds the deviceNicknames to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithDeviceNicknames(deviceNicknames *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetDeviceNicknames(deviceNicknames)
	return o
}

// SetDeviceNicknames adds the deviceNicknames to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetDeviceNicknames(deviceNicknames *bool) {
	o.DeviceNicknames = deviceNicknames
}

// WithDevices adds the devices to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithDevices(devices *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetDevices(devices)
	return o
}

// SetDevices adds the devices to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetDevices(devices *bool) {
	o.Devices = devices
}

// WithID adds the id to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithID(id string) *CustomerPrototypeDeleteConfigsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithLocationID(locationID string) *CustomerPrototypeDeleteConfigsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithManagers adds the managers to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithManagers(managers *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetManagers(managers)
	return o
}

// SetManagers adds the managers to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetManagers(managers *bool) {
	o.Managers = managers
}

// WithNetworkConfiguration adds the networkConfiguration to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithNetworkConfiguration(networkConfiguration *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetNetworkConfiguration(networkConfiguration)
	return o
}

// SetNetworkConfiguration adds the networkConfiguration to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetNetworkConfiguration(networkConfiguration *bool) {
	o.NetworkConfiguration = networkConfiguration
}

// WithOnboardingCheckpoints adds the onboardingCheckpoints to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithOnboardingCheckpoints(onboardingCheckpoints *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetOnboardingCheckpoints(onboardingCheckpoints)
	return o
}

// SetOnboardingCheckpoints adds the onboardingCheckpoints to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetOnboardingCheckpoints(onboardingCheckpoints *bool) {
	o.OnboardingCheckpoints = onboardingCheckpoints
}

// WithPersons adds the persons to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithPersons(persons *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetPersons(persons)
	return o
}

// SetPersons adds the persons to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetPersons(persons *bool) {
	o.Persons = persons
}

// WithWanConfiguration adds the wanConfiguration to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithWanConfiguration(wanConfiguration *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetWanConfiguration(wanConfiguration)
	return o
}

// SetWanConfiguration adds the wanConfiguration to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetWanConfiguration(wanConfiguration *bool) {
	o.WanConfiguration = wanConfiguration
}

// WithWifiNetwork adds the wifiNetwork to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) WithWifiNetwork(wifiNetwork *bool) *CustomerPrototypeDeleteConfigsParams {
	o.SetWifiNetwork(wifiNetwork)
	return o
}

// SetWifiNetwork adds the wifiNetwork to the customer prototype delete configs params
func (o *CustomerPrototypeDeleteConfigsParams) SetWifiNetwork(wifiNetwork *bool) {
	o.WifiNetwork = wifiNetwork
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeDeleteConfigsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceFreeze != nil {

		// form param deviceFreeze
		var frDeviceFreeze bool
		if o.DeviceFreeze != nil {
			frDeviceFreeze = *o.DeviceFreeze
		}
		fDeviceFreeze := swag.FormatBool(frDeviceFreeze)
		if fDeviceFreeze != "" {
			if err := r.SetFormParam("deviceFreeze", fDeviceFreeze); err != nil {
				return err
			}
		}
	}

	if o.DeviceNicknames != nil {

		// form param deviceNicknames
		var frDeviceNicknames bool
		if o.DeviceNicknames != nil {
			frDeviceNicknames = *o.DeviceNicknames
		}
		fDeviceNicknames := swag.FormatBool(frDeviceNicknames)
		if fDeviceNicknames != "" {
			if err := r.SetFormParam("deviceNicknames", fDeviceNicknames); err != nil {
				return err
			}
		}
	}

	if o.Devices != nil {

		// form param devices
		var frDevices bool
		if o.Devices != nil {
			frDevices = *o.Devices
		}
		fDevices := swag.FormatBool(frDevices)
		if fDevices != "" {
			if err := r.SetFormParam("devices", fDevices); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Managers != nil {

		// form param managers
		var frManagers bool
		if o.Managers != nil {
			frManagers = *o.Managers
		}
		fManagers := swag.FormatBool(frManagers)
		if fManagers != "" {
			if err := r.SetFormParam("managers", fManagers); err != nil {
				return err
			}
		}
	}

	if o.NetworkConfiguration != nil {

		// form param networkConfiguration
		var frNetworkConfiguration bool
		if o.NetworkConfiguration != nil {
			frNetworkConfiguration = *o.NetworkConfiguration
		}
		fNetworkConfiguration := swag.FormatBool(frNetworkConfiguration)
		if fNetworkConfiguration != "" {
			if err := r.SetFormParam("networkConfiguration", fNetworkConfiguration); err != nil {
				return err
			}
		}
	}

	if o.OnboardingCheckpoints != nil {

		// form param onboardingCheckpoints
		var frOnboardingCheckpoints bool
		if o.OnboardingCheckpoints != nil {
			frOnboardingCheckpoints = *o.OnboardingCheckpoints
		}
		fOnboardingCheckpoints := swag.FormatBool(frOnboardingCheckpoints)
		if fOnboardingCheckpoints != "" {
			if err := r.SetFormParam("onboardingCheckpoints", fOnboardingCheckpoints); err != nil {
				return err
			}
		}
	}

	if o.Persons != nil {

		// form param persons
		var frPersons bool
		if o.Persons != nil {
			frPersons = *o.Persons
		}
		fPersons := swag.FormatBool(frPersons)
		if fPersons != "" {
			if err := r.SetFormParam("persons", fPersons); err != nil {
				return err
			}
		}
	}

	if o.WanConfiguration != nil {

		// form param wanConfiguration
		var frWanConfiguration bool
		if o.WanConfiguration != nil {
			frWanConfiguration = *o.WanConfiguration
		}
		fWanConfiguration := swag.FormatBool(frWanConfiguration)
		if fWanConfiguration != "" {
			if err := r.SetFormParam("wanConfiguration", fWanConfiguration); err != nil {
				return err
			}
		}
	}

	if o.WifiNetwork != nil {

		// form param wifiNetwork
		var frWifiNetwork bool
		if o.WifiNetwork != nil {
			frWifiNetwork = *o.WifiNetwork
		}
		fWifiNetwork := swag.FormatBool(frWifiNetwork)
		if fWifiNetwork != "" {
			if err := r.SetFormParam("wifiNetwork", fWifiNetwork); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
