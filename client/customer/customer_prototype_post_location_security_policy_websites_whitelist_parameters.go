// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams creates a new CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams() *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	return &CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithTimeout creates a new CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithTimeout(timeout time.Duration) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	return &CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithContext creates a new CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithContext(ctx context.Context) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	return &CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithHTTPClient creates a new CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParamsWithHTTPClient(client *http.Client) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	return &CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams contains all the parameters to send to the API endpoint

	for the customer prototype post location security policy websites whitelist operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams struct {

	/* AkamaiCategoryID.

	   the akamai category id, number

	   Format: double
	*/
	AkamaiCategoryID *float64

	// Direction.
	Direction *string

	// DNS.
	DNS *string

	/* EndTimestamp.

	   the end time stamp,  UTC unix epoch timestamp in ms

	   Format: double
	*/
	EndTimestamp *float64

	/* EventType.

	   EventType field from events response - can be 'kids', 'teenagers', 'secureAndProtect', etc
	*/
	EventType *string

	// GeoLocation.
	//
	// Format: JSON
	GeoLocation *string

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	LocationID string

	/* Source.

	   Source field from events response - can be 'brightcloud', 'webpulse', 'gatekeeper', 'gatekeeper-ohp'
	*/
	Source *string

	// Type.
	Type *string

	// Value.
	Value *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype post location security policy websites whitelist params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithDefaults() *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype post location security policy websites whitelist params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithTimeout(timeout time.Duration) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithContext(ctx context.Context) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithHTTPClient(client *http.Client) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAkamaiCategoryID adds the akamaiCategoryID to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithAkamaiCategoryID(akamaiCategoryID *float64) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetAkamaiCategoryID(akamaiCategoryID)
	return o
}

// SetAkamaiCategoryID adds the akamaiCategoryId to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetAkamaiCategoryID(akamaiCategoryID *float64) {
	o.AkamaiCategoryID = akamaiCategoryID
}

// WithDirection adds the direction to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithDirection(direction *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithDNS adds the dns to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithDNS(dns *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetDNS(dns)
	return o
}

// SetDNS adds the dns to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetDNS(dns *string) {
	o.DNS = dns
}

// WithEndTimestamp adds the endTimestamp to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithEndTimestamp(endTimestamp *float64) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetEndTimestamp(endTimestamp)
	return o
}

// SetEndTimestamp adds the endTimestamp to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetEndTimestamp(endTimestamp *float64) {
	o.EndTimestamp = endTimestamp
}

// WithEventType adds the eventType to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithEventType(eventType *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetEventType(eventType *string) {
	o.EventType = eventType
}

// WithGeoLocation adds the geoLocation to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithGeoLocation(geoLocation *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetGeoLocation(geoLocation)
	return o
}

// SetGeoLocation adds the geoLocation to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetGeoLocation(geoLocation *string) {
	o.GeoLocation = geoLocation
}

// WithID adds the id to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithID(id string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithLocationID(locationID string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithSource adds the source to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithSource(source *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetSource(source *string) {
	o.Source = source
}

// WithType adds the typeVar to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithType(typeVar *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithValue adds the value to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WithValue(value *string) *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the customer prototype post location security policy websites whitelist params
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) SetValue(value *string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AkamaiCategoryID != nil {

		// form param akamaiCategoryId
		var frAkamaiCategoryID float64
		if o.AkamaiCategoryID != nil {
			frAkamaiCategoryID = *o.AkamaiCategoryID
		}
		fAkamaiCategoryID := swag.FormatFloat64(frAkamaiCategoryID)
		if fAkamaiCategoryID != "" {
			if err := r.SetFormParam("akamaiCategoryId", fAkamaiCategoryID); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// form param direction
		var frDirection string
		if o.Direction != nil {
			frDirection = *o.Direction
		}
		fDirection := frDirection
		if fDirection != "" {
			if err := r.SetFormParam("direction", fDirection); err != nil {
				return err
			}
		}
	}

	if o.DNS != nil {

		// form param dns
		var frDNS string
		if o.DNS != nil {
			frDNS = *o.DNS
		}
		fDNS := frDNS
		if fDNS != "" {
			if err := r.SetFormParam("dns", fDNS); err != nil {
				return err
			}
		}
	}

	if o.EndTimestamp != nil {

		// form param endTimestamp
		var frEndTimestamp float64
		if o.EndTimestamp != nil {
			frEndTimestamp = *o.EndTimestamp
		}
		fEndTimestamp := swag.FormatFloat64(frEndTimestamp)
		if fEndTimestamp != "" {
			if err := r.SetFormParam("endTimestamp", fEndTimestamp); err != nil {
				return err
			}
		}
	}

	if o.EventType != nil {

		// form param eventType
		var frEventType string
		if o.EventType != nil {
			frEventType = *o.EventType
		}
		fEventType := frEventType
		if fEventType != "" {
			if err := r.SetFormParam("eventType", fEventType); err != nil {
				return err
			}
		}
	}

	if o.GeoLocation != nil {

		// form param geoLocation
		var frGeoLocation string
		if o.GeoLocation != nil {
			frGeoLocation = *o.GeoLocation
		}
		fGeoLocation := frGeoLocation
		if fGeoLocation != "" {
			if err := r.SetFormParam("geoLocation", fGeoLocation); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Source != nil {

		// form param source
		var frSource string
		if o.Source != nil {
			frSource = *o.Source
		}
		fSource := frSource
		if fSource != "" {
			if err := r.SetFormParam("source", fSource); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}
	}

	if o.Value != nil {

		// form param value
		var frValue string
		if o.Value != nil {
			frValue = *o.Value
		}
		fValue := frValue
		if fValue != "" {
			if err := r.SetFormParam("value", fValue); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
