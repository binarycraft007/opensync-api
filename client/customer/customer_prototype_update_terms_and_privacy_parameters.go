// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeUpdateTermsAndPrivacyParams creates a new CustomerPrototypeUpdateTermsAndPrivacyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeUpdateTermsAndPrivacyParams() *CustomerPrototypeUpdateTermsAndPrivacyParams {
	return &CustomerPrototypeUpdateTermsAndPrivacyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithTimeout creates a new CustomerPrototypeUpdateTermsAndPrivacyParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithTimeout(timeout time.Duration) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	return &CustomerPrototypeUpdateTermsAndPrivacyParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithContext creates a new CustomerPrototypeUpdateTermsAndPrivacyParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithContext(ctx context.Context) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	return &CustomerPrototypeUpdateTermsAndPrivacyParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithHTTPClient creates a new CustomerPrototypeUpdateTermsAndPrivacyParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeUpdateTermsAndPrivacyParamsWithHTTPClient(client *http.Client) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	return &CustomerPrototypeUpdateTermsAndPrivacyParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeUpdateTermsAndPrivacyParams contains all the parameters to send to the API endpoint

	for the customer prototype update terms and privacy operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeUpdateTermsAndPrivacyParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// PrivacyAcceptedAt.
	//
	// Format: date-time
	PrivacyAcceptedAt *strfmt.DateTime

	// PrivacyDocumentID.
	//
	// Format: double
	PrivacyDocumentID *float64

	// TermsAcceptedAt.
	//
	// Format: date-time
	TermsAcceptedAt *strfmt.DateTime

	// TermsDocumentID.
	//
	// Format: double
	TermsDocumentID *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype update terms and privacy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithDefaults() *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype update terms and privacy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithTimeout(timeout time.Duration) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithContext(ctx context.Context) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithHTTPClient(client *http.Client) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithID(id string) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetID(id string) {
	o.ID = id
}

// WithPrivacyAcceptedAt adds the privacyAcceptedAt to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithPrivacyAcceptedAt(privacyAcceptedAt *strfmt.DateTime) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetPrivacyAcceptedAt(privacyAcceptedAt)
	return o
}

// SetPrivacyAcceptedAt adds the privacyAcceptedAt to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetPrivacyAcceptedAt(privacyAcceptedAt *strfmt.DateTime) {
	o.PrivacyAcceptedAt = privacyAcceptedAt
}

// WithPrivacyDocumentID adds the privacyDocumentID to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithPrivacyDocumentID(privacyDocumentID *float64) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetPrivacyDocumentID(privacyDocumentID)
	return o
}

// SetPrivacyDocumentID adds the privacyDocumentId to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetPrivacyDocumentID(privacyDocumentID *float64) {
	o.PrivacyDocumentID = privacyDocumentID
}

// WithTermsAcceptedAt adds the termsAcceptedAt to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithTermsAcceptedAt(termsAcceptedAt *strfmt.DateTime) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetTermsAcceptedAt(termsAcceptedAt)
	return o
}

// SetTermsAcceptedAt adds the termsAcceptedAt to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetTermsAcceptedAt(termsAcceptedAt *strfmt.DateTime) {
	o.TermsAcceptedAt = termsAcceptedAt
}

// WithTermsDocumentID adds the termsDocumentID to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WithTermsDocumentID(termsDocumentID *float64) *CustomerPrototypeUpdateTermsAndPrivacyParams {
	o.SetTermsDocumentID(termsDocumentID)
	return o
}

// SetTermsDocumentID adds the termsDocumentId to the customer prototype update terms and privacy params
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) SetTermsDocumentID(termsDocumentID *float64) {
	o.TermsDocumentID = termsDocumentID
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeUpdateTermsAndPrivacyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.PrivacyAcceptedAt != nil {

		// form param privacyAcceptedAt
		var frPrivacyAcceptedAt strfmt.DateTime
		if o.PrivacyAcceptedAt != nil {
			frPrivacyAcceptedAt = *o.PrivacyAcceptedAt
		}
		fPrivacyAcceptedAt := frPrivacyAcceptedAt.String()
		if fPrivacyAcceptedAt != "" {
			if err := r.SetFormParam("privacyAcceptedAt", fPrivacyAcceptedAt); err != nil {
				return err
			}
		}
	}

	if o.PrivacyDocumentID != nil {

		// form param privacyDocumentId
		var frPrivacyDocumentID float64
		if o.PrivacyDocumentID != nil {
			frPrivacyDocumentID = *o.PrivacyDocumentID
		}
		fPrivacyDocumentID := swag.FormatFloat64(frPrivacyDocumentID)
		if fPrivacyDocumentID != "" {
			if err := r.SetFormParam("privacyDocumentId", fPrivacyDocumentID); err != nil {
				return err
			}
		}
	}

	if o.TermsAcceptedAt != nil {

		// form param termsAcceptedAt
		var frTermsAcceptedAt strfmt.DateTime
		if o.TermsAcceptedAt != nil {
			frTermsAcceptedAt = *o.TermsAcceptedAt
		}
		fTermsAcceptedAt := frTermsAcceptedAt.String()
		if fTermsAcceptedAt != "" {
			if err := r.SetFormParam("termsAcceptedAt", fTermsAcceptedAt); err != nil {
				return err
			}
		}
	}

	if o.TermsDocumentID != nil {

		// form param termsDocumentId
		var frTermsDocumentID float64
		if o.TermsDocumentID != nil {
			frTermsDocumentID = *o.TermsDocumentID
		}
		fTermsDocumentID := swag.FormatFloat64(frTermsDocumentID)
		if fTermsDocumentID != "" {
			if err := r.SetFormParam("termsDocumentId", fTermsDocumentID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
