// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerConfirm(params *CustomerConfirmParams, opts ...ClientOption) (*CustomerConfirmNoContent, error)

	CustomerCount(params *CustomerCountParams, opts ...ClientOption) (*CustomerCountOK, error)

	CustomerCreateOrUpdateUser(params *CustomerCreateOrUpdateUserParams, opts ...ClientOption) (*CustomerCreateOrUpdateUserOK, error)

	CustomerCustomCreate(params *CustomerCustomCreateParams, opts ...ClientOption) (*CustomerCustomCreateOK, error)

	CustomerEmailExists(params *CustomerEmailExistsParams, opts ...ClientOption) (*CustomerEmailExistsOK, error)

	CustomerEmailPasswordlessToken(params *CustomerEmailPasswordlessTokenParams, opts ...ClientOption) (*CustomerEmailPasswordlessTokenOK, error)

	CustomerFind(params *CustomerFindParams, opts ...ClientOption) (*CustomerFindOK, error)

	CustomerFindByID(params *CustomerFindByIDParams, opts ...ClientOption) (*CustomerFindByIDOK, error)

	CustomerImportData(params *CustomerImportDataParams, opts ...ClientOption) (*CustomerImportDataOK, error)

	CustomerLogin(params *CustomerLoginParams, opts ...ClientOption) (*CustomerLoginOK, error)

	CustomerLogoutPostCustomersLogout(params *CustomerLogoutPostCustomersLogoutParams, opts ...ClientOption) (*CustomerLogoutPostCustomersLogoutNoContent, error)

	CustomerPrototypeCreateMigration(params *CustomerPrototypeCreateMigrationParams, opts ...ClientOption) (*CustomerPrototypeCreateMigrationOK, error)

	CustomerPrototypeCreateAccessTokens(params *CustomerPrototypeCreateAccessTokensParams, opts ...ClientOption) (*CustomerPrototypeCreateAccessTokensOK, error)

	CustomerPrototypeDestroyMigration(params *CustomerPrototypeDestroyMigrationParams, opts ...ClientOption) (*CustomerPrototypeDestroyMigrationNoContent, error)

	CustomerPrototypeGetMigration(params *CustomerPrototypeGetMigrationParams, opts ...ClientOption) (*CustomerPrototypeGetMigrationOK, error)

	CustomerPrototypeGetRoles(params *CustomerPrototypeGetRolesParams, opts ...ClientOption) (*CustomerPrototypeGetRolesOK, error)

	CustomerPrototypeGetTermsAndPrivacyAccepted(params *CustomerPrototypeGetTermsAndPrivacyAcceptedParams, opts ...ClientOption) (*CustomerPrototypeGetTermsAndPrivacyAcceptedOK, error)

	CustomerPrototypeUpdateMigration(params *CustomerPrototypeUpdateMigrationParams, opts ...ClientOption) (*CustomerPrototypeUpdateMigrationOK, error)

	CustomerPrototypeAddDeviceVisibleToGuests(params *CustomerPrototypeAddDeviceVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypeAddDeviceVisibleToGuestsOK, error)

	CustomerPrototypeAppFacadeHome(params *CustomerPrototypeAppFacadeHomeParams, opts ...ClientOption) (*CustomerPrototypeAppFacadeHomeOK, error)

	CustomerPrototypeApproveDevices(params *CustomerPrototypeApproveDevicesParams, opts ...ClientOption) (*CustomerPrototypeApproveDevicesOK, error)

	CustomerPrototypeApproveWhitelistRequest(params *CustomerPrototypeApproveWhitelistRequestParams, opts ...ClientOption) (*CustomerPrototypeApproveWhitelistRequestNoContent, error)

	CustomerPrototypeBlockDevices(params *CustomerPrototypeBlockDevicesParams, opts ...ClientOption) (*CustomerPrototypeBlockDevicesOK, error)

	CustomerPrototypeClaimNode(params *CustomerPrototypeClaimNodeParams, opts ...ClientOption) (*CustomerPrototypeClaimNodeOK, error)

	CustomerPrototypeCreateGetMarketingExportDataAccessToken(params *CustomerPrototypeCreateGetMarketingExportDataAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateGetMarketingExportDataAccessTokenOK, error)

	CustomerPrototypeCreateIPLimitedAccessToken(params *CustomerPrototypeCreateIPLimitedAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateIPLimitedAccessTokenOK, error)

	CustomerPrototypeCreateLocation(params *CustomerPrototypeCreateLocationParams, opts ...ClientOption) (*CustomerPrototypeCreateLocationOK, error)

	CustomerPrototypeCreateNewPasswordlessToken(params *CustomerPrototypeCreateNewPasswordlessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateNewPasswordlessTokenOK, error)

	CustomerPrototypeCreateOauthAccessToken(params *CustomerPrototypeCreateOauthAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateOauthAccessTokenOK, error)

	CustomerPrototypeCreateOauthRefreshToken(params *CustomerPrototypeCreateOauthRefreshTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateOauthRefreshTokenOK, error)

	CustomerPrototypeCreatePatchServiceLevelAccessToken(params *CustomerPrototypeCreatePatchServiceLevelAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreatePatchServiceLevelAccessTokenOK, error)

	CustomerPrototypeCreateReadDNSAccessToken(params *CustomerPrototypeCreateReadDNSAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateReadDNSAccessTokenOK, error)

	CustomerPrototypeDeleteAllDeviceFreezes(params *CustomerPrototypeDeleteAllDeviceFreezesParams, opts ...ClientOption) (*CustomerPrototypeDeleteAllDeviceFreezesNoContent, error)

	CustomerPrototypeDeleteAppPrioritizationLocationConfig(params *CustomerPrototypeDeleteAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypeDeleteAppPrioritizationLocationConfigOK, error)

	CustomerPrototypeDeleteCaptivePortal(params *CustomerPrototypeDeleteCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypeDeleteCaptivePortalNoContent, error)

	CustomerPrototypeDeleteCaptivePortalAuthorizedClients(params *CustomerPrototypeDeleteCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypeDeleteCaptivePortalAuthorizedClientsNoContent, error)

	CustomerPrototypeDeleteConfigs(params *CustomerPrototypeDeleteConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteConfigsNoContent, error)

	CustomerPrototypeDeleteCustomSharedSchedule(params *CustomerPrototypeDeleteCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypeDeleteCustomSharedScheduleNoContent, error)

	CustomerPrototypeDeleteCustomer(params *CustomerPrototypeDeleteCustomerParams, opts ...ClientOption) (*CustomerPrototypeDeleteCustomerOK, error)

	CustomerPrototypeDeleteDeviceFreeze(params *CustomerPrototypeDeleteDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeNoContent, error)

	CustomerPrototypeDeleteDeviceFreezeAutoExpire(params *CustomerPrototypeDeleteDeviceFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeAutoExpireNoContent, error)

	CustomerPrototypeDeleteDeviceFreezeForever(params *CustomerPrototypeDeleteDeviceFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeForeverNoContent, error)

	CustomerPrototypeDeleteDeviceFreezeResidentialGwManaged(params *CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedNoContent, error)

	CustomerPrototypeDeleteDeviceFreezeSuspend(params *CustomerPrototypeDeleteDeviceFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeSuspendNoContent, error)

	CustomerPrototypeDeleteDeviceFromAccessZone(params *CustomerPrototypeDeleteDeviceFromAccessZoneParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFromAccessZoneOK, error)

	CustomerPrototypeDeleteDeviceFromPerson(params *CustomerPrototypeDeleteDeviceFromPersonParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFromPersonNoContent, error)

	CustomerPrototypeDeleteDeviceGroup(params *CustomerPrototypeDeleteDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceGroupNoContent, error)

	CustomerPrototypeDeleteDeviceQosPrioritization(params *CustomerPrototypeDeleteDeviceQosPrioritizationParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceQosPrioritizationNoContent, error)

	CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperience(params *CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceNoContent, error)

	CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelist(params *CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistNoContent, error)

	CustomerPrototypeDeleteDhcpReservation(params *CustomerPrototypeDeleteDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypeDeleteDhcpReservationOK, error)

	CustomerPrototypeDeleteForcedSteer(params *CustomerPrototypeDeleteForcedSteerParams, opts ...ClientOption) (*CustomerPrototypeDeleteForcedSteerOK, error)

	CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistNoContent, error)

	CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistNoContent, error)

	CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted, error)

	CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted, error)

	CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistNoContent, error)

	CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistNoContent, error)

	CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistNoContent, error)

	CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistNoContent, error)

	CustomerPrototypeDeleteFrontHaul(params *CustomerPrototypeDeleteFrontHaulParams, opts ...ClientOption) (*CustomerPrototypeDeleteFrontHaulNoContent, error)

	CustomerPrototypeDeleteGdprCaptivePortalsData(params *CustomerPrototypeDeleteGdprCaptivePortalsDataParams, opts ...ClientOption) (*CustomerPrototypeDeleteGdprCaptivePortalsDataOK, error)

	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpire(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireNoContent, error)

	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForever(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverNoContent, error)

	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspend(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendNoContent, error)

	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateID(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDNoContent, error)

	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezes(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesNoContent, error)

	CustomerPrototypeDeleteKvConfigs(params *CustomerPrototypeDeleteKvConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteKvConfigsOK, error)

	CustomerPrototypeDeleteLinkedAccount(params *CustomerPrototypeDeleteLinkedAccountParams, opts ...ClientOption) (*CustomerPrototypeDeleteLinkedAccountOK, error)

	CustomerPrototypeDeleteLocation(params *CustomerPrototypeDeleteLocationParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationNoContent, error)

	CustomerPrototypeDeleteLocationEventsHistory(params *CustomerPrototypeDeleteLocationEventsHistoryParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationEventsHistoryNoContent, error)

	CustomerPrototypeDeleteLocationFreezeAutoExpire(params *CustomerPrototypeDeleteLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationFreezeAutoExpireOK, error)

	CustomerPrototypeDeleteManagerAccess(params *CustomerPrototypeDeleteManagerAccessParams, opts ...ClientOption) (*CustomerPrototypeDeleteManagerAccessOK, error)

	CustomerPrototypeDeleteNodeLocked(params *CustomerPrototypeDeleteNodeLockedParams, opts ...ClientOption) (*CustomerPrototypeDeleteNodeLockedOK, error)

	CustomerPrototypeDeleteNodePersistentConfigs(params *CustomerPrototypeDeleteNodePersistentConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteNodePersistentConfigsNoContent, error)

	CustomerPrototypeDeletePerson(params *CustomerPrototypeDeletePersonParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonNoContent, error)

	CustomerPrototypeDeletePersonAllFreeze(params *CustomerPrototypeDeletePersonAllFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonAllFreezeNoContent, error)

	CustomerPrototypeDeletePersonFreeze(params *CustomerPrototypeDeletePersonFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeNoContent, error)

	CustomerPrototypeDeletePersonFreezeAutoExpire(params *CustomerPrototypeDeletePersonFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeAutoExpireNoContent, error)

	CustomerPrototypeDeletePersonFreezeForever(params *CustomerPrototypeDeletePersonFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeForeverNoContent, error)

	CustomerPrototypeDeletePersonFreezeSuspend(params *CustomerPrototypeDeletePersonFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeSuspendNoContent, error)

	CustomerPrototypeDeletePersonProfile(params *CustomerPrototypeDeletePersonProfileParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonProfileNoContent, error)

	CustomerPrototypeDeletePortForward(params *CustomerPrototypeDeletePortForwardParams, opts ...ClientOption) (*CustomerPrototypeDeletePortForwardOK, error)

	CustomerPrototypeDeleteRemoteConnectionsAllow(params *CustomerPrototypeDeleteRemoteConnectionsAllowParams, opts ...ClientOption) (*CustomerPrototypeDeleteRemoteConnectionsAllowOK, error)

	CustomerPrototypeDeleteRemoteConnectionsAllowAll(params *CustomerPrototypeDeleteRemoteConnectionsAllowAllParams, opts ...ClientOption) (*CustomerPrototypeDeleteRemoteConnectionsAllowAllOK, error)

	CustomerPrototypeDeleteRoom(params *CustomerPrototypeDeleteRoomParams, opts ...ClientOption) (*CustomerPrototypeDeleteRoomNoContent, error)

	CustomerPrototypeDeleteWifiAccessZone(params *CustomerPrototypeDeleteWifiAccessZoneParams, opts ...ClientOption) (*CustomerPrototypeDeleteWifiAccessZoneOK, error)

	CustomerPrototypeDeleteWifiKey(params *CustomerPrototypeDeleteWifiKeyParams, opts ...ClientOption) (*CustomerPrototypeDeleteWifiKeyOK, error)

	CustomerPrototypeDisableLogin(params *CustomerPrototypeDisableLoginParams, opts ...ClientOption) (*CustomerPrototypeDisableLoginNoContent, error)

	CustomerPrototypeEnableDeviceTypeSniffing(params *CustomerPrototypeEnableDeviceTypeSniffingParams, opts ...ClientOption) (*CustomerPrototypeEnableDeviceTypeSniffingNoContent, error)

	CustomerPrototypeEnableLogin(params *CustomerPrototypeEnableLoginParams, opts ...ClientOption) (*CustomerPrototypeEnableLoginNoContent, error)

	CustomerPrototypeFactoryReset(params *CustomerPrototypeFactoryResetParams, opts ...ClientOption) (*CustomerPrototypeFactoryResetNoContent, error)

	CustomerPrototypeFindLocationByID(params *CustomerPrototypeFindLocationByIDParams, opts ...ClientOption) (*CustomerPrototypeFindLocationByIDOK, error)

	CustomerPrototypeGetAccessTokenForManagedLocation(params *CustomerPrototypeGetAccessTokenForManagedLocationParams, opts ...ClientOption) (*CustomerPrototypeGetAccessTokenForManagedLocationOK, error)

	CustomerPrototypeGetAlerts(params *CustomerPrototypeGetAlertsParams, opts ...ClientOption) (*CustomerPrototypeGetAlertsOK, error)

	CustomerPrototypeGetAppEngagementTimer(params *CustomerPrototypeGetAppEngagementTimerParams, opts ...ClientOption) (*CustomerPrototypeGetAppEngagementTimerOK, error)

	CustomerPrototypeGetAppIDInfoCaptivePortalNetwork(params *CustomerPrototypeGetAppIDInfoCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetAppIDInfoCaptivePortalNetworkOK, error)

	CustomerPrototypeGetAppPrioritizationLocationConfig(params *CustomerPrototypeGetAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationLocationConfigOK, error)

	CustomerPrototypeGetAppPrioritizationMonitoring(params *CustomerPrototypeGetAppPrioritizationMonitoringParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationMonitoringOK, error)

	CustomerPrototypeGetAppPrioritizationTemplateConfig(params *CustomerPrototypeGetAppPrioritizationTemplateConfigParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationTemplateConfigOK, error)

	CustomerPrototypeGetAppQoeStatsByTrafficClass(params *CustomerPrototypeGetAppQoeStatsByTrafficClassParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeStatsByTrafficClassOK, error)

	CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStats(params *CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK, error)

	CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStats(params *CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK, error)

	CustomerPrototypeGetAppTimeIPFlows(params *CustomerPrototypeGetAppTimeIPFlowsParams, opts ...ClientOption) (*CustomerPrototypeGetAppTimeIPFlowsOK, error)

	CustomerPrototypeGetAuditTrailForCustomer(params *CustomerPrototypeGetAuditTrailForCustomerParams, opts ...ClientOption) (*CustomerPrototypeGetAuditTrailForCustomerOK, error)

	CustomerPrototypeGetAuditTrailForLocation(params *CustomerPrototypeGetAuditTrailForLocationParams, opts ...ClientOption) (*CustomerPrototypeGetAuditTrailForLocationOK, error)

	CustomerPrototypeGetAuthorizations(params *CustomerPrototypeGetAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypeGetAuthorizationsOK, error)

	CustomerPrototypeGetBackhaul(params *CustomerPrototypeGetBackhaulParams, opts ...ClientOption) (*CustomerPrototypeGetBackhaulOK, error)

	CustomerPrototypeGetCampaignCaptivePortalNetwork(params *CustomerPrototypeGetCampaignCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetCampaignCaptivePortalNetworkOK, error)

	CustomerPrototypeGetCaptivePortalAuthorizedClients(params *CustomerPrototypeGetCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalAuthorizedClientsOK, error)

	CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfo(params *CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoOK, error)

	CustomerPrototypeGetCaptivePortalGuests(params *CustomerPrototypeGetCaptivePortalGuestsParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalGuestsOK, error)

	CustomerPrototypeGetCaptivePortalNetworks(params *CustomerPrototypeGetCaptivePortalNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalNetworksOK, error)

	CustomerPrototypeGetCaptivePortalSendDetails(params *CustomerPrototypeGetCaptivePortalSendDetailsParams, writer io.Writer, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalSendDetailsOK, error)

	CustomerPrototypeGetCaptivePortalSendDetailsDirect(params *CustomerPrototypeGetCaptivePortalSendDetailsDirectParams, writer io.Writer, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalSendDetailsDirectOK, error)

	CustomerPrototypeGetCommands(params *CustomerPrototypeGetCommandsParams, opts ...ClientOption) (*CustomerPrototypeGetCommandsOK, error)

	CustomerPrototypeGetCompanyInfoCaptivePortalNetwork(params *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetCompanyInfoCaptivePortalNetworkOK, error)

	CustomerPrototypeGetControlMode(params *CustomerPrototypeGetControlModeParams, opts ...ClientOption) (*CustomerPrototypeGetControlModeOK, error)

	CustomerPrototypeGetCustomerNodeByID(params *CustomerPrototypeGetCustomerNodeByIDParams, opts ...ClientOption) (*CustomerPrototypeGetCustomerNodeByIDOK, error)

	CustomerPrototypeGetCustomerSupportConfigurations(params *CustomerPrototypeGetCustomerSupportConfigurationsParams, opts ...ClientOption) (*CustomerPrototypeGetCustomerSupportConfigurationsOK, error)

	CustomerPrototypeGetDashboard(params *CustomerPrototypeGetDashboardParams, opts ...ClientOption) (*CustomerPrototypeGetDashboardOK, error)

	CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageOK, error)

	CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeOK, error)

	CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageOK, error)

	CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeOK, error)

	CustomerPrototypeGetDeviceAlarms(params *CustomerPrototypeGetDeviceAlarmsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAlarmsOK, error)

	CustomerPrototypeGetDeviceAppTimeAppsDataUsage(params *CustomerPrototypeGetDeviceAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeAppsDataUsageOK, error)

	CustomerPrototypeGetDeviceAppTimeAppsOnlineTime(params *CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeOK, error)

	CustomerPrototypeGetDeviceAppTimeCategoriesDataUsage(params *CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageOK, error)

	CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeOK, error)

	CustomerPrototypeGetDeviceBandSteeringStats(params *CustomerPrototypeGetDeviceBandSteeringStatsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceBandSteeringStatsOK, error)

	CustomerPrototypeGetDeviceByMac(params *CustomerPrototypeGetDeviceByMacParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceByMacOK, error)

	CustomerPrototypeGetDeviceClientSteeringStats(params *CustomerPrototypeGetDeviceClientSteeringStatsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceClientSteeringStatsOK, error)

	CustomerPrototypeGetDeviceGroups(params *CustomerPrototypeGetDeviceGroupsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceGroupsOK, error)

	CustomerPrototypeGetDeviceQoeMetrics(params *CustomerPrototypeGetDeviceQoeMetricsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceQoeMetricsOK, error)

	CustomerPrototypeGetDeviceSecurity(params *CustomerPrototypeGetDeviceSecurityParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityOK, error)

	CustomerPrototypeGetDeviceSecurityPolicyEvents(params *CustomerPrototypeGetDeviceSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityPolicyEventsOK, error)

	CustomerPrototypeGetDeviceSecurityPolicyHourlyCounts(params *CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsOK, error)

	CustomerPrototypeGetDeviceSoundingState(params *CustomerPrototypeGetDeviceSoundingStateParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSoundingStateOK, error)

	CustomerPrototypeGetDeviceSteeringWithAthena(params *CustomerPrototypeGetDeviceSteeringWithAthenaParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSteeringWithAthenaOK, error)

	CustomerPrototypeGetDevices(params *CustomerPrototypeGetDevicesParams, opts ...ClientOption) (*CustomerPrototypeGetDevicesOK, error)

	CustomerPrototypeGetDhcp(params *CustomerPrototypeGetDhcpParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpOK, error)

	CustomerPrototypeGetDhcpReservation(params *CustomerPrototypeGetDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpReservationOK, error)

	CustomerPrototypeGetDhcpReservations(params *CustomerPrototypeGetDhcpReservationsParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpReservationsOK, error)

	CustomerPrototypeGetDNSServers(params *CustomerPrototypeGetDNSServersParams, opts ...ClientOption) (*CustomerPrototypeGetDNSServersOK, error)

	CustomerPrototypeGetDpp(params *CustomerPrototypeGetDppParams, opts ...ClientOption) (*CustomerPrototypeGetDppOK, error)

	CustomerPrototypeGetDppAnnouncementsFromController(params *CustomerPrototypeGetDppAnnouncementsFromControllerParams, opts ...ClientOption) (*CustomerPrototypeGetDppAnnouncementsFromControllerOK, error)

	CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageOK, error)

	CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeOK, error)

	CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageOK, error)

	CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeOK, error)

	CustomerPrototypeGetEntitledAccessList(params *CustomerPrototypeGetEntitledAccessListParams, opts ...ClientOption) (*CustomerPrototypeGetEntitledAccessListOK, error)

	CustomerPrototypeGetEventHistory(params *CustomerPrototypeGetEventHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetEventHistoryOK, error)

	CustomerPrototypeGetFastInterference(params *CustomerPrototypeGetFastInterferenceParams, opts ...ClientOption) (*CustomerPrototypeGetFastInterferenceOK, error)

	CustomerPrototypeGetFirmwareUpgradeStatus(params *CustomerPrototypeGetFirmwareUpgradeStatusParams, opts ...ClientOption) (*CustomerPrototypeGetFirmwareUpgradeStatusOK, error)

	CustomerPrototypeGetFlowStats(params *CustomerPrototypeGetFlowStatsParams, opts ...ClientOption) (*CustomerPrototypeGetFlowStatsOK, error)

	CustomerPrototypeGetForceGraph(params *CustomerPrototypeGetForceGraphParams, opts ...ClientOption) (*CustomerPrototypeGetForceGraphOK, error)

	CustomerPrototypeGetFrontHaulNetworks(params *CustomerPrototypeGetFrontHaulNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetFrontHaulNetworksOK, error)

	CustomerPrototypeGetFrontHaulsDpp(params *CustomerPrototypeGetFrontHaulsDppParams, opts ...ClientOption) (*CustomerPrototypeGetFrontHaulsDppOK, error)

	CustomerPrototypeGetFrontlineStorage(params *CustomerPrototypeGetFrontlineStorageParams, opts ...ClientOption) (*CustomerPrototypeGetFrontlineStorageOK, error)

	CustomerPrototypeGetGdprCaptivePortalsData(params *CustomerPrototypeGetGdprCaptivePortalsDataParams, opts ...ClientOption) (*CustomerPrototypeGetGdprCaptivePortalsDataOK, error)

	CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicy(params *CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyOK, error)

	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicy(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyOK, error)

	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEvents(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsOK, error)

	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCounts(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsOK, error)

	CustomerPrototypeGetGroups(params *CustomerPrototypeGetGroupsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupsOK, error)

	CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageOK, error)

	CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeOK, error)

	CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageOK, error)

	CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeOK, error)

	CustomerPrototypeGetHomeAwayLocationEvents(params *CustomerPrototypeGetHomeAwayLocationEventsParams, opts ...ClientOption) (*CustomerPrototypeGetHomeAwayLocationEventsOK, error)

	CustomerPrototypeGetHomeSecurity(params *CustomerPrototypeGetHomeSecurityParams, opts ...ClientOption) (*CustomerPrototypeGetHomeSecurityOK, error)

	CustomerPrototypeGetIPV6(params *CustomerPrototypeGetIPV6Params, opts ...ClientOption) (*CustomerPrototypeGetIPV6OK, error)

	CustomerPrototypeGetKvConfigs(params *CustomerPrototypeGetKvConfigsParams, opts ...ClientOption) (*CustomerPrototypeGetKvConfigsOK, error)

	CustomerPrototypeGetLocationAppTime(params *CustomerPrototypeGetLocationAppTimeParams, opts ...ClientOption) (*CustomerPrototypeGetLocationAppTimeOK, error)

	CustomerPrototypeGetLocationCapabilities(params *CustomerPrototypeGetLocationCapabilitiesParams, opts ...ClientOption) (*CustomerPrototypeGetLocationCapabilitiesOK, error)

	CustomerPrototypeGetLocationConfigAuditEvents(params *CustomerPrototypeGetLocationConfigAuditEventsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationConfigAuditEventsOK, error)

	CustomerPrototypeGetLocationFreezeAutoExpire(params *CustomerPrototypeGetLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeGetLocationFreezeAutoExpireOK, error)

	CustomerPrototypeGetLocationGuardEventStats(params *CustomerPrototypeGetLocationGuardEventStatsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardEventStatsOK, error)

	CustomerPrototypeGetLocationGuardEventsTldOrIP(params *CustomerPrototypeGetLocationGuardEventsTldOrIPParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardEventsTldOrIPOK, error)

	CustomerPrototypeGetLocationGuardPersonEventsSummary(params *CustomerPrototypeGetLocationGuardPersonEventsSummaryParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardPersonEventsSummaryOK, error)

	CustomerPrototypeGetLocationKvStates(params *CustomerPrototypeGetLocationKvStatesParams, opts ...ClientOption) (*CustomerPrototypeGetLocationKvStatesOK, error)

	CustomerPrototypeGetLocationOverlordConfigs(params *CustomerPrototypeGetLocationOverlordConfigsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationOverlordConfigsOK, error)

	CustomerPrototypeGetLocationQoe(params *CustomerPrototypeGetLocationQoeParams, opts ...ClientOption) (*CustomerPrototypeGetLocationQoeOK, error)

	CustomerPrototypeGetLocationRooms(params *CustomerPrototypeGetLocationRoomsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationRoomsOK, error)

	CustomerPrototypeGetLocationSecurityPolicy(params *CustomerPrototypeGetLocationSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyOK, error)

	CustomerPrototypeGetLocationSecurityPolicyEvents(params *CustomerPrototypeGetLocationSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyEventsOK, error)

	CustomerPrototypeGetLocationSecurityPolicyHourlyCounts(params *CustomerPrototypeGetLocationSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyHourlyCountsOK, error)

	CustomerPrototypeGetLocationWanConfiguration(params *CustomerPrototypeGetLocationWanConfigurationParams, opts ...ClientOption) (*CustomerPrototypeGetLocationWanConfigurationOK, error)

	CustomerPrototypeGetLocationWanSettings(params *CustomerPrototypeGetLocationWanSettingsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationWanSettingsOK, error)

	CustomerPrototypeGetLocations(params *CustomerPrototypeGetLocationsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationsOK, error)

	CustomerPrototypeGetManagersListForLocation(params *CustomerPrototypeGetManagersListForLocationParams, opts ...ClientOption) (*CustomerPrototypeGetManagersListForLocationOK, error)

	CustomerPrototypeGetModulesFromController(params *CustomerPrototypeGetModulesFromControllerParams, opts ...ClientOption) (*CustomerPrototypeGetModulesFromControllerOK, error)

	CustomerPrototypeGetMotionHistory(params *CustomerPrototypeGetMotionHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetMotionHistoryOK, error)

	CustomerPrototypeGetMotionStateHistory(params *CustomerPrototypeGetMotionStateHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetMotionStateHistoryOK, error)

	CustomerPrototypeGetNetworkAccessNetworks(params *CustomerPrototypeGetNetworkAccessNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkAccessNetworksOK, error)

	CustomerPrototypeGetNetworkConfigurationHome(params *CustomerPrototypeGetNetworkConfigurationHomeParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkConfigurationHomeOK, error)

	CustomerPrototypeGetNetworkMode(params *CustomerPrototypeGetNetworkModeParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkModeOK, error)

	CustomerPrototypeGetNodeBlePairingPin(params *CustomerPrototypeGetNodeBlePairingPinParams, opts ...ClientOption) (*CustomerPrototypeGetNodeBlePairingPinOK, error)

	CustomerPrototypeGetNodeBySerialNumber(params *CustomerPrototypeGetNodeBySerialNumberParams, opts ...ClientOption) (*CustomerPrototypeGetNodeBySerialNumberOK, error)

	CustomerPrototypeGetNodeKvStates(params *CustomerPrototypeGetNodeKvStatesParams, opts ...ClientOption) (*CustomerPrototypeGetNodeKvStatesOK, error)

	CustomerPrototypeGetNodes(params *CustomerPrototypeGetNodesParams, opts ...ClientOption) (*CustomerPrototypeGetNodesOK, error)

	CustomerPrototypeGetOhpLocationIdentifier(params *CustomerPrototypeGetOhpLocationIdentifierParams, opts ...ClientOption) (*CustomerPrototypeGetOhpLocationIdentifierOK, error)

	CustomerPrototypeGetOnboardingLocationIdentifier(params *CustomerPrototypeGetOnboardingLocationIdentifierParams, opts ...ClientOption) (*CustomerPrototypeGetOnboardingLocationIdentifierOK, error)

	CustomerPrototypeGetPersonAppTimeAppsDataUsage(params *CustomerPrototypeGetPersonAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeAppsDataUsageOK, error)

	CustomerPrototypeGetPersonAppTimeAppsOnlineTime(params *CustomerPrototypeGetPersonAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeAppsOnlineTimeOK, error)

	CustomerPrototypeGetPersonAppTimeCategoriesDataUsage(params *CustomerPrototypeGetPersonAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeCategoriesDataUsageOK, error)

	CustomerPrototypeGetPersonAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeOK, error)

	CustomerPrototypeGetPersonByID(params *CustomerPrototypeGetPersonByIDParams, opts ...ClientOption) (*CustomerPrototypeGetPersonByIDOK, error)

	CustomerPrototypeGetPersonSecurityPolicyEvents(params *CustomerPrototypeGetPersonSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonSecurityPolicyEventsOK, error)

	CustomerPrototypeGetPersonSecurityPolicyHourlyCounts(params *CustomerPrototypeGetPersonSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonSecurityPolicyHourlyCountsOK, error)

	CustomerPrototypeGetPersons(params *CustomerPrototypeGetPersonsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonsOK, error)

	CustomerPrototypeGetPortForwards(params *CustomerPrototypeGetPortForwardsParams, opts ...ClientOption) (*CustomerPrototypeGetPortForwardsOK, error)

	CustomerPrototypeGetPrimarySecondaryNetworks(params *CustomerPrototypeGetPrimarySecondaryNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetPrimarySecondaryNetworksOK, error)

	CustomerPrototypeGetQoe1Minute(params *CustomerPrototypeGetQoe1MinuteParams, opts ...ClientOption) (*CustomerPrototypeGetQoe1MinuteOK, error)

	CustomerPrototypeGetQoeSeconds(params *CustomerPrototypeGetQoeSecondsParams, opts ...ClientOption) (*CustomerPrototypeGetQoeSecondsOK, error)

	CustomerPrototypeGetRemoteConnectionsConfig(params *CustomerPrototypeGetRemoteConnectionsConfigParams, opts ...ClientOption) (*CustomerPrototypeGetRemoteConnectionsConfigOK, error)

	CustomerPrototypeGetSecondaryNetworkInvitation(params *CustomerPrototypeGetSecondaryNetworkInvitationParams, opts ...ClientOption) (*CustomerPrototypeGetSecondaryNetworkInvitationOK, error)

	CustomerPrototypeGetSecurityRealizedStates(params *CustomerPrototypeGetSecurityRealizedStatesParams, opts ...ClientOption) (*CustomerPrototypeGetSecurityRealizedStatesOK, error)

	CustomerPrototypeGetServiceLevel(params *CustomerPrototypeGetServiceLevelParams, opts ...ClientOption) (*CustomerPrototypeGetServiceLevelOK, error)

	CustomerPrototypeGetSniffing(params *CustomerPrototypeGetSniffingParams, opts ...ClientOption) (*CustomerPrototypeGetSniffingOK, error)

	CustomerPrototypeGetSpeedTestResults(params *CustomerPrototypeGetSpeedTestResultsParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsOK, error)

	CustomerPrototypeGetSpeedTestResultsByRequestID(params *CustomerPrototypeGetSpeedTestResultsByRequestIDParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsByRequestIDOK, error)

	CustomerPrototypeGetSpeedTestResultsForApp(params *CustomerPrototypeGetSpeedTestResultsForAppParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsForAppOK, error)

	CustomerPrototypeGetSsid(params *CustomerPrototypeGetSsidParams, opts ...ClientOption) (*CustomerPrototypeGetSsidOK, error)

	CustomerPrototypeGetSubscription(params *CustomerPrototypeGetSubscriptionParams, opts ...ClientOption) (*CustomerPrototypeGetSubscriptionOK, error)

	CustomerPrototypeGetSummary(params *CustomerPrototypeGetSummaryParams, opts ...ClientOption) (*CustomerPrototypeGetSummaryOK, error)

	CustomerPrototypeGetTaskStatuses(params *CustomerPrototypeGetTaskStatusesParams, opts ...ClientOption) (*CustomerPrototypeGetTaskStatusesOK, error)

	CustomerPrototypeGetTopology(params *CustomerPrototypeGetTopologyParams, opts ...ClientOption) (*CustomerPrototypeGetTopologyOK, error)

	CustomerPrototypeGetTos(params *CustomerPrototypeGetTosParams, opts ...ClientOption) (*CustomerPrototypeGetTosOK, error)

	CustomerPrototypeGetUpnp(params *CustomerPrototypeGetUpnpParams, opts ...ClientOption) (*CustomerPrototypeGetUpnpOK, error)

	CustomerPrototypeGetVapStates(params *CustomerPrototypeGetVapStatesParams, opts ...ClientOption) (*CustomerPrototypeGetVapStatesOK, error)

	CustomerPrototypeGetVapsAndStaStatesFromBackhaul(params *CustomerPrototypeGetVapsAndStaStatesFromBackhaulParams, opts ...ClientOption) (*CustomerPrototypeGetVapsAndStaStatesFromBackhaulOK, error)

	CustomerPrototypeGetWhitelistApprovalRequests(params *CustomerPrototypeGetWhitelistApprovalRequestsParams, opts ...ClientOption) (*CustomerPrototypeGetWhitelistApprovalRequestsOK, error)

	CustomerPrototypeGetWifiDashboard(params *CustomerPrototypeGetWifiDashboardParams, opts ...ClientOption) (*CustomerPrototypeGetWifiDashboardOK, error)

	CustomerPrototypeGetWifiInvitationByID(params *CustomerPrototypeGetWifiInvitationByIDParams, opts ...ClientOption) (*CustomerPrototypeGetWifiInvitationByIDOK, error)

	CustomerPrototypeGetWifiMotion(params *CustomerPrototypeGetWifiMotionParams, opts ...ClientOption) (*CustomerPrototypeGetWifiMotionOK, error)

	CustomerPrototypeGetWifiNetwork(params *CustomerPrototypeGetWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworkOK, error)

	CustomerPrototypeGetWifiNetworkDpp(params *CustomerPrototypeGetWifiNetworkDppParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworkDppOK, error)

	CustomerPrototypeGetWifiNetworks(params *CustomerPrototypeGetWifiNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworksOK, error)

	CustomerPrototypeHasLocationByID(params *CustomerPrototypeHasLocationByIDParams, opts ...ClientOption) (*CustomerPrototypeHasLocationByIDOK, error)

	CustomerPrototypeIosDeviceTokenExists(params *CustomerPrototypeIosDeviceTokenExistsParams, opts ...ClientOption) (*CustomerPrototypeIosDeviceTokenExistsOK, error)

	CustomerPrototypeLinkAccount(params *CustomerPrototypeLinkAccountParams, opts ...ClientOption) (*CustomerPrototypeLinkAccountOK, error)

	CustomerPrototypeListCustomSharedSchedules(params *CustomerPrototypeListCustomSharedSchedulesParams, opts ...ClientOption) (*CustomerPrototypeListCustomSharedSchedulesOK, error)

	CustomerPrototypeMarketingExport(params *CustomerPrototypeMarketingExportParams, opts ...ClientOption) (*CustomerPrototypeMarketingExportOK, error)

	CustomerPrototypeMigrationStatus(params *CustomerPrototypeMigrationStatusParams, opts ...ClientOption) (*CustomerPrototypeMigrationStatusOK, error)

	CustomerPrototypeOptimize(params *CustomerPrototypeOptimizeParams, opts ...ClientOption) (*CustomerPrototypeOptimizeOK, error)

	CustomerPrototypeOverlordDeleteAppQoeConfig(params *CustomerPrototypeOverlordDeleteAppQoeConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteAppQoeConfigAccepted, error)

	CustomerPrototypeOverlordDeleteFlowCacheConfig(params *CustomerPrototypeOverlordDeleteFlowCacheConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteFlowCacheConfigAccepted, error)

	CustomerPrototypeOverlordDeleteSamKnowsConfig(params *CustomerPrototypeOverlordDeleteSamKnowsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteSamKnowsConfigAccepted, error)

	CustomerPrototypeOverlordDeleteSipAlgConfig(params *CustomerPrototypeOverlordDeleteSipAlgConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteSipAlgConfigAccepted, error)

	CustomerPrototypeOverlordDeleteStatsConfig(params *CustomerPrototypeOverlordDeleteStatsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteStatsConfigAccepted, error)

	CustomerPrototypeOverlordUpdateAppQoeConfig(params *CustomerPrototypeOverlordUpdateAppQoeConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateAppQoeConfigAccepted, error)

	CustomerPrototypeOverlordUpdateFlowCacheConfig(params *CustomerPrototypeOverlordUpdateFlowCacheConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateFlowCacheConfigAccepted, error)

	CustomerPrototypeOverlordUpdateSamKnowsConfig(params *CustomerPrototypeOverlordUpdateSamKnowsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateSamKnowsConfigAccepted, error)

	CustomerPrototypeOverlordUpdateSipAlgConfig(params *CustomerPrototypeOverlordUpdateSipAlgConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateSipAlgConfigAccepted, error)

	CustomerPrototypeOverlordUpdateStatsConfig(params *CustomerPrototypeOverlordUpdateStatsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateStatsConfigAccepted, error)

	CustomerPrototypePatchAccessZone(params *CustomerPrototypePatchAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePatchAccessZoneOK, error)

	CustomerPrototypePatchAppPrioritizationLocationConfig(params *CustomerPrototypePatchAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypePatchAppPrioritizationLocationConfigOK, error)

	CustomerPrototypePatchAppTimeIPFlow(params *CustomerPrototypePatchAppTimeIPFlowParams, opts ...ClientOption) (*CustomerPrototypePatchAppTimeIPFlowOK, error)

	CustomerPrototypePatchAttributesPatchCustomersID(params *CustomerPrototypePatchAttributesPatchCustomersIDParams, opts ...ClientOption) (*CustomerPrototypePatchAttributesPatchCustomersIDOK, error)

	CustomerPrototypePatchAttributesPutCustomersID(params *CustomerPrototypePatchAttributesPutCustomersIDParams, opts ...ClientOption) (*CustomerPrototypePatchAttributesPutCustomersIDOK, error)

	CustomerPrototypePatchCampaignCaptivePortalBranding(params *CustomerPrototypePatchCampaignCaptivePortalBrandingParams, opts ...ClientOption) (*CustomerPrototypePatchCampaignCaptivePortalBrandingOK, error)

	CustomerPrototypePatchCampaignCaptivePortalNetwork(params *CustomerPrototypePatchCampaignCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchCampaignCaptivePortalNetworkOK, error)

	CustomerPrototypePatchCaptivePortal(params *CustomerPrototypePatchCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypePatchCaptivePortalOK, error)

	CustomerPrototypePatchCaptivePortalAuthorizedClients(params *CustomerPrototypePatchCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypePatchCaptivePortalAuthorizedClientsOK, error)

	CustomerPrototypePatchCommand(params *CustomerPrototypePatchCommandParams, opts ...ClientOption) (*CustomerPrototypePatchCommandOK, error)

	CustomerPrototypePatchCustomDeviceType(params *CustomerPrototypePatchCustomDeviceTypeParams, opts ...ClientOption) (*CustomerPrototypePatchCustomDeviceTypeOK, error)

	CustomerPrototypePatchCustomSharedSchedule(params *CustomerPrototypePatchCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypePatchCustomSharedScheduleOK, error)

	CustomerPrototypePatchDevice(params *CustomerPrototypePatchDeviceParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceOK, error)

	CustomerPrototypePatchDeviceAppTime(params *CustomerPrototypePatchDeviceAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceAppTimeOK, error)

	CustomerPrototypePatchDeviceClientSteering(params *CustomerPrototypePatchDeviceClientSteeringParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceClientSteeringOK, error)

	CustomerPrototypePatchDeviceGroup(params *CustomerPrototypePatchDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceGroupOK, error)

	CustomerPrototypePatchDeviceOHPConfiguration(params *CustomerPrototypePatchDeviceOHPConfigurationParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceOHPConfigurationNoContent, error)

	CustomerPrototypePatchDeviceQos(params *CustomerPrototypePatchDeviceQosParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceQosAccepted, error)

	CustomerPrototypePatchDeviceSecurityPolicy(params *CustomerPrototypePatchDeviceSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceSecurityPolicyOK, error)

	CustomerPrototypePatchDeviceSoundingState(params *CustomerPrototypePatchDeviceSoundingStateParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceSoundingStateOK, error)

	CustomerPrototypePatchDpp(params *CustomerPrototypePatchDppParams, opts ...ClientOption) (*CustomerPrototypePatchDppAccepted, error)

	CustomerPrototypePatchEthernetLan(params *CustomerPrototypePatchEthernetLanParams, opts ...ClientOption) (*CustomerPrototypePatchEthernetLanOK, error)

	CustomerPrototypePatchFlowStats(params *CustomerPrototypePatchFlowStatsParams, opts ...ClientOption) (*CustomerPrototypePatchFlowStatsAccepted, error)

	CustomerPrototypePatchFrontHaul(params *CustomerPrototypePatchFrontHaulParams, opts ...ClientOption) (*CustomerPrototypePatchFrontHaulOK, error)

	CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicy(params *CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyAccepted, error)

	CustomerPrototypePatchHomeAwayActive(params *CustomerPrototypePatchHomeAwayActiveParams, opts ...ClientOption) (*CustomerPrototypePatchHomeAwayActiveOK, error)

	CustomerPrototypePatchHomeSecurity(params *CustomerPrototypePatchHomeSecurityParams, opts ...ClientOption) (*CustomerPrototypePatchHomeSecurityOK, error)

	CustomerPrototypePatchHomeSecuritySensitivity(params *CustomerPrototypePatchHomeSecuritySensitivityParams, opts ...ClientOption) (*CustomerPrototypePatchHomeSecuritySensitivityOK, error)

	CustomerPrototypePatchIPV6(params *CustomerPrototypePatchIPV6Params, opts ...ClientOption) (*CustomerPrototypePatchIPV6OK, error)

	CustomerPrototypePatchKvConfigs(params *CustomerPrototypePatchKvConfigsParams, opts ...ClientOption) (*CustomerPrototypePatchKvConfigsOK, error)

	CustomerPrototypePatchLocation(params *CustomerPrototypePatchLocationParams, opts ...ClientOption) (*CustomerPrototypePatchLocationOK, error)

	CustomerPrototypePatchLocationAppTime(params *CustomerPrototypePatchLocationAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchLocationAppTimeOK, error)

	CustomerPrototypePatchLocationBandSteering(params *CustomerPrototypePatchLocationBandSteeringParams, opts ...ClientOption) (*CustomerPrototypePatchLocationBandSteeringOK, error)

	CustomerPrototypePatchLocationFreezeAutoExpire(params *CustomerPrototypePatchLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePatchLocationFreezeAutoExpireNoContent, error)

	CustomerPrototypePatchLocationManager(params *CustomerPrototypePatchLocationManagerParams, opts ...ClientOption) (*CustomerPrototypePatchLocationManagerOK, error)

	CustomerPrototypePatchLocationQoeLiveMode(params *CustomerPrototypePatchLocationQoeLiveModeParams, opts ...ClientOption) (*CustomerPrototypePatchLocationQoeLiveModeOK, error)

	CustomerPrototypePatchLocationSecurityPolicy(params *CustomerPrototypePatchLocationSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchLocationSecurityPolicyOK, error)

	CustomerPrototypePatchMulticast(params *CustomerPrototypePatchMulticastParams, opts ...ClientOption) (*CustomerPrototypePatchMulticastOK, error)

	CustomerPrototypePatchNetworkAccessNetwork(params *CustomerPrototypePatchNetworkAccessNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchNetworkAccessNetworkOK, error)

	CustomerPrototypePatchOptimizations(params *CustomerPrototypePatchOptimizationsParams, opts ...ClientOption) (*CustomerPrototypePatchOptimizationsOK, error)

	CustomerPrototypePatchPerson(params *CustomerPrototypePatchPersonParams, opts ...ClientOption) (*CustomerPrototypePatchPersonOK, error)

	CustomerPrototypePatchPersonAppTime(params *CustomerPrototypePatchPersonAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchPersonAppTimeOK, error)

	CustomerPrototypePatchPersonProfile(params *CustomerPrototypePatchPersonProfileParams, opts ...ClientOption) (*CustomerPrototypePatchPersonProfileOK, error)

	CustomerPrototypePatchPersonSecurityPolicy(params *CustomerPrototypePatchPersonSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchPersonSecurityPolicyOK, error)

	CustomerPrototypePatchRemoteConnectionsConfig(params *CustomerPrototypePatchRemoteConnectionsConfigParams, opts ...ClientOption) (*CustomerPrototypePatchRemoteConnectionsConfigOK, error)

	CustomerPrototypePatchRoom(params *CustomerPrototypePatchRoomParams, opts ...ClientOption) (*CustomerPrototypePatchRoomOK, error)

	CustomerPrototypePatchSecurityConfiguration(params *CustomerPrototypePatchSecurityConfigurationParams, opts ...ClientOption) (*CustomerPrototypePatchSecurityConfigurationOK, error)

	CustomerPrototypePatchServiceLevel(params *CustomerPrototypePatchServiceLevelParams, opts ...ClientOption) (*CustomerPrototypePatchServiceLevelOK, error)

	CustomerPrototypePatchSubscription(params *CustomerPrototypePatchSubscriptionParams, opts ...ClientOption) (*CustomerPrototypePatchSubscriptionAccepted, error)

	CustomerPrototypePatchWifiMotion(params *CustomerPrototypePatchWifiMotionParams, opts ...ClientOption) (*CustomerPrototypePatchWifiMotionOK, error)

	CustomerPrototypePatchWifiNetwork(params *CustomerPrototypePatchWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchWifiNetworkOK, error)

	CustomerPrototypePostCampaignPreviewCaptivePortalNetwork(params *CustomerPrototypePostCampaignPreviewCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypePostCampaignPreviewCaptivePortalNetworkOK, error)

	CustomerPrototypePostCaptivePortal(params *CustomerPrototypePostCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalOK, error)

	CustomerPrototypePostCaptivePortalAuthorizedClients(params *CustomerPrototypePostCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalAuthorizedClientsOK, error)

	CustomerPrototypePostCaptivePortalCampaignAsset(params *CustomerPrototypePostCaptivePortalCampaignAssetParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalCampaignAssetOK, error)

	CustomerPrototypePostCaptivePortalEnableGuestEmailCollection(params *CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionOK, error)

	CustomerPrototypePostCaptivePortalNetworkUsageStats(params *CustomerPrototypePostCaptivePortalNetworkUsageStatsParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalNetworkUsageStatsOK, error)

	CustomerPrototypePostCustomSharedSchedule(params *CustomerPrototypePostCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypePostCustomSharedScheduleOK, error)

	CustomerPrototypePostDeviceFreeze(params *CustomerPrototypePostDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypePostDeviceFreezeOK, error)

	CustomerPrototypePostDeviceGroup(params *CustomerPrototypePostDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypePostDeviceGroupOK, error)

	CustomerPrototypePostDeviceQos(params *CustomerPrototypePostDeviceQosParams, opts ...ClientOption) (*CustomerPrototypePostDeviceQosAccepted, error)

	CustomerPrototypePostDeviceSecurityPolicyAnomalyExperience(params *CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceOK, error)

	CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelist(params *CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistOK, error)

	CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistOK, error)

	CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistOK, error)

	CustomerPrototypePostDeviceToAccessZone(params *CustomerPrototypePostDeviceToAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePostDeviceToAccessZoneOK, error)

	CustomerPrototypePostFrontHaul(params *CustomerPrototypePostFrontHaulParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulOK, error)

	CustomerPrototypePostFrontHaulsDpp(params *CustomerPrototypePostFrontHaulsDppParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppAccepted, error)

	CustomerPrototypePostFrontHaulsDppBootstrap(params *CustomerPrototypePostFrontHaulsDppBootstrapParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppBootstrapOK, error)

	CustomerPrototypePostFrontHaulsDppEnrollment(params *CustomerPrototypePostFrontHaulsDppEnrollmentParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppEnrollmentAccepted, error)

	CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateID(params *CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDOK, error)

	CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted, error)

	CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted, error)

	CustomerPrototypePostKvConfigs(params *CustomerPrototypePostKvConfigsParams, opts ...ClientOption) (*CustomerPrototypePostKvConfigsOK, error)

	CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetup(params *CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupOK, error)

	CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistOK, error)

	CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistOK, error)

	CustomerPrototypePostManager(params *CustomerPrototypePostManagerParams, opts ...ClientOption) (*CustomerPrototypePostManagerOK, error)

	CustomerPrototypePostOnboardingCheckpoint(params *CustomerPrototypePostOnboardingCheckpointParams, opts ...ClientOption) (*CustomerPrototypePostOnboardingCheckpointOK, error)

	CustomerPrototypePostPersonFreeze(params *CustomerPrototypePostPersonFreezeParams, opts ...ClientOption) (*CustomerPrototypePostPersonFreezeOK, error)

	CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistOK, error)

	CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistOK, error)

	CustomerPrototypePostPersons(params *CustomerPrototypePostPersonsParams, opts ...ClientOption) (*CustomerPrototypePostPersonsOK, error)

	CustomerPrototypePostPortForward(params *CustomerPrototypePostPortForwardParams, opts ...ClientOption) (*CustomerPrototypePostPortForwardOK, error)

	CustomerPrototypePostRemoteConnectionsAllow(params *CustomerPrototypePostRemoteConnectionsAllowParams, opts ...ClientOption) (*CustomerPrototypePostRemoteConnectionsAllowOK, error)

	CustomerPrototypePostRemoteConnectionsAllowAll(params *CustomerPrototypePostRemoteConnectionsAllowAllParams, opts ...ClientOption) (*CustomerPrototypePostRemoteConnectionsAllowAllOK, error)

	CustomerPrototypePostRooms(params *CustomerPrototypePostRoomsParams, opts ...ClientOption) (*CustomerPrototypePostRoomsOK, error)

	CustomerPrototypePostRunMobileIspSpeedTest(params *CustomerPrototypePostRunMobileIspSpeedTestParams, opts ...ClientOption) (*CustomerPrototypePostRunMobileIspSpeedTestOK, error)

	CustomerPrototypePostSpeedTest(params *CustomerPrototypePostSpeedTestParams, opts ...ClientOption) (*CustomerPrototypePostSpeedTestOK, error)

	CustomerPrototypePostWhitelistApprovalRequest(params *CustomerPrototypePostWhitelistApprovalRequestParams, opts ...ClientOption) (*CustomerPrototypePostWhitelistApprovalRequestOK, error)

	CustomerPrototypePostWifiAccessZone(params *CustomerPrototypePostWifiAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePostWifiAccessZoneOK, error)

	CustomerPrototypePostWifiKey(params *CustomerPrototypePostWifiKeyParams, opts ...ClientOption) (*CustomerPrototypePostWifiKeyOK, error)

	CustomerPrototypePostWifiNetwork(params *CustomerPrototypePostWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkOK, error)

	CustomerPrototypePostWifiNetworkDpp(params *CustomerPrototypePostWifiNetworkDppParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppAccepted, error)

	CustomerPrototypePostWifiNetworkDppBootstrap(params *CustomerPrototypePostWifiNetworkDppBootstrapParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppBootstrapOK, error)

	CustomerPrototypePostWifiNetworkDppEnrollment(params *CustomerPrototypePostWifiNetworkDppEnrollmentParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppEnrollmentAccepted, error)

	CustomerPrototypePublishSlowChangingDimensionConfigs(params *CustomerPrototypePublishSlowChangingDimensionConfigsParams, opts ...ClientOption) (*CustomerPrototypePublishSlowChangingDimensionConfigsOK, error)

	CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizations(params *CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsOK, error)

	CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizations(params *CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsOK, error)

	CustomerPrototypePutBackhaul(params *CustomerPrototypePutBackhaulParams, opts ...ClientOption) (*CustomerPrototypePutBackhaulOK, error)

	CustomerPrototypePutBandSteering(params *CustomerPrototypePutBandSteeringParams, opts ...ClientOption) (*CustomerPrototypePutBandSteeringOK, error)

	CustomerPrototypePutBleMode(params *CustomerPrototypePutBleModeParams, opts ...ClientOption) (*CustomerPrototypePutBleModeOK, error)

	CustomerPrototypePutBleModeForNode(params *CustomerPrototypePutBleModeForNodeParams, opts ...ClientOption) (*CustomerPrototypePutBleModeForNodeOK, error)

	CustomerPrototypePutCaptivePortalSendDetails(params *CustomerPrototypePutCaptivePortalSendDetailsParams, opts ...ClientOption) (*CustomerPrototypePutCaptivePortalSendDetailsNoContent, error)

	CustomerPrototypePutCommand(params *CustomerPrototypePutCommandParams, opts ...ClientOption) (*CustomerPrototypePutCommandNoContent, error)

	CustomerPrototypePutControlMode(params *CustomerPrototypePutControlModeParams, opts ...ClientOption) (*CustomerPrototypePutControlModeOK, error)

	CustomerPrototypePutCouncilmanResync(params *CustomerPrototypePutCouncilmanResyncParams, opts ...ClientOption) (*CustomerPrototypePutCouncilmanResyncNoContent, error)

	CustomerPrototypePutDeviceFreeze(params *CustomerPrototypePutDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeOK, error)

	CustomerPrototypePutDeviceFreezeAutoExpire(params *CustomerPrototypePutDeviceFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeAutoExpireOK, error)

	CustomerPrototypePutDeviceFreezeForever(params *CustomerPrototypePutDeviceFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeForeverOK, error)

	CustomerPrototypePutDeviceFreezeResidentialGwManaged(params *CustomerPrototypePutDeviceFreezeResidentialGwManagedParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeResidentialGwManagedOK, error)

	CustomerPrototypePutDeviceFreezeSuspend(params *CustomerPrototypePutDeviceFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeSuspendOK, error)

	CustomerPrototypePutDeviceNickname(params *CustomerPrototypePutDeviceNicknameParams, opts ...ClientOption) (*CustomerPrototypePutDeviceNicknameOK, error)

	CustomerPrototypePutDevicesFreezeCommand(params *CustomerPrototypePutDevicesFreezeCommandParams, opts ...ClientOption) (*CustomerPrototypePutDevicesFreezeCommandNoContent, error)

	CustomerPrototypePutDevicesVisibleToGuests(params *CustomerPrototypePutDevicesVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypePutDevicesVisibleToGuestsOK, error)

	CustomerPrototypePutDhcp(params *CustomerPrototypePutDhcpParams, opts ...ClientOption) (*CustomerPrototypePutDhcpOK, error)

	CustomerPrototypePutDhcpReservation(params *CustomerPrototypePutDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypePutDhcpReservationOK, error)

	CustomerPrototypePutDNSServers(params *CustomerPrototypePutDNSServersParams, opts ...ClientOption) (*CustomerPrototypePutDNSServersOK, error)

	CustomerPrototypePutDppEnrollments(params *CustomerPrototypePutDppEnrollmentsParams, opts ...ClientOption) (*CustomerPrototypePutDppEnrollmentsAccepted, error)

	CustomerPrototypePutEthernetLan(params *CustomerPrototypePutEthernetLanParams, opts ...ClientOption) (*CustomerPrototypePutEthernetLanAccepted, error)

	CustomerPrototypePutFirmwareUpgradeRequest(params *CustomerPrototypePutFirmwareUpgradeRequestParams, opts ...ClientOption) (*CustomerPrototypePutFirmwareUpgradeRequestOK, error)

	CustomerPrototypePutFrontlineStorage(params *CustomerPrototypePutFrontlineStorageParams, opts ...ClientOption) (*CustomerPrototypePutFrontlineStorageNoContent, error)

	CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpire(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireOK, error)

	CustomerPrototypePutGroupOfUnassignedDevicesFreezeForever(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverOK, error)

	CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspend(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendOK, error)

	CustomerPrototypePutIosDeviceToken(params *CustomerPrototypePutIosDeviceTokenParams, opts ...ClientOption) (*CustomerPrototypePutIosDeviceTokenNoContent, error)

	CustomerPrototypePutIspSpeedTestConfiguration(params *CustomerPrototypePutIspSpeedTestConfigurationParams, opts ...ClientOption) (*CustomerPrototypePutIspSpeedTestConfigurationOK, error)

	CustomerPrototypePutLedMode(params *CustomerPrototypePutLedModeParams, opts ...ClientOption) (*CustomerPrototypePutLedModeOK, error)

	CustomerPrototypePutLocale(params *CustomerPrototypePutLocaleParams, opts ...ClientOption) (*CustomerPrototypePutLocaleOK, error)

	CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMapping(params *CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingParams, opts ...ClientOption) (*CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingOK, error)

	CustomerPrototypePutLocationSecurityPolicyOHPProtectionState(params *CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateParams, opts ...ClientOption) (*CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateOK, error)

	CustomerPrototypePutLocationWanConfiguration(params *CustomerPrototypePutLocationWanConfigurationParams, opts ...ClientOption) (*CustomerPrototypePutLocationWanConfigurationOK, error)

	CustomerPrototypePutLocationWanSettings(params *CustomerPrototypePutLocationWanSettingsParams, opts ...ClientOption) (*CustomerPrototypePutLocationWanSettingsOK, error)

	CustomerPrototypePutMonitorMode(params *CustomerPrototypePutMonitorModeParams, opts ...ClientOption) (*CustomerPrototypePutMonitorModeOK, error)

	CustomerPrototypePutNetworkMode(params *CustomerPrototypePutNetworkModeParams, opts ...ClientOption) (*CustomerPrototypePutNetworkModeOK, error)

	CustomerPrototypePutOptimizations(params *CustomerPrototypePutOptimizationsParams, opts ...ClientOption) (*CustomerPrototypePutOptimizationsOK, error)

	CustomerPrototypePutOverlordResync(params *CustomerPrototypePutOverlordResyncParams, opts ...ClientOption) (*CustomerPrototypePutOverlordResyncNoContent, error)

	CustomerPrototypePutPersistConfigurationOnGateway(params *CustomerPrototypePutPersistConfigurationOnGatewayParams, opts ...ClientOption) (*CustomerPrototypePutPersistConfigurationOnGatewayOK, error)

	CustomerPrototypePutPersonFreeze(params *CustomerPrototypePutPersonFreezeParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeOK, error)

	CustomerPrototypePutPersonFreezeAutoExpire(params *CustomerPrototypePutPersonFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeAutoExpireOK, error)

	CustomerPrototypePutPersonFreezeForever(params *CustomerPrototypePutPersonFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeForeverOK, error)

	CustomerPrototypePutPersonFreezeSuspend(params *CustomerPrototypePutPersonFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeSuspendOK, error)

	CustomerPrototypePutPortForward(params *CustomerPrototypePutPortForwardParams, opts ...ClientOption) (*CustomerPrototypePutPortForwardOK, error)

	CustomerPrototypePutSniffing(params *CustomerPrototypePutSniffingParams, opts ...ClientOption) (*CustomerPrototypePutSniffingAccepted, error)

	CustomerPrototypePutSnoozeOnDeviceAlert(params *CustomerPrototypePutSnoozeOnDeviceAlertParams, opts ...ClientOption) (*CustomerPrototypePutSnoozeOnDeviceAlertOK, error)

	CustomerPrototypePutSnoozeOnNodeAlert(params *CustomerPrototypePutSnoozeOnNodeAlertParams, opts ...ClientOption) (*CustomerPrototypePutSnoozeOnNodeAlertOK, error)

	CustomerPrototypePutSubscription(params *CustomerPrototypePutSubscriptionParams, opts ...ClientOption) (*CustomerPrototypePutSubscriptionOK, error)

	CustomerPrototypePutUpnp(params *CustomerPrototypePutUpnpParams, opts ...ClientOption) (*CustomerPrototypePutUpnpOK, error)

	CustomerPrototypePutWifiKey(params *CustomerPrototypePutWifiKeyParams, opts ...ClientOption) (*CustomerPrototypePutWifiKeyOK, error)

	CustomerPrototypePutWifiNetwork(params *CustomerPrototypePutWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePutWifiNetworkOK, error)

	CustomerPrototypeRebootLocation(params *CustomerPrototypeRebootLocationParams, opts ...ClientOption) (*CustomerPrototypeRebootLocationNoContent, error)

	CustomerPrototypeRebootNode(params *CustomerPrototypeRebootNodeParams, opts ...ClientOption) (*CustomerPrototypeRebootNodeNoContent, error)

	CustomerPrototypeRejectWhitelistRequest(params *CustomerPrototypeRejectWhitelistRequestParams, opts ...ClientOption) (*CustomerPrototypeRejectWhitelistRequestOK, error)

	CustomerPrototypeRemoveDeviceByMac(params *CustomerPrototypeRemoveDeviceByMacParams, opts ...ClientOption) (*CustomerPrototypeRemoveDeviceByMacNoContent, error)

	CustomerPrototypeRemoveDeviceVisibleToGuests(params *CustomerPrototypeRemoveDeviceVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypeRemoveDeviceVisibleToGuestsOK, error)

	CustomerPrototypeRenameNode(params *CustomerPrototypeRenameNodeParams, opts ...ClientOption) (*CustomerPrototypeRenameNodeOK, error)

	CustomerPrototypeResendManagerInvite(params *CustomerPrototypeResendManagerInviteParams, opts ...ClientOption) (*CustomerPrototypeResendManagerInviteOK, error)

	CustomerPrototypeResetTos(params *CustomerPrototypeResetTosParams, opts ...ClientOption) (*CustomerPrototypeResetTosOK, error)

	CustomerPrototypeSetForcedSteer(params *CustomerPrototypeSetForcedSteerParams, opts ...ClientOption) (*CustomerPrototypeSetForcedSteerOK, error)

	CustomerPrototypeSetPrimarySecondaryNetworks(params *CustomerPrototypeSetPrimarySecondaryNetworksParams, opts ...ClientOption) (*CustomerPrototypeSetPrimarySecondaryNetworksAccepted, error)

	CustomerPrototypeShareDevice(params *CustomerPrototypeShareDeviceParams, opts ...ClientOption) (*CustomerPrototypeShareDeviceOK, error)

	CustomerPrototypeShareDeviceGroup(params *CustomerPrototypeShareDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypeShareDeviceGroupOK, error)

	CustomerPrototypeStartWps(params *CustomerPrototypeStartWpsParams, opts ...ClientOption) (*CustomerPrototypeStartWpsOK, error)

	CustomerPrototypeStitchDevice(params *CustomerPrototypeStitchDeviceParams, opts ...ClientOption) (*CustomerPrototypeStitchDeviceNoContent, error)

	CustomerPrototypeUnapproveDevice(params *CustomerPrototypeUnapproveDeviceParams, opts ...ClientOption) (*CustomerPrototypeUnapproveDeviceNoContent, error)

	CustomerPrototypeUnblockDevice(params *CustomerPrototypeUnblockDeviceParams, opts ...ClientOption) (*CustomerPrototypeUnblockDeviceNoContent, error)

	CustomerPrototypeUnclaimAllNodes(params *CustomerPrototypeUnclaimAllNodesParams, opts ...ClientOption) (*CustomerPrototypeUnclaimAllNodesNoContent, error)

	CustomerPrototypeUnclaimNode(params *CustomerPrototypeUnclaimNodeParams, opts ...ClientOption) (*CustomerPrototypeUnclaimNodeNoContent, error)

	CustomerPrototypeUpdateLocationName(params *CustomerPrototypeUpdateLocationNameParams, opts ...ClientOption) (*CustomerPrototypeUpdateLocationNameOK, error)

	CustomerPrototypeUpdateTermsAndPrivacy(params *CustomerPrototypeUpdateTermsAndPrivacyParams, opts ...ClientOption) (*CustomerPrototypeUpdateTermsAndPrivacyOK, error)

	CustomerPrototypeUserInfo(params *CustomerPrototypeUserInfoParams, opts ...ClientOption) (*CustomerPrototypeUserInfoOK, error)

	CustomerPrototypeVerifyEmailPasswordlessToken(params *CustomerPrototypeVerifyEmailPasswordlessTokenParams, opts ...ClientOption) (*CustomerPrototypeVerifyEmailPasswordlessTokenNoContent, error)

	CustomerPrototypeVlanServices(params *CustomerPrototypeVlanServicesParams, opts ...ClientOption) (*CustomerPrototypeVlanServicesOK, error)

	CustomerPrototypeWpsState(params *CustomerPrototypeWpsStateParams, opts ...ClientOption) (*CustomerPrototypeWpsStateOK, error)

	CustomerRefreshOauthAccessToken(params *CustomerRefreshOauthAccessTokenParams, opts ...ClientOption) (*CustomerRefreshOauthAccessTokenOK, error)

	CustomerRegister(params *CustomerRegisterParams, opts ...ClientOption) (*CustomerRegisterOK, error)

	CustomerRegisterWithGroups(params *CustomerRegisterWithGroupsParams, opts ...ClientOption) (*CustomerRegisterWithGroupsOK, error)

	CustomerResendEmailVerification(params *CustomerResendEmailVerificationParams, opts ...ClientOption) (*CustomerResendEmailVerificationNoContent, error)

	CustomerResetPassword(params *CustomerResetPasswordParams, opts ...ClientOption) (*CustomerResetPasswordNoContent, error)

	CustomerSearchFields(params *CustomerSearchFieldsParams, opts ...ClientOption) (*CustomerSearchFieldsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CustomerConfirm confirms a user registration with identity verification token
*/
func (a *Client) CustomerConfirm(params *CustomerConfirmParams, opts ...ClientOption) (*CustomerConfirmNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerConfirmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.confirm",
		Method:             "GET",
		PathPattern:        "/Customers/confirm",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerConfirmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerConfirmNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerConfirmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerCount counts instances of the model matched by where from the data source
*/
func (a *Client) CustomerCount(params *CustomerCountParams, opts ...ClientOption) (*CustomerCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.count",
		Method:             "GET",
		PathPattern:        "/Customers/count",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerCreateOrUpdateUser creates or update a plume n o c user

	<div><strong>200</strong>: Success, user created.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerCreateOrUpdateUser(params *CustomerCreateOrUpdateUserParams, opts ...ClientOption) (*CustomerCreateOrUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCreateOrUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.createOrUpdateUser",
		Method:             "PUT",
		PathPattern:        "/Customers/createOrUpdateUser",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerCreateOrUpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCreateOrUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerCreateOrUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerCustomCreate creates a plume customer

	<div><strong>200</strong>: Success, customer created.</div>

<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerCustomCreate(params *CustomerCustomCreateParams, opts ...ClientOption) (*CustomerCustomCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCustomCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.customCreate",
		Method:             "POST",
		PathPattern:        "/Customers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerCustomCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCustomCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerCustomCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerEmailExists Check if customer email exists and is known to Plume, pass email as parameter to /Customers/exists?email=xxx@yyy.com

<div><strong>200</strong>: customer email exists and is known to Plume, emailVerified returned</div>
<div><strong>400</strong>: email is required</div>
<div><strong>404</strong>: customer email does not exist and is not known to Plume</div>
<div><strong>422</strong>: email is not valid</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerEmailExists(params *CustomerEmailExistsParams, opts ...ClientOption) (*CustomerEmailExistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerEmailExistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.emailExists",
		Method:             "GET",
		PathPattern:        "/Customers/exists",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerEmailExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerEmailExistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerEmailExistsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerEmailPasswordlessToken generates two access tokens with special scopes for the account with the email address and send a verification email

	<div><strong>200</strong>: Success, return new appToken, refreshToken and send out the email with emailToken.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Email must be defined and valid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerEmailPasswordlessToken(params *CustomerEmailPasswordlessTokenParams, opts ...ClientOption) (*CustomerEmailPasswordlessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerEmailPasswordlessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.emailPasswordlessToken",
		Method:             "POST",
		PathPattern:        "/Customers/passwordLessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerEmailPasswordlessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerEmailPasswordlessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerEmailPasswordlessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerFind finds all instances of the model matched by filter from the data source
*/
func (a *Client) CustomerFind(params *CustomerFindParams, opts ...ClientOption) (*CustomerFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.find",
		Method:             "GET",
		PathPattern:        "/Customers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerFindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerFindDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerFindByID finds a model instance by id from the data source
*/
func (a *Client) CustomerFindByID(params *CustomerFindByIDParams, opts ...ClientOption) (*CustomerFindByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerFindByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.findById",
		Method:             "GET",
		PathPattern:        "/Customers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerFindByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerFindByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerFindByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerImportData imports customer data

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Nothing to import.</div>
<div><strong>422</strong>: Import data is invalid.</div>
*/
func (a *Client) CustomerImportData(params *CustomerImportDataParams, opts ...ClientOption) (*CustomerImportDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerImportDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.importData",
		Method:             "POST",
		PathPattern:        "/Customers/import",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerImportDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerImportDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerImportDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerLogin logins a user with username email and password
*/
func (a *Client) CustomerLogin(params *CustomerLoginParams, opts ...ClientOption) (*CustomerLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.login",
		Method:             "POST",
		PathPattern:        "/Customers/login",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerLogoutPostCustomersLogout logouts a user with access token
*/
func (a *Client) CustomerLogoutPostCustomersLogout(params *CustomerLogoutPostCustomersLogoutParams, opts ...ClientOption) (*CustomerLogoutPostCustomersLogoutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerLogoutPostCustomersLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.logout__post_Customers_logout",
		Method:             "POST",
		PathPattern:        "/Customers/logout",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerLogoutPostCustomersLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerLogoutPostCustomersLogoutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerLogoutPostCustomersLogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeCreateMigration creates a new instance in migration of this model
*/
func (a *Client) CustomerPrototypeCreateMigration(params *CustomerPrototypeCreateMigrationParams, opts ...ClientOption) (*CustomerPrototypeCreateMigrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateMigrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__create___migration",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/_migration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateMigrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateMigrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateMigrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeCreateAccessTokens creates a new instance in access tokens of this model
*/
func (a *Client) CustomerPrototypeCreateAccessTokens(params *CustomerPrototypeCreateAccessTokensParams, opts ...ClientOption) (*CustomerPrototypeCreateAccessTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateAccessTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__create__accessTokens",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/accessTokens",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateAccessTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateAccessTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateAccessTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeDestroyMigration deletes migration of this model
*/
func (a *Client) CustomerPrototypeDestroyMigration(params *CustomerPrototypeDestroyMigrationParams, opts ...ClientOption) (*CustomerPrototypeDestroyMigrationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDestroyMigrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__destroy___migration",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/_migration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDestroyMigrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDestroyMigrationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDestroyMigrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetMigration fetches has one relation migration
*/
func (a *Client) CustomerPrototypeGetMigration(params *CustomerPrototypeGetMigrationParams, opts ...ClientOption) (*CustomerPrototypeGetMigrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetMigrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__get___migration",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/_migration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetMigrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetMigrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetMigrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetRoles queries roles of customer
*/
func (a *Client) CustomerPrototypeGetRoles(params *CustomerPrototypeGetRolesParams, opts ...ClientOption) (*CustomerPrototypeGetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__get__roles",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/roles",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetTermsAndPrivacyAccepted fetches has one relation terms and privacy accepted
*/
func (a *Client) CustomerPrototypeGetTermsAndPrivacyAccepted(params *CustomerPrototypeGetTermsAndPrivacyAcceptedParams, opts ...ClientOption) (*CustomerPrototypeGetTermsAndPrivacyAcceptedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetTermsAndPrivacyAcceptedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__get__termsAndPrivacyAccepted",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/termsAndPrivacyAccepted",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetTermsAndPrivacyAcceptedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetTermsAndPrivacyAcceptedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetTermsAndPrivacyAcceptedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeUpdateMigration updates migration of this model
*/
func (a *Client) CustomerPrototypeUpdateMigration(params *CustomerPrototypeUpdateMigrationParams, opts ...ClientOption) (*CustomerPrototypeUpdateMigrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUpdateMigrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.__update___migration",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/_migration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUpdateMigrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUpdateMigrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUpdateMigrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeAddDeviceVisibleToGuests ds e p r e c a t e d update home devices visible to guests

	<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>
<div><strong>422</strong>: Device mac validation failed.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeAddDeviceVisibleToGuests(params *CustomerPrototypeAddDeviceVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypeAddDeviceVisibleToGuestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeAddDeviceVisibleToGuestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.addDeviceVisibleToGuests",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeAddDeviceVisibleToGuestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeAddDeviceVisibleToGuestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeAddDeviceVisibleToGuestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeAppFacadeHome retrieves timezone capabilities summary for this location

	<div><strong>200</strong>: Success, an array of properties returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeAppFacadeHome(params *CustomerPrototypeAppFacadeHomeParams, opts ...ClientOption) (*CustomerPrototypeAppFacadeHomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeAppFacadeHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.appFacadeHome",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appFacade/home",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeAppFacadeHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeAppFacadeHomeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeAppFacadeHomeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeApproveDevices approves devices in the network

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
*/
func (a *Client) CustomerPrototypeApproveDevices(params *CustomerPrototypeApproveDevicesParams, opts ...ClientOption) (*CustomerPrototypeApproveDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeApproveDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.approveDevices",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeApproveDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeApproveDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeApproveDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeApproveWhitelistRequest approves a persons whitelist request and add it to the security policy

	<div><strong>204</strong>: No content.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeApproveWhitelistRequest(params *CustomerPrototypeApproveWhitelistRequestParams, opts ...ClientOption) (*CustomerPrototypeApproveWhitelistRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeApproveWhitelistRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.approveWhitelistRequest",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests/{requestId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeApproveWhitelistRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeApproveWhitelistRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeApproveWhitelistRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeBlockDevices blocks devices

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeBlockDevices(params *CustomerPrototypeBlockDevicesParams, opts ...ClientOption) (*CustomerPrototypeBlockDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeBlockDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.blockDevices",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/blocked",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeBlockDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeBlockDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeBlockDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeClaimNode claims a node and all nodes still associated to its package ID for a location ID

	<div><strong>200</strong>: King node claimed and all related claimed nodes are returned.</div>

<div><strong>204</strong>: Valid serial number but zero new claimed nodes.</div>
<div><strong>404</strong>: Unable to find Node with serial number, customer id, or location id.</div>
<div><strong>409</strong>: Node is owned by another customer.</div>
<div><strong>422</strong>: Claiming request exceeded numPodsAuthorized (=leaf pods), accountId+partnerId not unique, and/or monitorMode=true.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeClaimNode(params *CustomerPrototypeClaimNodeParams, opts ...ClientOption) (*CustomerPrototypeClaimNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeClaimNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.claimNode",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeClaimNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeClaimNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeClaimNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateGetMarketingExportDataAccessToken creates access token to get marketing data by c r m for campaigns

	<div><strong>200</strong>: Success, accessToken returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeCreateGetMarketingExportDataAccessToken(params *CustomerPrototypeCreateGetMarketingExportDataAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateGetMarketingExportDataAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateGetMarketingExportDataAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createGetMarketingExportDataAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createGetMarketingExportDataAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateGetMarketingExportDataAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateGetMarketingExportDataAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateGetMarketingExportDataAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateIPLimitedAccessToken creates access token with limited privileges as defined for IP authenticated customers

	<div><strong>200</strong>: Success, response object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeCreateIPLimitedAccessToken(params *CustomerPrototypeCreateIPLimitedAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateIPLimitedAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateIPLimitedAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createIpLimitedAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createIpLimitedAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateIPLimitedAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateIPLimitedAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateIPLimitedAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateLocation creates a new location

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required field(the location name) missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeCreateLocation(params *CustomerPrototypeCreateLocationParams, opts ...ClientOption) (*CustomerPrototypeCreateLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createLocation",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateNewPasswordlessToken generates usable passwordless access token for the account with the email address

	<div><strong>204</strong>: Success, return new appToken.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeCreateNewPasswordlessToken(params *CustomerPrototypeCreateNewPasswordlessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateNewPasswordlessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateNewPasswordlessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createNewPasswordlessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/accessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateNewPasswordlessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateNewPasswordlessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateNewPasswordlessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateOauthAccessToken creates access token with ouath scope

	<div><strong>200</strong>: Success, access token created and returned.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeCreateOauthAccessToken(params *CustomerPrototypeCreateOauthAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateOauthAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateOauthAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createOauthAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createOauthAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateOauthAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateOauthAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateOauthAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateOauthRefreshToken creates refresh token for a specific access token with ouath scope

	<div><strong>200</strong>: Success, access token created and returned.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeCreateOauthRefreshToken(params *CustomerPrototypeCreateOauthRefreshTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateOauthRefreshTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateOauthRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createOauthRefreshToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createOauthRefreshToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateOauthRefreshTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateOauthRefreshTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateOauthRefreshTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreatePatchServiceLevelAccessToken creates access token to patch customer service level used by z u o r a

	<div><strong>200</strong>: Success, accessToken returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeCreatePatchServiceLevelAccessToken(params *CustomerPrototypeCreatePatchServiceLevelAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreatePatchServiceLevelAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreatePatchServiceLevelAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createPatchServiceLevelAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createPatchServiceLevelAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreatePatchServiceLevelAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreatePatchServiceLevelAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreatePatchServiceLevelAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeCreateReadDNSAccessToken creates access token to read data related to DNS security policies

	<div><strong>200</strong>: Success, accessToken returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeCreateReadDNSAccessToken(params *CustomerPrototypeCreateReadDNSAccessTokenParams, opts ...ClientOption) (*CustomerPrototypeCreateReadDNSAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeCreateReadDNSAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.createReadDnsAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/createReadDnsAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeCreateReadDNSAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeCreateReadDNSAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeCreateReadDNSAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteAllDeviceFreezes deletes clear all device freezes template ids for a mac

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteAllDeviceFreezes(params *CustomerPrototypeDeleteAllDeviceFreezesParams, opts ...ClientOption) (*CustomerPrototypeDeleteAllDeviceFreezesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteAllDeviceFreezesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteAllDeviceFreezes",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freezes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteAllDeviceFreezesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteAllDeviceFreezesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteAllDeviceFreezesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeDeleteAppPrioritizationLocationConfig sets custom setting to default for app prioritization
*/
func (a *Client) CustomerPrototypeDeleteAppPrioritizationLocationConfig(params *CustomerPrototypeDeleteAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypeDeleteAppPrioritizationLocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteAppPrioritizationLocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteAppPrioritizationLocationConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qos/appPrioritization/customSetting",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteAppPrioritizationLocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteAppPrioritizationLocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteAppPrioritizationLocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteCaptivePortal deletes a captive portal for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteCaptivePortal(params *CustomerPrototypeDeleteCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypeDeleteCaptivePortalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteCaptivePortalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteCaptivePortal",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteCaptivePortalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteCaptivePortalNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteCaptivePortalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteCaptivePortalAuthorizedClients deletes authorized client

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteCaptivePortalAuthorizedClients(params *CustomerPrototypeDeleteCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypeDeleteCaptivePortalAuthorizedClientsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteCaptivePortalAuthorizedClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteCaptivePortalAuthorizedClients",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteCaptivePortalAuthorizedClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteCaptivePortalAuthorizedClientsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteCaptivePortalAuthorizedClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteConfigs deletes specified location settings while keeping claimed nodes intact

	<div><strong>204</strong>: Success, a job well done.</div>

<div><strong>401</strong>: Authorization required </div>
<div><strong>404</strong>: location id not found or nodeId missing from URL
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteConfigs(params *CustomerPrototypeDeleteConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteConfigsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteConfigs",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/configs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteConfigsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteCustomSharedSchedule deletes custom shared schedule shared by all persons and devices in a location

	<div><strong>204</strong>: Success, the custom shared schedule deleted.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist or is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteCustomSharedSchedule(params *CustomerPrototypeDeleteCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypeDeleteCustomSharedScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteCustomSharedScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteCustomSharedSchedule",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/schedules/{templateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteCustomSharedScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteCustomSharedScheduleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteCustomSharedScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteCustomer deletes a model instance by id from the data source

	<div><strong>200</strong>: Success, customer details returned.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeDeleteCustomer(params *CustomerPrototypeDeleteCustomerParams, opts ...ClientOption) (*CustomerPrototypeDeleteCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteCustomer",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteCustomerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFreeze deletes a device to be frozen for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: MAC address does not exist or is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFreeze(params *CustomerPrototypeDeleteDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFreeze",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFreezeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFreezeAutoExpire deletes a device to be frozen for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFreezeAutoExpire(params *CustomerPrototypeDeleteDeviceFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeAutoExpireNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFreezeAutoExpire",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFreezeAutoExpireNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFreezeForever deletes a device forever freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: MAC address does not exist or is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFreezeForever(params *CustomerPrototypeDeleteDeviceFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeForeverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFreezeForever",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFreezeForeverNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFreezeResidentialGwManaged deletes a device residential gw managed freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: MAC address does not exist or is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFreezeResidentialGwManaged(params *CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFreezeResidentialGwManagedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFreezeResidentialGwManaged",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/residentialGwManaged",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFreezeResidentialGwManagedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFreezeSuspend deletes a device suspend for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: MAC address does not exist or is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFreezeSuspend(params *CustomerPrototypeDeleteDeviceFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFreezeSuspendNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFreezeSuspend",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFreezeSuspendNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFromAccessZone deletes a device mac from a wi fi access zone

	<div><strong>200</strong>: Success, all access zones returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFromAccessZone(params *CustomerPrototypeDeleteDeviceFromAccessZoneParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFromAccessZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFromAccessZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFromAccessZone",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/accessibleDevices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFromAccessZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFromAccessZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFromAccessZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceFromPerson unassigns a device from person for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, Person id, or mac does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceFromPerson(params *CustomerPrototypeDeleteDeviceFromPersonParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceFromPersonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceFromPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceFromPerson",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceFromPersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceFromPersonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceFromPersonDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceGroup deletes a device group from a network

	<div><strong>200</strong>: Success.</div>

<div><strong>422</strong>: Schema validation failed.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>403</strong>: Not allowed to delete standalone groups or groups in unsupported networks.</div>
<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Invalid JSON or missing arguments.</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceGroup(params *CustomerPrototypeDeleteDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceGroup",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceQosPrioritization deletes prioritization of a single device

	<div><strong>202</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceQosPrioritization(params *CustomerPrototypeDeleteDeviceQosPrioritizationParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceQosPrioritizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceQosPrioritizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceQosPrioritization",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/qos/prioritization",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceQosPrioritizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceQosPrioritizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceQosPrioritizationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperience deletes an anomaly experience demo for a device on a location

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperience(params *CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceSecurityPolicyAnomalyExperience",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/experience",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyExperienceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelist updates a location s anomaly security policy for a location ID to remove a whitelisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelist(params *CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDeviceSecurityPolicyAnomalyWhitelist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist/{fqdn}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDeviceSecurityPolicyAnomalyWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteDhcpReservation deletes a current d h c p IP reservation and the associated port forwarding entries for a particular m a c address at a location ID

	<div><strong>200</strong>: Success, remaining DhcpReservations are returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: NetworkConfiguration or DhcpReservation is empty.</div>
<div><strong>422</strong>: mac is empty or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteDhcpReservation(params *CustomerPrototypeDeleteDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypeDeleteDhcpReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteDhcpReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteDhcpReservation",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteDhcpReservationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteDhcpReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteDhcpReservationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteForcedSteer disables 2 4 ghz band enforcement early

	<div><strong>204</strong>: Success, forced steer ended early.</div>

<div><strong>404</strong>: Location ID or Device mac not found or the device has not been online in the last 31 days</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteForcedSteer(params *CustomerPrototypeDeleteForcedSteerParams, opts ...ClientOption) (*CustomerPrototypeDeleteForcedSteerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteForcedSteerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteForcedSteer",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/forcedSteer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteForcedSteerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteForcedSteerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteForcedSteerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklist updates a device s security policy for a location ID to remove a blacklisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesBlacklist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelist updates a device s security policy for a location ID to remove a whitelisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesWhitelist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromDeviceSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist updates a location s default device group security policy for a location ID to remove a blacklisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist updates a location s default device group security policy for a location ID to remove a whitelisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklist updates a location s security policy for a location ID to remove a blacklisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesBlacklist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelist updates a locations s security policy for a location ID to remove a whitelisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesWhitelist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromLocationSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklist updates a person s security policy for a location ID to remove a blacklisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Person id, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklist(params *CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesBlacklist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelist updates a person s security policy for a location ID to remove a whitelisted DNS entry

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Person id, or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelist(params *CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesWhitelist",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist/{dns}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFromPersonSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteFrontHaul deletes a front haul for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteFrontHaul(params *CustomerPrototypeDeleteFrontHaulParams, opts ...ClientOption) (*CustomerPrototypeDeleteFrontHaulNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteFrontHaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteFrontHaul",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteFrontHaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteFrontHaulNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteFrontHaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGdprCaptivePortalsData deletes the gdpr captive portals data for a guest

	<div><strong>200</strong>: Success, GDPR Captive Portals data deleted.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGdprCaptivePortalsData(params *CustomerPrototypeDeleteGdprCaptivePortalsDataParams, opts ...ClientOption) (*CustomerPrototypeDeleteGdprCaptivePortalsDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGdprCaptivePortalsDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGdprCaptivePortalsData",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortal/{networkId}/gdprForget/guests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGdprCaptivePortalsDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGdprCaptivePortalsDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGdprCaptivePortalsDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpire deletes group of unassigned devices auto expire freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpire(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeAutoExpire",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForever deletes group of unassigned devices forever freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForever(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeForever",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspend deletes group of unassigned devices suspend for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspend(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeSuspend",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateID deletes group of unassigned devices uuid freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateID(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeTemplateId",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezeTemplateIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezes deletes all group of unassigned devices freeze except auto expire for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezes(params *CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesParams, opts ...ClientOption) (*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteGroupOfUnassignedDevicesFreezes",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteGroupOfUnassignedDevicesFreezesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteKvConfigs deletes kv configs with selected module and key on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteKvConfigs(params *CustomerPrototypeDeleteKvConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteKvConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteKvConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteKvConfigs",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs/{module}/{key}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteKvConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteKvConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteKvConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteLinkedAccount links the outside account such as samsung user

	<div><strong>200</strong>: Success, the outside account inserted into the customer info/object.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteLinkedAccount(params *CustomerPrototypeDeleteLinkedAccountParams, opts ...ClientOption) (*CustomerPrototypeDeleteLinkedAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteLinkedAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteLinkedAccount",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/linkedAccounts/{provider}/{userId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteLinkedAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteLinkedAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteLinkedAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteLocation archives a location

	<div><strong>204</strong>: Success, location archived.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>409</strong>: Location already archived.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteLocation(params *CustomerPrototypeDeleteLocationParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteLocation",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteLocationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteLocationEventsHistory deletes a location s security events history for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, Device or DNS does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteLocationEventsHistory(params *CustomerPrototypeDeleteLocationEventsHistoryParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationEventsHistoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteLocationEventsHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteLocationEventsHistory",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteLocationEventsHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteLocationEventsHistoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteLocationEventsHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteLocationFreezeAutoExpire deletes the location freeze auto expire for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteLocationFreezeAutoExpire(params *CustomerPrototypeDeleteLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeleteLocationFreezeAutoExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteLocationFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteLocationFreezeAutoExpire",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteLocationFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteLocationFreezeAutoExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteLocationFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteManagerAccess deletes manager access for location and destroy access tokens for that manager

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location or Manager does not exist.</div>
*/
func (a *Client) CustomerPrototypeDeleteManagerAccess(params *CustomerPrototypeDeleteManagerAccessParams, opts ...ClientOption) (*CustomerPrototypeDeleteManagerAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteManagerAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteManagerAccess",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/managers/{managerId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteManagerAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteManagerAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteManagerAccessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteNodeLocked deletes a node model based on its id

	<div><strong>204</strong>: The node was successfully deleted.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>404</strong>: Node or customer not found.</div>
<div><strong>422</strong>: Node deletion could not be completed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeDeleteNodeLocked(params *CustomerPrototypeDeleteNodeLockedParams, opts ...ClientOption) (*CustomerPrototypeDeleteNodeLockedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteNodeLockedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteNodeLocked",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteNodeLockedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteNodeLockedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteNodeLockedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteNodePersistentConfigs deletes persistent data configs from node in runtime

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location or Node, does not exist.</div>
<div><strong>422</strong>: Required fields are not valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteNodePersistentConfigs(params *CustomerPrototypeDeleteNodePersistentConfigsParams, opts ...ClientOption) (*CustomerPrototypeDeleteNodePersistentConfigsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteNodePersistentConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteNodePersistentConfigs",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/persistentConfigs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteNodePersistentConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteNodePersistentConfigsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteNodePersistentConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePerson deletes a person for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePerson(params *CustomerPrototypeDeletePersonParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePerson",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonAllFreeze deletes a person to be frozen for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonAllFreeze(params *CustomerPrototypeDeletePersonAllFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonAllFreezeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonAllFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonAllFreeze",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freezes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonAllFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonAllFreezeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonAllFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonFreeze deletes a person to be frozen for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonFreeze(params *CustomerPrototypeDeletePersonFreezeParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonFreeze",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonFreezeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonFreezeAutoExpire deletes all devices from a person to be frozen for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonFreezeAutoExpire(params *CustomerPrototypeDeletePersonFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeAutoExpireNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonFreezeAutoExpire",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonFreezeAutoExpireNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonFreezeForever deletes a person forever freeze for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonFreezeForever(params *CustomerPrototypeDeletePersonFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeForeverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonFreezeForever",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonFreezeForeverNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonFreezeSuspend deletes person suspend for a location ID

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonFreezeSuspend(params *CustomerPrototypeDeletePersonFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonFreezeSuspendNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonFreezeSuspend",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonFreezeSuspendNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePersonProfile deletes a person s profile for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePersonProfile(params *CustomerPrototypeDeletePersonProfileParams, opts ...ClientOption) (*CustomerPrototypeDeletePersonProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePersonProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePersonProfile",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/profile",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePersonProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePersonProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePersonProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeletePortForward deletes an existing port forwarding entry for an existing d h c p IP reservation tied to a m a c address at a location ID

	<div><strong>200</strong>: Success, returns list of remaining port forwards.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: NetworkConfiguration, DhcpReservation or PortForward does not exist.</div>
<div><strong>422</strong>: mac does not exist, or is invalid, or externalPort is empty.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeDeletePortForward(params *CustomerPrototypeDeletePortForwardParams, opts ...ClientOption) (*CustomerPrototypeDeletePortForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeletePortForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deletePortForward",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward/{externalPort}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeletePortForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeletePortForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeletePortForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteRemoteConnectionsAllow deletes a remote connection allow Ip address ttl for the given device and location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteRemoteConnectionsAllow(params *CustomerPrototypeDeleteRemoteConnectionsAllowParams, opts ...ClientOption) (*CustomerPrototypeDeleteRemoteConnectionsAllowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteRemoteConnectionsAllowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteRemoteConnectionsAllow",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow/{ipaddr}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteRemoteConnectionsAllowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteRemoteConnectionsAllowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteRemoteConnectionsAllowDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteRemoteConnectionsAllowAll deletes a remote connection allow all for the given device and location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteRemoteConnectionsAllowAll(params *CustomerPrototypeDeleteRemoteConnectionsAllowAllParams, opts ...ClientOption) (*CustomerPrototypeDeleteRemoteConnectionsAllowAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteRemoteConnectionsAllowAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteRemoteConnectionsAllowAll",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allowAll",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteRemoteConnectionsAllowAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteRemoteConnectionsAllowAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteRemoteConnectionsAllowAllDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteRoom deletes a room for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Room id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteRoom(params *CustomerPrototypeDeleteRoomParams, opts ...ClientOption) (*CustomerPrototypeDeleteRoomNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteRoom",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/rooms/{roomId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteRoomNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteWifiAccessZone deletes a wi fi access zone

	<div><strong>200</strong>: Success, remaining access zones returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>405</strong>: Cannot delete a read-only access zone</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteWifiAccessZone(params *CustomerPrototypeDeleteWifiAccessZoneParams, opts ...ClientOption) (*CustomerPrototypeDeleteWifiAccessZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteWifiAccessZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteWifiAccessZone",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZoneId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteWifiAccessZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteWifiAccessZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteWifiAccessZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDeleteWifiKey deletes a wi fi password

	<div><strong>200</strong>: Success, all passwords returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>405</strong>: Cannot delete a read-only key</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeDeleteWifiKey(params *CustomerPrototypeDeleteWifiKeyParams, opts ...ClientOption) (*CustomerPrototypeDeleteWifiKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDeleteWifiKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.deleteWifiKey",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys/{keyId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDeleteWifiKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDeleteWifiKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDeleteWifiKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeDisableLogin disables customer from logging in until their account is reactivated

	<div><strong>204</strong>: Customer has been disabled.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer does not exist.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeDisableLogin(params *CustomerPrototypeDisableLoginParams, opts ...ClientOption) (*CustomerPrototypeDisableLoginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeDisableLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.disableLogin",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/disable",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeDisableLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeDisableLoginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeDisableLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeEnableDeviceTypeSniffing res enables device type sniffing for a particular device

	<div><strong>204</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>404</strong>: No device found with provided mac address</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeEnableDeviceTypeSniffing(params *CustomerPrototypeEnableDeviceTypeSniffingParams, opts ...ClientOption) (*CustomerPrototypeEnableDeviceTypeSniffingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeEnableDeviceTypeSniffingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.enableDeviceTypeSniffing",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/resniff",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeEnableDeviceTypeSniffingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeEnableDeviceTypeSniffingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeEnableDeviceTypeSniffingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeEnableLogin enables customer log in after it has been disabled

	<div><strong>204</strong>: Customer has been enabled.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer does not exist.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeEnableLogin(params *CustomerPrototypeEnableLoginParams, opts ...ClientOption) (*CustomerPrototypeEnableLoginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeEnableLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.enableLogin",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/enable",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeEnableLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeEnableLoginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeEnableLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeFactoryReset resets specified location settings to default while keeping claimed nodes intact some of the flags can cause a node to be reeboted

	<div><strong>204</strong>: Success, a job well done.</div>

<div><strong>401</strong>: Authorization required </div>
<div><strong>404</strong>: location id not found or nodeId missing from URL
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeFactoryReset(params *CustomerPrototypeFactoryResetParams, opts ...ClientOption) (*CustomerPrototypeFactoryResetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeFactoryResetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.factoryReset",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/factoryReset",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeFactoryResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeFactoryResetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeFactoryResetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeFindLocationByID gets a location s combined state and config by location Id

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeFindLocationByID(params *CustomerPrototypeFindLocationByIDParams, opts ...ClientOption) (*CustomerPrototypeFindLocationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeFindLocationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.findLocationById",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeFindLocationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeFindLocationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeFindLocationByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAccessTokenForManagedLocation gets an access token for a location where you are assigned as a manager

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>
*/
func (a *Client) CustomerPrototypeGetAccessTokenForManagedLocation(params *CustomerPrototypeGetAccessTokenForManagedLocationParams, opts ...ClientOption) (*CustomerPrototypeGetAccessTokenForManagedLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAccessTokenForManagedLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAccessTokenForManagedLocation",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/entitledAccess/{locationId}/accessTokens",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAccessTokenForManagedLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAccessTokenForManagedLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAccessTokenForManagedLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAlerts retrieves active alerts for this location

	<div><strong>200</strong>: Success, an array of Nodes and an array of Devices returned.</div>

<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAlerts(params *CustomerPrototypeGetAlertsParams, opts ...ClientOption) (*CustomerPrototypeGetAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAlerts",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/alerts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAlertsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppEngagementTimer gets information about app engagement timer details for a location

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeGetAppEngagementTimer(params *CustomerPrototypeGetAppEngagementTimerParams, opts ...ClientOption) (*CustomerPrototypeGetAppEngagementTimerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppEngagementTimerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppEngagementTimer",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appEngagementTimer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppEngagementTimerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppEngagementTimerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppEngagementTimerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppIDInfoCaptivePortalNetwork gets the app Id info for the given location

	<div><strong>200</strong>: Success, appId info returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or url does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppIDInfoCaptivePortalNetwork(params *CustomerPrototypeGetAppIDInfoCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetAppIDInfoCaptivePortalNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppIDInfoCaptivePortalNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppIdInfoCaptivePortalNetwork",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/ownerAppIds",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppIDInfoCaptivePortalNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppIDInfoCaptivePortalNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppIDInfoCaptivePortalNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppPrioritizationLocationConfig gets status for app prioritization

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppPrioritizationLocationConfig(params *CustomerPrototypeGetAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationLocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppPrioritizationLocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppPrioritizationLocationConfig",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qos/appPrioritization",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppPrioritizationLocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppPrioritizationLocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppPrioritizationLocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppPrioritizationMonitoring gets monitoring metrics for app prioritization

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppPrioritizationMonitoring(params *CustomerPrototypeGetAppPrioritizationMonitoringParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationMonitoringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppPrioritizationMonitoringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppPrioritizationMonitoring",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qos/appPrioritization/monitoring",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppPrioritizationMonitoringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppPrioritizationMonitoringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppPrioritizationMonitoringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppPrioritizationTemplateConfig gets app prioritization template configs

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppPrioritizationTemplateConfig(params *CustomerPrototypeGetAppPrioritizationTemplateConfigParams, opts ...ClientOption) (*CustomerPrototypeGetAppPrioritizationTemplateConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppPrioritizationTemplateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppPrioritizationTemplateConfig",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qos/appPrioritization/templateConfig",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppPrioritizationTemplateConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppPrioritizationTemplateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppPrioritizationTemplateConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppQoeStatsByTrafficClass gets app qo e metrics by traffic classes devices apps

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppQoeStatsByTrafficClass(params *CustomerPrototypeGetAppQoeStatsByTrafficClassParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeStatsByTrafficClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppQoeStatsByTrafficClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppQoeStatsByTrafficClass",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appqoe/AppQoeStatsByTrafficClass",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppQoeStatsByTrafficClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppQoeStatsByTrafficClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppQoeStatsByTrafficClassDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStats gets app qo e metrics for traffic classes

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStats(params *CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppQoeTrafficClassMetrics__get_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appqoe/traffic_class_stats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppQoeTrafficClassMetricsGetCustomersIDLocationsLocationIDAppqoeTrafficClassStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStats gets app qo e metrics for traffic classes

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStats(params *CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams, opts ...ClientOption) (*CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppQoeTrafficClassMetrics__post_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appqoe/traffic_class_stats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppQoeTrafficClassMetricsPostCustomersIDLocationsLocationIDAppqoeTrafficClassStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAppTimeIPFlows gets IP flows config

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAppTimeIPFlows(params *CustomerPrototypeGetAppTimeIPFlowsParams, opts ...ClientOption) (*CustomerPrototypeGetAppTimeIPFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAppTimeIPFlowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAppTimeIpFlows",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appTime/ipFlows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAppTimeIPFlowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAppTimeIPFlowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAppTimeIPFlowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAuditTrailForCustomer gets audit trail for a customer

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer id, does not exist.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeGetAuditTrailForCustomer(params *CustomerPrototypeGetAuditTrailForCustomerParams, opts ...ClientOption) (*CustomerPrototypeGetAuditTrailForCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAuditTrailForCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAuditTrailForCustomer",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/auditTrail",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAuditTrailForCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAuditTrailForCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAuditTrailForCustomerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAuditTrailForLocation gets audit trail for location

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeGetAuditTrailForLocation(params *CustomerPrototypeGetAuditTrailForLocationParams, opts ...ClientOption) (*CustomerPrototypeGetAuditTrailForLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAuditTrailForLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAuditTrailForLocation",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/auditTrail",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAuditTrailForLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAuditTrailForLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAuditTrailForLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetAuthorizations gets the number of authorized leaf pods for a location ID

	<div>Number of leaf pods that are authorized to be claimed and be a part of the Plume network</div>

<div><strong>200</strong>: Success, numPodsAuthorized returned.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetAuthorizations(params *CustomerPrototypeGetAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypeGetAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getAuthorizations",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/authorizations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetBackhaul customer prototype get backhaul API
*/
func (a *Client) CustomerPrototypeGetBackhaul(params *CustomerPrototypeGetBackhaulParams, opts ...ClientOption) (*CustomerPrototypeGetBackhaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetBackhaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getBackhaul",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/backhaul",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetBackhaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetBackhaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetBackhaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCampaignCaptivePortalNetwork gets the captive portal campaign for a given location ID network Id

	<div><strong>200</strong>: Success, campaign returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCampaignCaptivePortalNetwork(params *CustomerPrototypeGetCampaignCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetCampaignCaptivePortalNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCampaignCaptivePortalNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCampaignCaptivePortalNetwork",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCampaignCaptivePortalNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCampaignCaptivePortalNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCampaignCaptivePortalNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalAuthorizedClients gets captive portal authorized clients

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalAuthorizedClients(params *CustomerPrototypeGetCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalAuthorizedClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalAuthorizedClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalAuthorizedClients",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalAuthorizedClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalAuthorizedClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalAuthorizedClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfo fetches the captive portal network guest info download availability for the given network

	<div><strong>200</strong>: Success, CaptivePortal Networks guest info download availability returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfo(params *CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalGuestEmailCollectionInfo",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guestEmailCollectionInfo",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalGuestEmailCollectionInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalGuests fetches the list of guests which were logged into the given captive portal network during the current day

	<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalGuests(params *CustomerPrototypeGetCaptivePortalGuestsParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalGuestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalGuestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalGuests",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalGuestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalGuestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalGuestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalNetworks gets the captive portal configs for a given location ID

	<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalNetworks(params *CustomerPrototypeGetCaptivePortalNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalNetworks",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalSendDetails downloads captive portal guest details for a given location ID network Id

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalSendDetails(params *CustomerPrototypeGetCaptivePortalSendDetailsParams, writer io.Writer, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalSendDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalSendDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalSendDetails",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetails",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalSendDetailsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalSendDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalSendDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCaptivePortalSendDetailsDirect downloads captive portal guest details for a given location ID network Id without accessing amazon s3

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCaptivePortalSendDetailsDirect(params *CustomerPrototypeGetCaptivePortalSendDetailsDirectParams, writer io.Writer, opts ...ClientOption) (*CustomerPrototypeGetCaptivePortalSendDetailsDirectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCaptivePortalSendDetailsDirectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCaptivePortalSendDetailsDirect",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetailsDirect",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCaptivePortalSendDetailsDirectReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCaptivePortalSendDetailsDirectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCaptivePortalSendDetailsDirectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCommands returns list of linked command accounts for the location

	<div><strong>200</strong>: Success, return the  list of linked command accounts.</div>

<div><strong>401</strong>: Authorization required</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCommands(params *CustomerPrototypeGetCommandsParams, opts ...ClientOption) (*CustomerPrototypeGetCommandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCommandsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCommands",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/command",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCommandsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCommandsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCommandsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCompanyInfoCaptivePortalNetwork gets the company info for the given url domain

	<div><strong>200</strong>: Success, company info returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or url does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCompanyInfoCaptivePortalNetwork(params *CustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetCompanyInfoCaptivePortalNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCompanyInfoCaptivePortalNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCompanyInfoCaptivePortalNetwork",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/companyInfo/search",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCompanyInfoCaptivePortalNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCompanyInfoCaptivePortalNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCompanyInfoCaptivePortalNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetControlMode gets control mode for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetControlMode(params *CustomerPrototypeGetControlModeParams, opts ...ClientOption) (*CustomerPrototypeGetControlModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetControlModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getControlMode",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/controlMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetControlModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetControlModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetControlModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCustomerNodeByID returns a single node for a customer ID

	<div><strong>200</strong>: Success, node returned with locationId field.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: customer id or location id does not exist. Or, nodeId not claimed to this account.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCustomerNodeByID(params *CustomerPrototypeGetCustomerNodeByIDParams, opts ...ClientOption) (*CustomerPrototypeGetCustomerNodeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCustomerNodeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCustomerNodeById",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCustomerNodeByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCustomerNodeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCustomerNodeByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetCustomerSupportConfigurations returns partner customer support configuration

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: customer id or location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetCustomerSupportConfigurations(params *CustomerPrototypeGetCustomerSupportConfigurationsParams, opts ...ClientOption) (*CustomerPrototypeGetCustomerSupportConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetCustomerSupportConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getCustomerSupportConfigurations",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/customerSupportConfigurations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetCustomerSupportConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetCustomerSupportConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetCustomerSupportConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetDashboard dailies weekly monthly device usage summary report based on location
*/
func (a *Client) CustomerPrototypeGetDashboard(params *CustomerPrototypeGetDashboardParams, opts ...ClientOption) (*CustomerPrototypeGetDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDashboard",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/dashboard",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsage fetches the app time apps data usage stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDefaultNetworkAppTimeAppsDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDefaultNetworkAppTimeAppsDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTime fetches the app time apps online time stats for default network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDefaultNetworkAppTimeAppsOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDefaultNetworkAppTimeAppsOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsage fetches the app time categories data usage stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDefaultNetworkAppTimeCategoriesDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTime fetches the app time categories online time stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDefaultNetworkAppTimeCategoriesOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDefaultNetworkAppTimeCategoriesOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceAlarms devices alarm history graph array for a particular m a c address

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceAlarms(params *CustomerPrototypeGetDeviceAlarmsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAlarmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceAlarmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceAlarms",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/alarms",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceAlarmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceAlarmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceAlarmsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceAppTimeAppsDataUsage fetches the app time apps data usage stats for a device

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or device does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceAppTimeAppsDataUsage(params *CustomerPrototypeGetDeviceAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeAppsDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceAppTimeAppsDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceAppTimeAppsDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceAppTimeAppsDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceAppTimeAppsDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceAppTimeAppsDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceAppTimeAppsOnlineTime fetches the app time apps online time stats for a device

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or device does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceAppTimeAppsOnlineTime(params *CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceAppTimeAppsOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceAppTimeAppsOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceAppTimeAppsOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceAppTimeCategoriesDataUsage fetches the app time categories data usage stats for a device

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or device does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceAppTimeCategoriesDataUsage(params *CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceAppTimeCategoriesDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceAppTimeCategoriesDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceAppTimeCategoriesDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTime fetches the app time categories online time stats for a device

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or device does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceAppTimeCategoriesOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceAppTimeCategoriesOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceBandSteeringStats devices band steering stats with all nodes for a particular m a c address

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceBandSteeringStats(params *CustomerPrototypeGetDeviceBandSteeringStatsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceBandSteeringStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceBandSteeringStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceBandSteeringStats",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/bandSteeringStats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceBandSteeringStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceBandSteeringStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceBandSteeringStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceByMac returns a single device for a location ID

	<div><strong>200</strong>: Success, device returned.</div>

<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceByMac(params *CustomerPrototypeGetDeviceByMacParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceByMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceByMacParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceByMac",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceByMacReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceByMacOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceByMacDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceClientSteeringStats devices client steering stats with all nodes for a particular m a c address

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceClientSteeringStats(params *CustomerPrototypeGetDeviceClientSteeringStatsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceClientSteeringStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceClientSteeringStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceClientSteeringStats",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringStats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceClientSteeringStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceClientSteeringStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceClientSteeringStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceGroups gets a list of device groups in a network along with a list of member devices and group shares

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>401</strong>: Unauthorized.</div>
*/
func (a *Client) CustomerPrototypeGetDeviceGroups(params *CustomerPrototypeGetDeviceGroupsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceGroups",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceQoeMetrics devices or pod qo e 15 minutes data

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceQoeMetrics(params *CustomerPrototypeGetDeviceQoeMetricsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceQoeMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceQoeMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceQoeMetrics",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoeMetrics",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceQoeMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceQoeMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceQoeMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceSecurity returns the security policy device for a location ID

	<div><strong>200</strong>: Success, device returned.</div>

<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceSecurity(params *CustomerPrototypeGetDeviceSecurityParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceSecurity",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceSecurityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceSecurityPolicyEvents gets a security policy events for device for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceSecurityPolicyEvents(params *CustomerPrototypeGetDeviceSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityPolicyEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceSecurityPolicyEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceSecurityPolicyEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceSecurityPolicyEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceSecurityPolicyEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceSecurityPolicyEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceSecurityPolicyHourlyCounts gets a security policy hourly blocked counts for a device for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceSecurityPolicyHourlyCounts(params *CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceSecurityPolicyHourlyCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceSecurityPolicyHourlyCounts",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/hourlyBlockedCounts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceSecurityPolicyHourlyCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceSoundingState fetches the sounding states for eligible devices in this location

	<div><strong>200</strong>: Success, device sounding states returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceSoundingState(params *CustomerPrototypeGetDeviceSoundingStateParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSoundingStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceSoundingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceSoundingState",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/devices/sounding",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceSoundingStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceSoundingStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceSoundingStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDeviceSteeringWithAthena finds all instances of the model

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDeviceSteeringWithAthena(params *CustomerPrototypeGetDeviceSteeringWithAthenaParams, opts ...ClientOption) (*CustomerPrototypeGetDeviceSteeringWithAthenaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDeviceSteeringWithAthenaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDeviceSteeringWithAthena",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringTriggers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDeviceSteeringWithAthenaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDeviceSteeringWithAthenaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDeviceSteeringWithAthenaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDevices gets all the devices for a location ID including the device name icon to use m a c and IP address connecting nodes and more

	All devices with 2g, 5g and 6g channel settings

<div><strong>200</strong>: Success, array of Devices returned.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDevices(params *CustomerPrototypeGetDevicesParams, opts ...ClientOption) (*CustomerPrototypeGetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDevices",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDhcp gets current d h c p configuration details for a location ID

	<div><strong>200</strong>: Success, current dhcp returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or dhcp does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDhcp(params *CustomerPrototypeGetDhcpParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDhcp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDhcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDhcpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDhcpReservation gets current d h c p IP reservation details for a location ID

	<div><strong>200</strong>: Success, current DhcpReservation returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or DhcpReservation does not exist.</div>
<div><strong>422</strong>: mac is empty, or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDhcpReservation(params *CustomerPrototypeGetDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDhcpReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDhcpReservation",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDhcpReservationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDhcpReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDhcpReservationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDhcpReservations gets current d h c p IP reservation details for a location ID

	<div><strong>200</strong>: Success, current DhcpReservation returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or DhcpReservation does not exist.</div>
<div><strong>422</strong>: mac is empty, or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDhcpReservations(params *CustomerPrototypeGetDhcpReservationsParams, opts ...ClientOption) (*CustomerPrototypeGetDhcpReservationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDhcpReservationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDhcpReservations",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDhcpReservationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDhcpReservationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDhcpReservationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDNSServers gets the current DNS IP addresses and settings for a location ID

	<div><strong>200</strong>: Success, current DNS server settings returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: NetworkConfiguration or DNS server settings does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDNSServers(params *CustomerPrototypeGetDNSServersParams, opts ...ClientOption) (*CustomerPrototypeGetDNSServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDNSServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDnsServers",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDNSServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDNSServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDNSServersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDpp gets the current d p p configuration for a location ID

	<div><strong>200</strong>: Success, current DPP configuration returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDpp(params *CustomerPrototypeGetDppParams, opts ...ClientOption) (*CustomerPrototypeGetDppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDpp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetDppAnnouncementsFromController returns d p p announcements from controller

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetDppAnnouncementsFromController(params *CustomerPrototypeGetDppAnnouncementsFromControllerParams, opts ...ClientOption) (*CustomerPrototypeGetDppAnnouncementsFromControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetDppAnnouncementsFromControllerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getDppAnnouncementsFromController",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/dpp/announcements",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetDppAnnouncementsFromControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetDppAnnouncementsFromControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetDppAnnouncementsFromControllerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsage fetches the app time apps data usage stats for fronthaul network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEmployeeNetworkAppTimeAppsDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeAppsDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTime fetches the app time apps online time stats for fronthaul network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEmployeeNetworkAppTimeAppsOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeAppsOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsage fetches the app time categories data usage stats for fronthaul network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEmployeeNetworkAppTimeCategoriesDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTime fetches the app time categories online time stats for fronthaul network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEmployeeNetworkAppTimeCategoriesOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEmployeeNetworkAppTimeCategoriesOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEntitledAccessList gets a list of all locations on which you are assigned as a manager

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>
*/
func (a *Client) CustomerPrototypeGetEntitledAccessList(params *CustomerPrototypeGetEntitledAccessListParams, opts ...ClientOption) (*CustomerPrototypeGetEntitledAccessListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEntitledAccessListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEntitledAccessList",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/entitledAccess",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEntitledAccessListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEntitledAccessListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEntitledAccessListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetEventHistory fetches the event history for this location

	<div><strong>200</strong>: Success, event array returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetEventHistory(params *CustomerPrototypeGetEventHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetEventHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetEventHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getEventHistory",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/events/history",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetEventHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetEventHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetEventHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFastInterference gets from controller fast interference status

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeGetFastInterference(params *CustomerPrototypeGetFastInterferenceParams, opts ...ClientOption) (*CustomerPrototypeGetFastInterferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFastInterferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFastInterference",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/fastInterference",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFastInterferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFastInterferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFastInterferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFirmwareUpgradeStatus firmwares upgrade status

	<div><strong>200</strong>: Success, response object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetFirmwareUpgradeStatus(params *CustomerPrototypeGetFirmwareUpgradeStatusParams, opts ...ClientOption) (*CustomerPrototypeGetFirmwareUpgradeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFirmwareUpgradeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFirmwareUpgradeStatus",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/firmware",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFirmwareUpgradeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFirmwareUpgradeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFirmwareUpgradeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFlowStats gs e t the flow stats configuration

	<div><strong>200</strong>: Success, current flow stats configuration returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetFlowStats(params *CustomerPrototypeGetFlowStatsParams, opts ...ClientOption) (*CustomerPrototypeGetFlowStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFlowStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFlowStats",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flowStats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFlowStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFlowStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFlowStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetForceGraph HTMLs or JSON vertices edges used to display a network topology

	<div>The HTML and JSON to initialize and dynamically display and update a Topology.</div>

<div>The JSON can also be used to get a network's list of nodes + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>
<div><strong>200</strong>: Success, HTML or JSON returned depending on "Accept" HTTP header.</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetForceGraph(params *CustomerPrototypeGetForceGraphParams, opts ...ClientOption) (*CustomerPrototypeGetForceGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetForceGraphParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getForceGraph",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/forceGraph",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetForceGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetForceGraphOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetForceGraphDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFrontHaulNetworks gets the front haul portal configs for a given location ID

	<div><strong>200</strong>: Success, FrontHaul Networks returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetFrontHaulNetworks(params *CustomerPrototypeGetFrontHaulNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetFrontHaulNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFrontHaulNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFrontHaulNetworks",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFrontHaulNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFrontHaulNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFrontHaulNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFrontHaulsDpp gets the current d p p configurator for a location ID

	<div><strong>200</strong>: Success, current DPP configurator returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetFrontHaulsDpp(params *CustomerPrototypeGetFrontHaulsDppParams, opts ...ClientOption) (*CustomerPrototypeGetFrontHaulsDppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFrontHaulsDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFrontHaulsDpp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFrontHaulsDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFrontHaulsDppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFrontHaulsDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetFrontlineStorage fetches the frontline storage for this location

	<div><strong>200</strong>: Success, HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetFrontlineStorage(params *CustomerPrototypeGetFrontlineStorageParams, opts ...ClientOption) (*CustomerPrototypeGetFrontlineStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetFrontlineStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getFrontlineStorage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/frontline/storage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetFrontlineStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetFrontlineStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetFrontlineStorageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGdprCaptivePortalsData fetches the gdpr captive portals data for a guest

	<div><strong>200</strong>: Success, GDPR Captive Portals data returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGdprCaptivePortalsData(params *CustomerPrototypeGetGdprCaptivePortalsDataParams, opts ...ClientOption) (*CustomerPrototypeGetGdprCaptivePortalsDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGdprCaptivePortalsDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGdprCaptivePortalsData",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networks/{networkId}/gdprData",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGdprCaptivePortalsDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGdprCaptivePortalsDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGdprCaptivePortalsDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicy gets group of unassigned devices freeze policy for a location ID

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicy(params *CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGroupOfUnassignedDevicesFreezePolicy",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezePolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesFreezePolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicy gets a security policy for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicy(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEvents gets a security policy events for group of unassigned devices for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEvents(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCounts gets a security policy hourly blocked counts for group of unassigned devices for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCounts(params *CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyHourlyCounts",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/hourlyBlockedCounts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGroupOfUnassignedDevicesSecurityPolicyHourlyCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetGroups customer prototype get groups API
*/
func (a *Client) CustomerPrototypeGetGroups(params *CustomerPrototypeGetGroupsParams, opts ...ClientOption) (*CustomerPrototypeGetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGroups",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/groups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsage fetches the app time apps data usage stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsage(params *CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGuestNetworkAppTimeAppsDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGuestNetworkAppTimeAppsDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTime fetches the app time apps online time stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTime(params *CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGuestNetworkAppTimeAppsOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGuestNetworkAppTimeAppsOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsage fetches the app time categories data usage stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsage(params *CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGuestNetworkAppTimeCategoriesDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGuestNetworkAppTimeCategoriesDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTime fetches the app time categories online time stats for captive portal network

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getGuestNetworkAppTimeCategoriesOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetGuestNetworkAppTimeCategoriesOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetHomeAwayLocationEvents fetches the all the homeaway events history for this location

	<div><strong>200</strong>: Success, event array returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetHomeAwayLocationEvents(params *CustomerPrototypeGetHomeAwayLocationEventsParams, opts ...ClientOption) (*CustomerPrototypeGetHomeAwayLocationEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetHomeAwayLocationEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getHomeAwayLocationEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeAway/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetHomeAwayLocationEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetHomeAwayLocationEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetHomeAwayLocationEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetHomeSecurity fetches the home security configuration for this location

	<div><strong>200</strong>: Success, HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetHomeSecurity(params *CustomerPrototypeGetHomeSecurityParams, opts ...ClientOption) (*CustomerPrototypeGetHomeSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetHomeSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getHomeSecurity",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetHomeSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetHomeSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetHomeSecurityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetIPV6 customer prototype get IPv6 API
*/
func (a *Client) CustomerPrototypeGetIPV6(params *CustomerPrototypeGetIPV6Params, opts ...ClientOption) (*CustomerPrototypeGetIPV6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetIPV6Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getIPv6",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/ipv6",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetIPV6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetIPV6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetIPV6Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetKvConfigs retrieves all kv configs on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetKvConfigs(params *CustomerPrototypeGetKvConfigsParams, opts ...ClientOption) (*CustomerPrototypeGetKvConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetKvConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getKvConfigs",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetKvConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetKvConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetKvConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationAppTime gets a location s app time config by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationAppTime(params *CustomerPrototypeGetLocationAppTimeParams, opts ...ClientOption) (*CustomerPrototypeGetLocationAppTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationAppTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationAppTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationAppTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationAppTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationAppTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationCapabilities gets the non base feature capabilities supported by a particular location ID

	<div>The controller will implement logic to determine the non-base features supported by the Pods in the location ID. The feature capability is determined on the system level, and not per individual Pod.</div>

<div>The mobile apps or other WebUIs should only show the UI for a feature if the disabled value equals "false".</div>
<div>&nbsp;</div>
<div><strong>200</strong>: Success, current Capabilities returned.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationCapabilities(params *CustomerPrototypeGetLocationCapabilitiesParams, opts ...ClientOption) (*CustomerPrototypeGetLocationCapabilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationCapabilitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationCapabilities",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/capabilities",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationCapabilitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationCapabilitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationCapabilitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationConfigAuditEvents gets a config audit trail events for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationConfigAuditEvents(params *CustomerPrototypeGetLocationConfigAuditEventsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationConfigAuditEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationConfigAuditEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationConfigAuditEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/configAudit/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationConfigAuditEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationConfigAuditEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationConfigAuditEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationFreezeAutoExpire gets all devices persons except some to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationFreezeAutoExpire(params *CustomerPrototypeGetLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypeGetLocationFreezeAutoExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationFreezeAutoExpire",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationFreezeAutoExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationGuardEventStats gets the guard event stats for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationGuardEventStats(params *CustomerPrototypeGetLocationGuardEventStatsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardEventStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationGuardEventStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationGuardEventStats",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/guard/eventStats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationGuardEventStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationGuardEventStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationGuardEventStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationGuardEventsTldOrIP gets the guard event domain groups for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationGuardEventsTldOrIP(params *CustomerPrototypeGetLocationGuardEventsTldOrIPParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardEventsTldOrIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationGuardEventsTldOrIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationGuardEventsTldOrIp",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/guard/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationGuardEventsTldOrIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationGuardEventsTldOrIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationGuardEventsTldOrIPDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationGuardPersonEventsSummary gets the guard event stats for all persons in a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationGuardPersonEventsSummary(params *CustomerPrototypeGetLocationGuardPersonEventsSummaryParams, opts ...ClientOption) (*CustomerPrototypeGetLocationGuardPersonEventsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationGuardPersonEventsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationGuardPersonEventsSummary",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/guard/personEventsSummary",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationGuardPersonEventsSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationGuardPersonEventsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationGuardPersonEventsSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationKvStates retrieves all kv states on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationKvStates(params *CustomerPrototypeGetLocationKvStatesParams, opts ...ClientOption) (*CustomerPrototypeGetLocationKvStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationKvStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationKvStates",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/kvStates",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationKvStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationKvStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationKvStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationOverlordConfigs gets all the configs from overlord for a specified location

	<div><strong>200</strong>: Success, got the data.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationOverlordConfigs(params *CustomerPrototypeGetLocationOverlordConfigsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationOverlordConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationOverlordConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationOverlordConfigs",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/v2/configAndState",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationOverlordConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationOverlordConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationOverlordConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypeGetLocationQoe gets qo e recent 1 minute data for a whole location
*/
func (a *Client) CustomerPrototypeGetLocationQoe(params *CustomerPrototypeGetLocationQoeParams, opts ...ClientOption) (*CustomerPrototypeGetLocationQoeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationQoeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationQoe",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/qoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationQoeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationQoeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationQoeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationRooms gets a location s rooms config by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationRooms(params *CustomerPrototypeGetLocationRoomsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationRoomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationRoomsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationRooms",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/rooms",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationRoomsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationRoomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationRoomsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationSecurityPolicy gets a security policy for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationSecurityPolicy(params *CustomerPrototypeGetLocationSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationSecurityPolicyEvents gets a security policy events for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationSecurityPolicyEvents(params *CustomerPrototypeGetLocationSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationSecurityPolicyEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationSecurityPolicyEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationSecurityPolicyEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationSecurityPolicyEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationSecurityPolicyEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationSecurityPolicyHourlyCounts gets a security policy hourly blocked counts for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationSecurityPolicyHourlyCounts(params *CustomerPrototypeGetLocationSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationSecurityPolicyHourlyCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationSecurityPolicyHourlyCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationSecurityPolicyHourlyCounts",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/hourlyBlockedCounts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationSecurityPolicyHourlyCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationSecurityPolicyHourlyCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationSecurityPolicyHourlyCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationWanConfiguration gets w a n configuration for a location ID

	<div><strong>200</strong>: Success, WAN Settings returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationWanConfiguration(params *CustomerPrototypeGetLocationWanConfigurationParams, opts ...ClientOption) (*CustomerPrototypeGetLocationWanConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationWanConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationWanConfiguration",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wanConfiguration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationWanConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationWanConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationWanConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocationWanSettings ds e p r e c a t e d get the w a n settings for a location ID

	<div><strong>200</strong>: Success, WAN Settings returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetLocationWanSettings(params *CustomerPrototypeGetLocationWanSettingsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationWanSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationWanSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocationWanSettings",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wanSettings",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationWanSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationWanSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationWanSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetLocations queries locations of customer

	<div><strong>200</strong>: Success, full object returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeGetLocations(params *CustomerPrototypeGetLocationsParams, opts ...ClientOption) (*CustomerPrototypeGetLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetLocationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getLocations",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetLocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetLocationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetManagersListForLocation gets a list of all managers the are assigned to manage your location

	<div><strong>200</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeGetManagersListForLocation(params *CustomerPrototypeGetManagersListForLocationParams, opts ...ClientOption) (*CustomerPrototypeGetManagersListForLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetManagersListForLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getManagersListForLocation",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/managers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetManagersListForLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetManagersListForLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetManagersListForLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetModulesFromController retrieves all firmaware modules for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetModulesFromController(params *CustomerPrototypeGetModulesFromControllerParams, opts ...ClientOption) (*CustomerPrototypeGetModulesFromControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetModulesFromControllerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getModulesFromController",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/firmware/modules",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetModulesFromControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetModulesFromControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetModulesFromControllerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetMotionHistory fetches the motion density history for this location

	<div><strong>200</strong>: Success, motion density array returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetMotionHistory(params *CustomerPrototypeGetMotionHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetMotionHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetMotionHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getMotionHistory",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/motionHistory",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetMotionHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetMotionHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetMotionHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetMotionStateHistory fetches the motion state history for this location

	<div><strong>200</strong>: Success, motion state array returned (Each element of the array is in the form ["val", "unix_ts"], where "val" is one of:

<div>0 - Not armed, not tripped</div>
<div>1 - Not armed, tripped</div>
<div>2 - Armed, not tripped</div>
<div>3 - Armed, tripped</div></div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetMotionStateHistory(params *CustomerPrototypeGetMotionStateHistoryParams, opts ...ClientOption) (*CustomerPrototypeGetMotionStateHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetMotionStateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getMotionStateHistory",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/motionHistory/state",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetMotionStateHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetMotionStateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetMotionStateHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNetworkAccessNetworks gets information about network access networks

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeGetNetworkAccessNetworks(params *CustomerPrototypeGetNetworkAccessNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkAccessNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNetworkAccessNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNetworkAccessNetworks",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNetworkAccessNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNetworkAccessNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNetworkAccessNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNetworkConfigurationHome gets the current overall settings and status of the advanced networking settings for a location ID

	<div><strong>200</strong>: Success, current networkConfiguration settings returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetNetworkConfigurationHome(params *CustomerPrototypeGetNetworkConfigurationHomeParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkConfigurationHomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNetworkConfigurationHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNetworkConfigurationHome",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/home",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNetworkConfigurationHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNetworkConfigurationHomeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNetworkConfigurationHomeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNetworkMode gets the current network mode for a location ID

	<div><strong>200</strong>: Success, current NetworkMode returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or NetworkMode does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetNetworkMode(params *CustomerPrototypeGetNetworkModeParams, opts ...ClientOption) (*CustomerPrototypeGetNetworkModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNetworkModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNetworkMode",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNetworkModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNetworkModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNetworkModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNodeBlePairingPin gets b l e pairing pin for a node that is claimed by the selected location

	<div><strong>200</strong>: Success, pin generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location or node does not exist.</div>
<div><strong>422</strong>: Invalid token. </div>
*/
func (a *Client) CustomerPrototypeGetNodeBlePairingPin(params *CustomerPrototypeGetNodeBlePairingPinParams, opts ...ClientOption) (*CustomerPrototypeGetNodeBlePairingPinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNodeBlePairingPinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNodeBlePairingPin",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/blePairingPin",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNodeBlePairingPinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNodeBlePairingPinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNodeBlePairingPinDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNodeBySerialNumber returns a single node for a location ID with its list of connected devices

	<div><strong>200</strong>: Success, node returned.</div>

<div><strong>404</strong>: customer id or location id does not exist. Or, nodeId not claimed to this account.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetNodeBySerialNumber(params *CustomerPrototypeGetNodeBySerialNumberParams, opts ...ClientOption) (*CustomerPrototypeGetNodeBySerialNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNodeBySerialNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNodeBySerialNumber",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNodeBySerialNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNodeBySerialNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNodeBySerialNumberDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNodeKvStates retrieves all kv states on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetNodeKvStates(params *CustomerPrototypeGetNodeKvStatesParams, opts ...ClientOption) (*CustomerPrototypeGetNodeKvStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNodeKvStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNodeKvStates",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvStates",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNodeKvStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNodeKvStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNodeKvStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetNodes retrieves the node settings and status for a location ID

	<div><strong>200</strong>: Success, array of Nodes returned.</div>

<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetNodes(params *CustomerPrototypeGetNodesParams, opts ...ClientOption) (*CustomerPrototypeGetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getNodes",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetOhpLocationIdentifier gets the current o h p identifier for a location ID

	<div><strong>200</strong>: Success, current DPP configurator returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetOhpLocationIdentifier(params *CustomerPrototypeGetOhpLocationIdentifierParams, opts ...ClientOption) (*CustomerPrototypeGetOhpLocationIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetOhpLocationIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getOhpLocationIdentifier",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/locationIdentifier",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetOhpLocationIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetOhpLocationIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetOhpLocationIdentifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetOnboardingLocationIdentifier gets the onboarding identifier for a location ID

	<div><strong>200</strong>: Success, current DPP configurator returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetOnboardingLocationIdentifier(params *CustomerPrototypeGetOnboardingLocationIdentifierParams, opts ...ClientOption) (*CustomerPrototypeGetOnboardingLocationIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetOnboardingLocationIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getOnboardingLocationIdentifier",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/onboardingLocationIdentifier",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetOnboardingLocationIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetOnboardingLocationIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetOnboardingLocationIdentifierDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonAppTimeAppsDataUsage fetches the app time apps data usage stats for a person

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or person does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonAppTimeAppsDataUsage(params *CustomerPrototypeGetPersonAppTimeAppsDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeAppsDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonAppTimeAppsDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonAppTimeAppsDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonAppTimeAppsDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonAppTimeAppsDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonAppTimeAppsDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonAppTimeAppsOnlineTime fetches the app time apps online time stats for a person

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or person does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonAppTimeAppsOnlineTime(params *CustomerPrototypeGetPersonAppTimeAppsOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeAppsOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonAppTimeAppsOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonAppTimeAppsOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonAppTimeAppsOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonAppTimeAppsOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonAppTimeAppsOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonAppTimeCategoriesDataUsage fetches the app time categories data usage stats for a person

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or person does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonAppTimeCategoriesDataUsage(params *CustomerPrototypeGetPersonAppTimeCategoriesDataUsageParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeCategoriesDataUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonAppTimeCategoriesDataUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonAppTimeCategoriesDataUsage",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/dataUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonAppTimeCategoriesDataUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonAppTimeCategoriesDataUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonAppTimeCategoriesDataUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonAppTimeCategoriesOnlineTime fetches the app time categories online time stats for a person

	<div><strong>200</strong>: Success, AppTime Stats returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or person does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonAppTimeCategoriesOnlineTime(params *CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeParams, opts ...ClientOption) (*CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonAppTimeCategoriesOnlineTime",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/onlineTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonAppTimeCategoriesOnlineTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonByID gets a person by ID for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonByID(params *CustomerPrototypeGetPersonByIDParams, opts ...ClientOption) (*CustomerPrototypeGetPersonByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonById",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonSecurityPolicyEvents gets a security policy events for person for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonSecurityPolicyEvents(params *CustomerPrototypeGetPersonSecurityPolicyEventsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonSecurityPolicyEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonSecurityPolicyEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonSecurityPolicyEvents",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/events",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonSecurityPolicyEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonSecurityPolicyEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonSecurityPolicyEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersonSecurityPolicyHourlyCounts gets a security policy hourly blocked counts for a person for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersonSecurityPolicyHourlyCounts(params *CustomerPrototypeGetPersonSecurityPolicyHourlyCountsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonSecurityPolicyHourlyCountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonSecurityPolicyHourlyCountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersonSecurityPolicyHourlyCounts",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/hourlyBlockedCounts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonSecurityPolicyHourlyCountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonSecurityPolicyHourlyCountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonSecurityPolicyHourlyCountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPersons gets all persons for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPersons(params *CustomerPrototypeGetPersonsParams, opts ...ClientOption) (*CustomerPrototypeGetPersonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPersonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPersons",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPersonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPersonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPersonsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPortForwards gets all existing port forwarding entries for an existing d h c p IP reservation tied to a m a c address at a location ID

	<div><strong>200</strong>: Success, current Port Forwarding entries  returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: NetworkConfiguration or dhcpReservations value is empty.</div>
<div><strong>422</strong>: mac is empty or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPortForwards(params *CustomerPrototypeGetPortForwardsParams, opts ...ClientOption) (*CustomerPrototypeGetPortForwardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPortForwardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPortForwards",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForwards",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPortForwardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPortForwardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPortForwardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetPrimarySecondaryNetworks gets networks for wpa3 transition flow

	<div><strong>200</strong>: Success, returns the data</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or wifiNetwork does not exist</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetPrimarySecondaryNetworks(params *CustomerPrototypeGetPrimarySecondaryNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetPrimarySecondaryNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetPrimarySecondaryNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getPrimarySecondaryNetworks",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/primarySecondaryNetworks",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetPrimarySecondaryNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetPrimarySecondaryNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetPrimarySecondaryNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetQoe1Minute devices or pod qo e live mode data

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetQoe1Minute(params *CustomerPrototypeGetQoe1MinuteParams, opts ...ClientOption) (*CustomerPrototypeGetQoe1MinuteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetQoe1MinuteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getQoe1Minute",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/liveModeStream",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetQoe1MinuteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetQoe1MinuteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetQoe1MinuteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetQoeSeconds devices or pod qo e super live mode data

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetQoeSeconds(params *CustomerPrototypeGetQoeSecondsParams, opts ...ClientOption) (*CustomerPrototypeGetQoeSecondsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetQoeSecondsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getQoeSeconds",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/superLiveModeStream",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetQoeSecondsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetQoeSecondsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetQoeSecondsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetRemoteConnectionsConfig gets the unauthorized remote connections config for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetRemoteConnectionsConfig(params *CustomerPrototypeGetRemoteConnectionsConfigParams, opts ...ClientOption) (*CustomerPrototypeGetRemoteConnectionsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetRemoteConnectionsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getRemoteConnectionsConfig",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/remoteConnections",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetRemoteConnectionsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetRemoteConnectionsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetRemoteConnectionsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSecondaryNetworkInvitation updates home devices visible to guests

	<div><strong>200</strong>: Success, Invitation returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Customer id, location id</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSecondaryNetworkInvitation(params *CustomerPrototypeGetSecondaryNetworkInvitationParams, opts ...ClientOption) (*CustomerPrototypeGetSecondaryNetworkInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSecondaryNetworkInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSecondaryNetworkInvitation",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/primarySecondaryNetworks/wpa3ssid/invitations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSecondaryNetworkInvitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSecondaryNetworkInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSecondaryNetworkInvitationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSecurityRealizedStates retrieves all security states for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSecurityRealizedStates(params *CustomerPrototypeGetSecurityRealizedStatesParams, opts ...ClientOption) (*CustomerPrototypeGetSecurityRealizedStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSecurityRealizedStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSecurityRealizedStates",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/realizedState",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSecurityRealizedStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSecurityRealizedStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSecurityRealizedStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetServiceLevel gets the service level for this location

	<div><strong>200</strong>: Success, return service Level object.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetServiceLevel(params *CustomerPrototypeGetServiceLevelParams, opts ...ClientOption) (*CustomerPrototypeGetServiceLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetServiceLevelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getServiceLevel",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/serviceLevel",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetServiceLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetServiceLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetServiceLevelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSniffing gets DNS HTTP u pn p and m DNS sniffing toggles for a location ID

	<div><strong>200</strong>: Success, current sniffing toggles returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSniffing(params *CustomerPrototypeGetSniffingParams, opts ...ClientOption) (*CustomerPrototypeGetSniffingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSniffingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSniffing",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/sniffing",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSniffingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSniffingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSniffingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSpeedTestResults retrieves the speed test result for a node

	<div><strong>200</strong>: Success, run.</div>

<div><strong>422</strong>: locationId or nodeId isn't defined.</div>
<div><strong>500</strong>: Internal server error</div>
<div><strong>503</strong>: Service Unavailable.</div>
*/
func (a *Client) CustomerPrototypeGetSpeedTestResults(params *CustomerPrototypeGetSpeedTestResultsParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSpeedTestResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSpeedTestResults",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSpeedTestResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSpeedTestResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSpeedTestResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSpeedTestResultsByRequestID retrieves single speed test result by request id for a node

	<div><strong>200</strong>: Success.</div>

<div><strong>422</strong>: locationId or nodeId isn't defined.</div>
<div><strong>404</strong>: Speed test not found.</div>
<div><strong>500</strong>: Internal server error</div>
<div><strong>503</strong>: Service Unavailable.</div>
*/
func (a *Client) CustomerPrototypeGetSpeedTestResultsByRequestID(params *CustomerPrototypeGetSpeedTestResultsByRequestIDParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsByRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSpeedTestResultsByRequestIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSpeedTestResultsByRequestId",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults/{requestId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSpeedTestResultsByRequestIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSpeedTestResultsByRequestIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSpeedTestResultsByRequestIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSpeedTestResultsForApp gets the current speed test aggregation result for a location ID

	<div><strong>200</strong>: Success, current speedTest result and most active devices returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or NetworkMode does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSpeedTestResultsForApp(params *CustomerPrototypeGetSpeedTestResultsForAppParams, opts ...ClientOption) (*CustomerPrototypeGetSpeedTestResultsForAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSpeedTestResultsForAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSpeedTestResultsForApp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appFacade/dashboard",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSpeedTestResultsForAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSpeedTestResultsForAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSpeedTestResultsForAppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSsid gets the current wi fi s s ID for a location ID

	<div><strong>200</strong>: Success, current Wifi Network returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or WifiNetwork does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSsid(params *CustomerPrototypeGetSsidParams, opts ...ClientOption) (*CustomerPrototypeGetSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSsidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSsid",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/ssid",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSsidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSubscription gets subscription details for this location

	<div><strong>200</strong>: Success, subscription details returned</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSubscription(params *CustomerPrototypeGetSubscriptionParams, opts ...ClientOption) (*CustomerPrototypeGetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSubscription",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/subscription",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetSummary ds e p r e c a t e d the system summary for a location including topology optimizations and firmware upgrades

	<div><strong>200</strong>: Success, system info plus topology array returned.</div>

<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetSummary(params *CustomerPrototypeGetSummaryParams, opts ...ClientOption) (*CustomerPrototypeGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getSummary",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/summary",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetTaskStatuses retrieves all task statuses of nodes from controller

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: customer id or location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetTaskStatuses(params *CustomerPrototypeGetTaskStatusesParams, opts ...ClientOption) (*CustomerPrototypeGetTaskStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetTaskStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getTaskStatuses",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/taskStatuses",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetTaskStatusesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetTaskStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetTaskStatusesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetTopology ds e p r e c a t e d the topology for a location including channels and devices

	Please use the GET /Customers/{id}/locations/{locationId}/forceGraph API as a replacement.

<div><strong>200</strong>: Success, array of Nodes returned.</div>
<div><strong>404</strong>: customer id, location id, or topology does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetTopology(params *CustomerPrototypeGetTopologyParams, opts ...ClientOption) (*CustomerPrototypeGetTopologyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetTopologyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getTopology",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/topology",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetTopologyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetTopologyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetTopologyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetTos describes the current state of t o s for the given client

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>404</strong>: No device found with provided mac address</div>
<div><strong>422</strong>: Invalid MAC.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeGetTos(params *CustomerPrototypeGetTosParams, opts ...ClientOption) (*CustomerPrototypeGetTosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetTosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getTos",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/tos",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetTosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetTosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetTosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetUpnp gets the current u pn p setting for a location ID

	<div><strong>200</strong>: Success, current Upnp returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetUpnp(params *CustomerPrototypeGetUpnpParams, opts ...ClientOption) (*CustomerPrototypeGetUpnpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetUpnpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getUpnp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/upnp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetUpnpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetUpnpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetUpnpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetVapStates retrieves all vap state on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetVapStates(params *CustomerPrototypeGetVapStatesParams, opts ...ClientOption) (*CustomerPrototypeGetVapStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetVapStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getVapStates",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/vapStates",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetVapStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetVapStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetVapStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetVapsAndStaStatesFromBackhaul retrieves all vap state on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetVapsAndStaStatesFromBackhaul(params *CustomerPrototypeGetVapsAndStaStatesFromBackhaulParams, opts ...ClientOption) (*CustomerPrototypeGetVapsAndStaStatesFromBackhaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetVapsAndStaStatesFromBackhaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getVapsAndStaStatesFromBackhaul",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/backhauls",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetVapsAndStaStatesFromBackhaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetVapsAndStaStatesFromBackhaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetVapsAndStaStatesFromBackhaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWhitelistApprovalRequests gets a list of pending approval requests for this location

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWhitelistApprovalRequests(params *CustomerPrototypeGetWhitelistApprovalRequestsParams, opts ...ClientOption) (*CustomerPrototypeGetWhitelistApprovalRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWhitelistApprovalRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWhitelistApprovalRequests",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWhitelistApprovalRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWhitelistApprovalRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWhitelistApprovalRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiDashboard wis fi dashboard

	<div><strong>200</strong>: Success, response object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiDashboard(params *CustomerPrototypeGetWifiDashboardParams, opts ...ClientOption) (*CustomerPrototypeGetWifiDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiDashboard",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appFacade/wifiDashboard",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiDashboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiDashboardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiInvitationByID updates home devices visible to guests

	<div><strong>200</strong>: Success, Invitation returned.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork accessZone zoneId/keyId does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiInvitationByID(params *CustomerPrototypeGetWifiInvitationByIDParams, opts ...ClientOption) (*CustomerPrototypeGetWifiInvitationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiInvitationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiInvitationById",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/keys/{keyId}/invitations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiInvitationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiInvitationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiInvitationByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiMotion gets wifi motion config for this location

	<div><strong>200</strong>: Success, wifiMotion object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiMotion(params *CustomerPrototypeGetWifiMotionParams, opts ...ClientOption) (*CustomerPrototypeGetWifiMotionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiMotionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiMotion",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiMotion",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiMotionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiMotionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiMotionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiNetwork gets the current wi fi s s ID and p s k for a location ID

	<div><strong>200</strong>: Success, current Wifi Network returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or WifiNetwork does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiNetwork(params *CustomerPrototypeGetWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiNetwork",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiNetworkDpp gets the current d p p configurator for a location ID

	<div><strong>200</strong>: Success, current DPP configurator returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiNetworkDpp(params *CustomerPrototypeGetWifiNetworkDppParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworkDppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiNetworkDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiNetworkDpp",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiNetworkDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiNetworkDppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiNetworkDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeGetWifiNetworks wis fi networks

	<div><strong>200</strong>: Success, response object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeGetWifiNetworks(params *CustomerPrototypeGetWifiNetworksParams, opts ...ClientOption) (*CustomerPrototypeGetWifiNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeGetWifiNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.getWifiNetworks",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetworks",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeGetWifiNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeGetWifiNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeGetWifiNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeHasLocationByID verifies that a customer Id has a location Id

	<div><strong>200</strong>: Success, no data returned.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: LocationId not found.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeHasLocationByID(params *CustomerPrototypeHasLocationByIDParams, opts ...ClientOption) (*CustomerPrototypeHasLocationByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeHasLocationByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.hasLocationById",
		Method:             "HEAD",
		PathPattern:        "/Customers/{id}/locations/{locationId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeHasLocationByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeHasLocationByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeHasLocationByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeIosDeviceTokenExists provides feedback as to whether an i o s device token was previously registered for push notifications

	<div><strong>200</strong>: Success, exists:true|false returned.</div>

<div><strong>404</strong>: customer id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeIosDeviceTokenExists(params *CustomerPrototypeIosDeviceTokenExistsParams, opts ...ClientOption) (*CustomerPrototypeIosDeviceTokenExistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeIosDeviceTokenExistsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.iosDeviceTokenExists",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/iosDeviceTokens/{deviceToken}/exists",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeIosDeviceTokenExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeIosDeviceTokenExistsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeIosDeviceTokenExistsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeLinkAccount links the outside account such as samsung user

	<div><strong>200</strong>: Success, the outside account inserted into the customer info/object.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeLinkAccount(params *CustomerPrototypeLinkAccountParams, opts ...ClientOption) (*CustomerPrototypeLinkAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeLinkAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.linkAccount",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/linkedAccounts",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeLinkAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeLinkAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeLinkAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeListCustomSharedSchedules gets custom shared schedules for a given location ID

	<div><strong>200</strong>: Success, custom schedules list returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeListCustomSharedSchedules(params *CustomerPrototypeListCustomSharedSchedulesParams, opts ...ClientOption) (*CustomerPrototypeListCustomSharedSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeListCustomSharedSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.listCustomSharedSchedules",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/schedules",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeListCustomSharedSchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeListCustomSharedSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeListCustomSharedSchedulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeMarketingExport gets detailed information of a location for c r m campaigns

	<div><strong>200</strong>: Success, location data in response.</div>

<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeMarketingExport(params *CustomerPrototypeMarketingExportParams, opts ...ClientOption) (*CustomerPrototypeMarketingExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeMarketingExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.marketingExport",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/marketingExport",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeMarketingExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeMarketingExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeMarketingExportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeMigrationStatus returns cloud migration status for customer

	<div><strong>200</strong>: Success, return the search result.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer does not exist.</div>
*/
func (a *Client) CustomerPrototypeMigrationStatus(params *CustomerPrototypeMigrationStatusParams, opts ...ClientOption) (*CustomerPrototypeMigrationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeMigrationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.migrationStatus",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/migration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeMigrationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeMigrationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeMigrationStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOptimize manuallies initiate an optimize request for a location ID

	<div><strong>200</strong>: Success, optimize request sent.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeOptimize(params *CustomerPrototypeOptimizeParams, opts ...ClientOption) (*CustomerPrototypeOptimizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOptimizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.optimize",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/optimize",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOptimizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOptimizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOptimizeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordDeleteAppQoeConfig resets a app qoe config app qoe is to monitor the quality of experience of these apps in the house which is what this p r d covers this qo e monitoring will allow c s ps understand likely issues with applications

	<div><strong>202</strong>: Success, reset.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordDeleteAppQoeConfig(params *CustomerPrototypeOverlordDeleteAppQoeConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteAppQoeConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordDeleteAppQoeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordDeleteAppQoeConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/appQoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordDeleteAppQoeConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordDeleteAppQoeConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordDeleteAppQoeConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordDeleteFlowCacheConfig resets a flow cache config enable disable flow cache to help support dev q a to check influence on the first stage of the investigation

	<div><strong>202</strong>: Success, reset.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordDeleteFlowCacheConfig(params *CustomerPrototypeOverlordDeleteFlowCacheConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteFlowCacheConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordDeleteFlowCacheConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordDeleteFlowCacheConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/flowCache",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordDeleteFlowCacheConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordDeleteFlowCacheConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordDeleteFlowCacheConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordDeleteSamKnowsConfig resets a sam knows config sam knows is a provider of internet performance measurement services they offer the sam knows router agent which supports a range of qo s and qo e performance measurements these measurements can be executed both on an ad hoc and scheduled basis

	<div><strong>202</strong>: Success, reset.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordDeleteSamKnowsConfig(params *CustomerPrototypeOverlordDeleteSamKnowsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteSamKnowsConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordDeleteSamKnowsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordDeleteSamKnowsConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/samKnows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordDeleteSamKnowsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordDeleteSamKnowsConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordDeleteSamKnowsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordDeleteSipAlgConfig resets a sip alg config sip alg is an application within many routers it inspects any vo IP traffic to prevent problems caused by firewalls and if necessary modifies the vo IP packets

	<div><strong>202</strong>: Success, reset.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordDeleteSipAlgConfig(params *CustomerPrototypeOverlordDeleteSipAlgConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteSipAlgConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordDeleteSipAlgConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordDeleteSipAlgConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/sipAlg",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordDeleteSipAlgConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordDeleteSipAlgConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordDeleteSipAlgConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordDeleteStatsConfig resets a stats config location stats configuration used to toggle which stats should be collected

	<div><strong>202</strong>: Success, reset.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordDeleteStatsConfig(params *CustomerPrototypeOverlordDeleteStatsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordDeleteStatsConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordDeleteStatsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordDeleteStatsConfig",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/stats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordDeleteStatsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordDeleteStatsConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordDeleteStatsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordUpdateAppQoeConfig updates a app qoe config app qoe is to monitor the quality of experience of these apps in the house which is what this p r d covers this qo e monitoring will allow c s ps understand likely issues with applications

	<div><strong>202</strong>: Success, accepted and forwarded the data.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid data.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordUpdateAppQoeConfig(params *CustomerPrototypeOverlordUpdateAppQoeConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateAppQoeConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordUpdateAppQoeConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordUpdateAppQoeConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/appQoe",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordUpdateAppQoeConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordUpdateAppQoeConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordUpdateAppQoeConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordUpdateFlowCacheConfig updates a flow cache config enable disable flow cache to help support dev q a to check influence on the first stage of the investigation

	<div><strong>202</strong>: Success, accepted and forwarded the data.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid data.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordUpdateFlowCacheConfig(params *CustomerPrototypeOverlordUpdateFlowCacheConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateFlowCacheConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordUpdateFlowCacheConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordUpdateFlowCacheConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/flowCache",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordUpdateFlowCacheConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordUpdateFlowCacheConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordUpdateFlowCacheConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordUpdateSamKnowsConfig updates a sam knows config sam knows is a provider of internet performance measurement services they offer the sam knows router agent which supports a range of qo s and qo e performance measurements these measurements can be executed both on an ad hoc and scheduled basis

	<div><strong>202</strong>: Success, accepted and forwarded the data.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid data.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordUpdateSamKnowsConfig(params *CustomerPrototypeOverlordUpdateSamKnowsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateSamKnowsConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordUpdateSamKnowsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordUpdateSamKnowsConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/samKnows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordUpdateSamKnowsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordUpdateSamKnowsConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordUpdateSamKnowsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordUpdateSipAlgConfig updates a sip alg config sip alg is an application within many routers it inspects any vo IP traffic to prevent problems caused by firewalls and if necessary modifies the vo IP packets

	<div><strong>202</strong>: Success, accepted and forwarded the data.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid data.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordUpdateSipAlgConfig(params *CustomerPrototypeOverlordUpdateSipAlgConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateSipAlgConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordUpdateSipAlgConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordUpdateSipAlgConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/sipAlg",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordUpdateSipAlgConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordUpdateSipAlgConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordUpdateSipAlgConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeOverlordUpdateStatsConfig updates a stats config location stats configuration used to toggle which stats should be collected

	<div><strong>202</strong>: Success, accepted and forwarded the data.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid data.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeOverlordUpdateStatsConfig(params *CustomerPrototypeOverlordUpdateStatsConfigParams, opts ...ClientOption) (*CustomerPrototypeOverlordUpdateStatsConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeOverlordUpdateStatsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.overlordUpdateStatsConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/config/stats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeOverlordUpdateStatsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeOverlordUpdateStatsConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeOverlordUpdateStatsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchAccessZone updates an access zone

	<div><strong>200</strong>: Success, wifiNetwork returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchAccessZone(params *CustomerPrototypePatchAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePatchAccessZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchAccessZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchAccessZone",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchAccessZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchAccessZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchAccessZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchAppPrioritizationLocationConfig updates app prioritization config

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchAppPrioritizationLocationConfig(params *CustomerPrototypePatchAppPrioritizationLocationConfigParams, opts ...ClientOption) (*CustomerPrototypePatchAppPrioritizationLocationConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchAppPrioritizationLocationConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchAppPrioritizationLocationConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qos/appPrioritization",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchAppPrioritizationLocationConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchAppPrioritizationLocationConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchAppPrioritizationLocationConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchAppTimeIPFlow patches IP flows config

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchAppTimeIPFlow(params *CustomerPrototypePatchAppTimeIPFlowParams, opts ...ClientOption) (*CustomerPrototypePatchAppTimeIPFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchAppTimeIPFlowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchAppTimeIpFlow",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appTime/ipFlows",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchAppTimeIPFlowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchAppTimeIPFlowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchAppTimeIPFlowDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypePatchAttributesPatchCustomersID patches attributes for a model instance and persist it into the data source
*/
func (a *Client) CustomerPrototypePatchAttributesPatchCustomersID(params *CustomerPrototypePatchAttributesPatchCustomersIDParams, opts ...ClientOption) (*CustomerPrototypePatchAttributesPatchCustomersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchAttributesPatchCustomersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchAttributes__patch_Customers_{id}",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchAttributesPatchCustomersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchAttributesPatchCustomersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchAttributesPatchCustomersIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypePatchAttributesPutCustomersID patches attributes for a model instance and persist it into the data source
*/
func (a *Client) CustomerPrototypePatchAttributesPutCustomersID(params *CustomerPrototypePatchAttributesPutCustomersIDParams, opts ...ClientOption) (*CustomerPrototypePatchAttributesPutCustomersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchAttributesPutCustomersIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchAttributes__put_Customers_{id}",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchAttributesPutCustomersIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchAttributesPutCustomersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchAttributesPutCustomersIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCampaignCaptivePortalBranding patches the captive portal campaign branding properties for a given location ID network Id

	<div><strong>200</strong>: Success, campaign branding patched.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCampaignCaptivePortalBranding(params *CustomerPrototypePatchCampaignCaptivePortalBrandingParams, opts ...ClientOption) (*CustomerPrototypePatchCampaignCaptivePortalBrandingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCampaignCaptivePortalBrandingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCampaignCaptivePortalBranding",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/branding",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCampaignCaptivePortalBrandingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCampaignCaptivePortalBrandingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCampaignCaptivePortalBrandingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCampaignCaptivePortalNetwork patches the captive portal campaign for a given location ID network Id

	<div><strong>200</strong>: Success, campaign patched.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCampaignCaptivePortalNetwork(params *CustomerPrototypePatchCampaignCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchCampaignCaptivePortalNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCampaignCaptivePortalNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCampaignCaptivePortalNetwork",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCampaignCaptivePortalNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCampaignCaptivePortalNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCampaignCaptivePortalNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCaptivePortal updates a captive portal for a given location ID network Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>
<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCaptivePortal(params *CustomerPrototypePatchCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypePatchCaptivePortalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCaptivePortalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCaptivePortal",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCaptivePortalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCaptivePortalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCaptivePortalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCaptivePortalAuthorizedClients posts captive portal authorized clients

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCaptivePortalAuthorizedClients(params *CustomerPrototypePatchCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypePatchCaptivePortalAuthorizedClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCaptivePortalAuthorizedClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCaptivePortalAuthorizedClients",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCaptivePortalAuthorizedClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCaptivePortalAuthorizedClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCaptivePortalAuthorizedClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCommand returns cloud migration status for customer

	<div><strong>204</strong>: Success, no content.</div>

<div><strong>400</strong>: Missing providerId or providerUserId body parameter</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>409</strong>: Accounts are already linked for providerUserId</div>
<div><strong>422</strong>: Unfinished document for providerId does not exist</div>
*/
func (a *Client) CustomerPrototypePatchCommand(params *CustomerPrototypePatchCommandParams, opts ...ClientOption) (*CustomerPrototypePatchCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCommand",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/command",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCommandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCustomDeviceType updates a customer s device type configuration user feedback

	<div><strong>200</strong>: Success, device type has been updated<br/>but not validated as a device that <br/>has ever connected.</div>

<div><strong>400</strong>: nickname value must be defined.</div>
<div><strong>404</strong>: customer id and/or mac does not exist.</div>
<div><strong>422</strong>: nickname value must be less than 33 characters.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCustomDeviceType(params *CustomerPrototypePatchCustomDeviceTypeParams, opts ...ClientOption) (*CustomerPrototypePatchCustomDeviceTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCustomDeviceTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCustomDeviceType",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/customType",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCustomDeviceTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCustomDeviceTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCustomDeviceTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchCustomSharedSchedule patches a custom shared schedule freeze template for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: templateId must be defined.</div>
<div><strong>422</strong>: schedules value is invalid.</div>
<div><strong>425</strong>: templateId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchCustomSharedSchedule(params *CustomerPrototypePatchCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypePatchCustomSharedScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchCustomSharedScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchCustomSharedSchedule",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/schedules/{templateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchCustomSharedScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchCustomSharedScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchCustomSharedScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDevice patches a single device to mark it favorite for a location ID

	<div><strong>200</strong>: Success, everything looks good.</div>

<div><strong>404</strong>: customer id or location id does not exist. Or, device not found in this network 's history.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDevice(params *CustomerPrototypePatchDeviceParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDevice",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceAppTime updates a device s app time config by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or device does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDeviceAppTime(params *CustomerPrototypePatchDeviceAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceAppTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceAppTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceAppTime",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/appTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceAppTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceAppTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceAppTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceClientSteering toggles auto on off client steering for a device

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid mac address.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDeviceClientSteering(params *CustomerPrototypePatchDeviceClientSteeringParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceClientSteeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceClientSteeringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceClientSteering",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/clientSteering",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceClientSteeringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceClientSteeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceClientSteeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceGroup changes a device group name or device members

	<div><strong>200</strong>: Success.</div>

<div><strong>422</strong>: Schema validation failed.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>403</strong>: Not allowed to modify standalone groups or groups in unsupported networks.</div>
<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Invalid JSON or missing arguments.</div>
*/
func (a *Client) CustomerPrototypePatchDeviceGroup(params *CustomerPrototypePatchDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceGroup",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceOHPConfiguration updates the device UUID mapping for out of home protection

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Device does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDeviceOHPConfiguration(params *CustomerPrototypePatchDeviceOHPConfigurationParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceOHPConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceOHPConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceOHPConfiguration",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/ohp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceOHPConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceOHPConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceOHPConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceQos updates qo s of a single device

	<div><strong>202</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: Prioritization is not a valid value.</div>
*/
func (a *Client) CustomerPrototypePatchDeviceQos(params *CustomerPrototypePatchDeviceQosParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceQosAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceQosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceQos",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/qos",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceQosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceQosAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceQosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceSecurityPolicy updates a device s security policy for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>
<div><strong>409</strong>: Device is assigned to a person so its security policy must be configured on the Person</div>
<div><strong>422</strong>: Mac addresses must be valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDeviceSecurityPolicy(params *CustomerPrototypePatchDeviceSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDeviceSoundingState patches the sounding states for the given devices

	<div><strong>200</strong>: Success, device sounding states returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDeviceSoundingState(params *CustomerPrototypePatchDeviceSoundingStateParams, opts ...ClientOption) (*CustomerPrototypePatchDeviceSoundingStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDeviceSoundingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDeviceSoundingState",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/devices/sounding",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDeviceSoundingStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDeviceSoundingStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDeviceSoundingStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchDpp patches the d p p configuration mode for a location ID

	<div><strong>202</strong>: Success, DPP updated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: DPP value is invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchDpp(params *CustomerPrototypePatchDppParams, opts ...ClientOption) (*CustomerPrototypePatchDppAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchDpp",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchDppAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchEthernetLan updates the ethernet lan setting for a location ID

	Supported modes are:

* enable/disable/auto

<div><strong>200</strong>: Success, new ethernetLan settings saved.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Input validation error, see output for details.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchEthernetLan(params *CustomerPrototypePatchEthernetLanParams, opts ...ClientOption) (*CustomerPrototypePatchEthernetLanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchEthernetLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchEthernetLan",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/ethernetLan",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchEthernetLanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchEthernetLanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchEthernetLanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchFlowStats patches the flow stats configuration

	<div><strong>202</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>422</strong>: Input value is invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchFlowStats(params *CustomerPrototypePatchFlowStatsParams, opts ...ClientOption) (*CustomerPrototypePatchFlowStatsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchFlowStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchFlowStats",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/flowStats",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchFlowStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchFlowStatsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchFlowStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchFrontHaul updates a front haul for a given location ID network Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>
<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchFrontHaul(params *CustomerPrototypePatchFrontHaulParams, opts ...ClientOption) (*CustomerPrototypePatchFrontHaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchFrontHaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchFrontHaul",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchFrontHaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchFrontHaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchFrontHaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicy updates a location s default device group security policy by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicy(params *CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchGroupOfUnassignedDevicesSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchGroupOfUnassignedDevicesSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchHomeAwayActive enables disable home away wifi motion events activation for this location

	<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchHomeAwayActive(params *CustomerPrototypePatchHomeAwayActiveParams, opts ...ClientOption) (*CustomerPrototypePatchHomeAwayActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchHomeAwayActiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchHomeAwayActive",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/homeAway",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchHomeAwayActiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchHomeAwayActiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchHomeAwayActiveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchHomeSecurity enables disable live motion streaming and or motion events for this location

	<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchHomeSecurity(params *CustomerPrototypePatchHomeSecurityParams, opts ...ClientOption) (*CustomerPrototypePatchHomeSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchHomeSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchHomeSecurity",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchHomeSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchHomeSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchHomeSecurityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchHomeSecuritySensitivity configures motion event configuration for this location

	<div><strong>200</strong>: Success, updated HomeSecurity object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchHomeSecuritySensitivity(params *CustomerPrototypePatchHomeSecuritySensitivityParams, opts ...ClientOption) (*CustomerPrototypePatchHomeSecuritySensitivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchHomeSecuritySensitivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchHomeSecuritySensitivity",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/homeSecurity/sensitivity",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchHomeSecuritySensitivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchHomeSecuritySensitivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchHomeSecuritySensitivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypePatchIPV6 customer prototype patch IPv6 API
*/
func (a *Client) CustomerPrototypePatchIPV6(params *CustomerPrototypePatchIPV6Params, opts ...ClientOption) (*CustomerPrototypePatchIPV6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchIPV6Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchIPv6",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/ipv6",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchIPV6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchIPV6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchIPV6Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchKvConfigs retrieves all kv configs on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchKvConfigs(params *CustomerPrototypePatchKvConfigsParams, opts ...ClientOption) (*CustomerPrototypePatchKvConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchKvConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchKvConfigs",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchKvConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchKvConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchKvConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocation updates a location s service Id

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: You must specify at least one parameter to patch.</div>
<div><strong>422</strong>: Only integration role can set profile to property.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocation(params *CustomerPrototypePatchLocationParams, opts ...ClientOption) (*CustomerPrototypePatchLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocation",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationAppTime updates a location s app time config by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationAppTime(params *CustomerPrototypePatchLocationAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchLocationAppTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationAppTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationAppTime",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/appTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationAppTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationAppTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationAppTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationBandSteering sets mode for band steering

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid mode.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationBandSteering(params *CustomerPrototypePatchLocationBandSteeringParams, opts ...ClientOption) (*CustomerPrototypePatchLocationBandSteeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationBandSteeringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationBandSteering",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/bandSteering",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationBandSteeringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationBandSteeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationBandSteeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationFreezeAutoExpire puts all devices except some to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationFreezeAutoExpire(params *CustomerPrototypePatchLocationFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePatchLocationFreezeAutoExpireNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationFreezeAutoExpire",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationFreezeAutoExpireNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationManager updates type of access of manager on location

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationManager(params *CustomerPrototypePatchLocationManagerParams, opts ...ClientOption) (*CustomerPrototypePatchLocationManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationManager",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/managers/{managerId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationManagerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationQoeLiveMode updates the location qoe live mode by api call and kafka message

	<div><strong>200</strong>: Success, the new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>400</strong>: enalbe and expiresAt, reportingInterval validation error.</div>
<div><strong>422</strong>: expiresAt and reportingInterval validation error.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationQoeLiveMode(params *CustomerPrototypePatchLocationQoeLiveModeParams, opts ...ClientOption) (*CustomerPrototypePatchLocationQoeLiveModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationQoeLiveModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationQoeLiveMode",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/qoe/liveMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationQoeLiveModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationQoeLiveModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationQoeLiveModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchLocationSecurityPolicy updates a location s security policy by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchLocationSecurityPolicy(params *CustomerPrototypePatchLocationSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchLocationSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchLocationSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchLocationSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchLocationSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchLocationSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchLocationSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchMulticast updates the multicast settings for a location ID

	Supported modes for individual settings are:

* igmpSnooping: enable/disable/auto
* igmpProxy: igmpv1/igmpv2/igmpv3/disable/auto
* mldProxy: mldv1/mldv2/disable/disable/auto
* multicastToUnicast: enable/disable/auto

<div><strong>200</strong>: Success, new multicast settings saved.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Input validation error, see output for details.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchMulticast(params *CustomerPrototypePatchMulticastParams, opts ...ClientOption) (*CustomerPrototypePatchMulticastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchMulticastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchMulticast",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/multicast",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchMulticastReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchMulticastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchMulticastDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchNetworkAccessNetwork enables or disable purgatory in the network

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
*/
func (a *Client) CustomerPrototypePatchNetworkAccessNetwork(params *CustomerPrototypePatchNetworkAccessNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchNetworkAccessNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchNetworkAccessNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchNetworkAccessNetwork",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchNetworkAccessNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchNetworkAccessNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchNetworkAccessNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchOptimizations enables disable optimizations for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid dfsMode, prefer160MhzMode, zeroWaitDfsMode, hopPenalty or preCACScheduler provided.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchOptimizations(params *CustomerPrototypePatchOptimizationsParams, opts ...ClientOption) (*CustomerPrototypePatchOptimizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchOptimizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchOptimizations",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/optimizations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchOptimizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchOptimizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchOptimizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchPerson updates a person for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Person id does not exist and is not known to Plume</div>
<div><strong>409</strong>: primaryDevice is not included in the list of assignedDevices[]</div>
<div><strong>422</strong>: Mac addresses must be valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchPerson(params *CustomerPrototypePatchPersonParams, opts ...ClientOption) (*CustomerPrototypePatchPersonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchPerson",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchPersonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchPersonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchPersonDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchPersonAppTime updates a person s app time config by location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or person does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchPersonAppTime(params *CustomerPrototypePatchPersonAppTimeParams, opts ...ClientOption) (*CustomerPrototypePatchPersonAppTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchPersonAppTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchPersonAppTime",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/appTime",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchPersonAppTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchPersonAppTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchPersonAppTimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchPersonProfile updates a person s profile for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchPersonProfile(params *CustomerPrototypePatchPersonProfileParams, opts ...ClientOption) (*CustomerPrototypePatchPersonProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchPersonProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchPersonProfile",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/profile",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchPersonProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchPersonProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchPersonProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchPersonSecurityPolicy updates a person s security policy for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchPersonSecurityPolicy(params *CustomerPrototypePatchPersonSecurityPolicyParams, opts ...ClientOption) (*CustomerPrototypePatchPersonSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchPersonSecurityPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchPersonSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchPersonSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchPersonSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchPersonSecurityPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchRemoteConnectionsConfig patches a remote connections config for the given location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchRemoteConnectionsConfig(params *CustomerPrototypePatchRemoteConnectionsConfigParams, opts ...ClientOption) (*CustomerPrototypePatchRemoteConnectionsConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchRemoteConnectionsConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchRemoteConnectionsConfig",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/remoteConnections",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchRemoteConnectionsConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchRemoteConnectionsConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchRemoteConnectionsConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchRoom patches a room for a location ID room ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: Devices and Nodes must be defined and mac addresses must be valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchRoom(params *CustomerPrototypePatchRoomParams, opts ...ClientOption) (*CustomerPrototypePatchRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchRoom",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/rooms/{roomId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchSecurityConfiguration patches security configurations for location preferred intelligence etc

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid securityConfig.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchSecurityConfiguration(params *CustomerPrototypePatchSecurityConfigurationParams, opts ...ClientOption) (*CustomerPrototypePatchSecurityConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchSecurityConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchSecurityConfiguration",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityConfiguration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchSecurityConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchSecurityConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchSecurityConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchServiceLevel sets the service level for this location

	<div><strong>200</strong>: Success, updated service Level object returned.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: Invalid 'status' value.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchServiceLevel(params *CustomerPrototypePatchServiceLevelParams, opts ...ClientOption) (*CustomerPrototypePatchServiceLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchServiceLevelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchServiceLevel",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/serviceLevel",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchServiceLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchServiceLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchServiceLevelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchSubscription patches subscription details for this location

	<div><strong>202</strong>: Success, status patched</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: Status is invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchSubscription(params *CustomerPrototypePatchSubscriptionParams, opts ...ClientOption) (*CustomerPrototypePatchSubscriptionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchSubscription",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/subscription",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchSubscriptionAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchWifiMotion enables disable wifi motion feature for this location

	<div><strong>200</strong>: Success, updated object returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePatchWifiMotion(params *CustomerPrototypePatchWifiMotionParams, opts ...ClientOption) (*CustomerPrototypePatchWifiMotionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchWifiMotionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchWifiMotion",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiMotion",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchWifiMotionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchWifiMotionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchWifiMotionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePatchWifiNetwork updates the s s ID of the wifi network

	<div><strong>200</strong>: Success, access zone returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePatchWifiNetwork(params *CustomerPrototypePatchWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePatchWifiNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePatchWifiNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.patchWifiNetwork",
		Method:             "PATCH",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePatchWifiNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePatchWifiNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePatchWifiNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCampaignPreviewCaptivePortalNetwork ps o s t captive portal campaign preview for a given location ID network Id

	<div><strong>200</strong>: Success, campaign posted.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostCampaignPreviewCaptivePortalNetwork(params *CustomerPrototypePostCampaignPreviewCaptivePortalNetworkParams, opts ...ClientOption) (*CustomerPrototypePostCampaignPreviewCaptivePortalNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCampaignPreviewCaptivePortalNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCampaignPreviewCaptivePortalNetwork",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/preview",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCampaignPreviewCaptivePortalNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCampaignPreviewCaptivePortalNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCampaignPreviewCaptivePortalNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCaptivePortal creates a captive portal network for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>
<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostCaptivePortal(params *CustomerPrototypePostCaptivePortalParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCaptivePortalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCaptivePortal",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCaptivePortalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCaptivePortalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCaptivePortalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCaptivePortalAuthorizedClients posts captive portal authorized clients

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id/NetworkId does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostCaptivePortalAuthorizedClients(params *CustomerPrototypePostCaptivePortalAuthorizedClientsParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalAuthorizedClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCaptivePortalAuthorizedClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCaptivePortalAuthorizedClients",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCaptivePortalAuthorizedClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCaptivePortalAuthorizedClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCaptivePortalAuthorizedClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCaptivePortalCampaignAsset uploads campaign asset for given location

	<div><strong>200</strong>: Success, appId info returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or url does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostCaptivePortalCampaignAsset(params *CustomerPrototypePostCaptivePortalCampaignAssetParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalCampaignAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCaptivePortalCampaignAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCaptivePortalCampaignAsset",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/uploadCampaignAsset",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCaptivePortalCampaignAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCaptivePortalCampaignAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCaptivePortalCampaignAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCaptivePortalEnableGuestEmailCollection patches the captive portal network to be compliant for guest email collection

	<div><strong>200</strong>: Success, CaptivePortal Networks has been patched.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostCaptivePortalEnableGuestEmailCollection(params *CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCaptivePortalEnableGuestEmailCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCaptivePortalEnableGuestEmailCollection",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/enableGuestEmailCollection",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCaptivePortalEnableGuestEmailCollectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCaptivePortalNetworkUsageStats fetches the captive portal network usage stats for the given network

	<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or secondary networks does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostCaptivePortalNetworkUsageStats(params *CustomerPrototypePostCaptivePortalNetworkUsageStatsParams, opts ...ClientOption) (*CustomerPrototypePostCaptivePortalNetworkUsageStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCaptivePortalNetworkUsageStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCaptivePortalNetworkUsageStats",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/networkUsage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCaptivePortalNetworkUsageStatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCaptivePortalNetworkUsageStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCaptivePortalNetworkUsageStatsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostCustomSharedSchedule creates custom shared schedules that shared by all persons and devices in a location

	<div><strong>200</strong>: Success, custom shared schedules applied.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist or is not known to Plume</div>
<div><strong>422</strong>: schedules value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostCustomSharedSchedule(params *CustomerPrototypePostCustomSharedScheduleParams, opts ...ClientOption) (*CustomerPrototypePostCustomSharedScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostCustomSharedScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postCustomSharedSchedule",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/schedules",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostCustomSharedScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostCustomSharedScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostCustomSharedScheduleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceFreeze posts a shared schedule uuid freeze for a device for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>404</strong>: FreezeTemplateId not found</div>
<div><strong>404</strong>: Device not found</div>
<div><strong>422</strong>: GroupOfUnassignedDevices has active freeze schedule</div>
<div><strong>422</strong>: Person has active freeze schedule</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceFreeze(params *CustomerPrototypePostDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypePostDeviceFreezeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceFreeze",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceFreezeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceGroup creates a named device group within a network and optionally specify member devices

	<div><strong>200</strong>: Success.</div>

<div><strong>422</strong>: Schema validation failed.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>403</strong>: Not allowed to create groups in unsupported networks.</div>
<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Invalid JSON or missing arguments.</div>
*/
func (a *Client) CustomerPrototypePostDeviceGroup(params *CustomerPrototypePostDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypePostDeviceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceGroup",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceQos sets qo s of a single device

	<div><strong>202</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: Prioritization is not a valid value.</div>
*/
func (a *Client) CustomerPrototypePostDeviceQos(params *CustomerPrototypePostDeviceQosParams, opts ...ClientOption) (*CustomerPrototypePostDeviceQosAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceQosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceQos",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/qos",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceQosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceQosAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceQosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceSecurityPolicyAnomalyExperience initiates an anomaly experience demo for a device on a location

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceSecurityPolicyAnomalyExperience(params *CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceSecurityPolicyAnomalyExperience",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/experience",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceSecurityPolicyAnomalyExperienceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelist approves a previously blacklisted anomalous dns for a device on a location

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelist(params *CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceSecurityPolicyAnomalyWhitelist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceSecurityPolicyAnomalyWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklist updates a device s security policy for a location ID to include a blacklisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceSecurityPolicyWebsitesBlacklist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelist updates a device s security policy for a location ID to include a whitelisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceSecurityPolicyWebsitesWhitelist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostDeviceToAccessZone adds a device mac to a wi fi access zone

	<div><strong>200</strong>: Success, all access zones returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostDeviceToAccessZone(params *CustomerPrototypePostDeviceToAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePostDeviceToAccessZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostDeviceToAccessZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postDeviceToAccessZone",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/accessibleDevices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostDeviceToAccessZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostDeviceToAccessZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostDeviceToAccessZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostFrontHaul creates a front haul network for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or NetworkId does not exist and is not known to Plume</div>
<div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostFrontHaul(params *CustomerPrototypePostFrontHaulParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostFrontHaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postFrontHaul",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostFrontHaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostFrontHaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostFrontHaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostFrontHaulsDpp creates the d p p setting for a fronthaul network

	<div><strong>202</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>
<div><strong>422</strong>: Invalid keys.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostFrontHaulsDpp(params *CustomerPrototypePostFrontHaulsDppParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostFrontHaulsDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postFrontHaulsDpp",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostFrontHaulsDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostFrontHaulsDppAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostFrontHaulsDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostFrontHaulsDppBootstrap creates a bootstrap for d p p setting for a fronthaul network

	<div><strong>200</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>
<div><strong>422</strong>: Invalid curve.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostFrontHaulsDppBootstrap(params *CustomerPrototypePostFrontHaulsDppBootstrapParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppBootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostFrontHaulsDppBootstrapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postFrontHaulsDppBootstrap",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/bootstrapUris",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostFrontHaulsDppBootstrapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostFrontHaulsDppBootstrapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostFrontHaulsDppBootstrapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostFrontHaulsDppEnrollment creates an enrollment for d p p setting for a fronthaul secondary network

	<div><strong>202</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or wifi network does not exist.</div>
<div><strong>404</strong>: Configurator keys for network not found.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostFrontHaulsDppEnrollment(params *CustomerPrototypePostFrontHaulsDppEnrollmentParams, opts ...ClientOption) (*CustomerPrototypePostFrontHaulsDppEnrollmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostFrontHaulsDppEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postFrontHaulsDppEnrollment",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/enrollments",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostFrontHaulsDppEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostFrontHaulsDppEnrollmentAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostFrontHaulsDppEnrollmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateID ps o s t group of unassigned devices to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>404</strong>: Freeze Template Id not found.</div>
<div><strong>409</strong>: Freeze Template Id already applied.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateID(params *CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postGroupOfUnassignedDevicesFreezeTemplateId",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostGroupOfUnassignedDevicesFreezeTemplateIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist updates a location s default device group security policy for a location ID to include a blacklisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist updates a location s default device group security policy for a location ID to include a whitelisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostKvConfigs retrieves all kv configs on a particular node for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostKvConfigs(params *CustomerPrototypePostKvConfigsParams, opts ...ClientOption) (*CustomerPrototypePostKvConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostKvConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postKvConfigs",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostKvConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostKvConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostKvConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetup setups a mobile device for security out of home protection returns a deeplink for use with mobolize

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetup(params *CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postLocationSecurityPolicyOHPDeviceSetup",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceSetup",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostLocationSecurityPolicyOHPDeviceSetupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklist updates a location s security policy for a location ID to include a blacklisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postLocationSecurityPolicyWebsitesBlacklist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostLocationSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelist updates a location s security policy for a location ID to include a whitelisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postLocationSecurityPolicyWebsitesWhitelist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostLocationSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostManager assigns a manager to your location

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: Invalid email, name, access type or manager is already assigned to this location </div>
*/
func (a *Client) CustomerPrototypePostManager(params *CustomerPrototypePostManagerParams, opts ...ClientOption) (*CustomerPrototypePostManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostManagerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postManager",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/managers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostManagerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostManagerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostOnboardingCheckpoint records the new onboarding checkpoint for the location ID

	<div><strong>200</strong>: Success, most recent checkpoint saved.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: checkpoint value must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostOnboardingCheckpoint(params *CustomerPrototypePostOnboardingCheckpointParams, opts ...ClientOption) (*CustomerPrototypePostOnboardingCheckpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostOnboardingCheckpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postOnboardingCheckpoint",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/onboardingCheckpoint",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostOnboardingCheckpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostOnboardingCheckpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostOnboardingCheckpointDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostPersonFreeze posts a shared schedule uuid freeze for a person for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>404</strong>: FreezeTemplateId not found.</div>
<div><strong>404</strong>: Person not found.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostPersonFreeze(params *CustomerPrototypePostPersonFreezeParams, opts ...ClientOption) (*CustomerPrototypePostPersonFreezeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostPersonFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postPersonFreeze",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostPersonFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostPersonFreezeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostPersonFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklist updates a person s security policy for a location ID to include a blacklisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklist(params *CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistParams, opts ...ClientOption) (*CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postPersonSecurityPolicyWebsitesBlacklist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostPersonSecurityPolicyWebsitesBlacklistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelist updates a person s security policy for a location ID to include a whitelisted DNS entry

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, WifiNetwork, or Person id does not exist and is not known to Plume</div>
<div><strong>422</strong>: DNS value is invalid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelist(params *CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistParams, opts ...ClientOption) (*CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postPersonSecurityPolicyWebsitesWhitelist",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostPersonSecurityPolicyWebsitesWhitelistDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostPersons creates a person for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: Nickname must be defined and mac addresses must be valid and email needs to be provided when permission is provided.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostPersons(params *CustomerPrototypePostPersonsParams, opts ...ClientOption) (*CustomerPrototypePostPersonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostPersonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postPersons",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostPersonsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostPersonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostPersonsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostPortForward records a new port forwarding entry for an existing d h c p IP reservation tied to a m a c address at a location ID

	<div><strong>200</strong>: Success, all PortForwards are returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward is empty.</div>
<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort is out of range, or protocol is invalid, or duplicate externalPort.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostPortForward(params *CustomerPrototypePostPortForwardParams, opts ...ClientOption) (*CustomerPrototypePostPortForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostPortForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postPortForward",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostPortForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostPortForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostPortForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostRemoteConnectionsAllow posts a remote connection allow Ip address ttl for the given device and location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>
<div><strong>422</strong>: Fields have an invalid type or value.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostRemoteConnectionsAllow(params *CustomerPrototypePostRemoteConnectionsAllowParams, opts ...ClientOption) (*CustomerPrototypePostRemoteConnectionsAllowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostRemoteConnectionsAllowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postRemoteConnectionsAllow",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostRemoteConnectionsAllowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostRemoteConnectionsAllowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostRemoteConnectionsAllowDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostRemoteConnectionsAllowAll posts a remote connection allow all ttl for the given device and location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or Device mac does not exist and is not known to Plume</div>
<div><strong>422</strong>: Fields have an invalid type or value.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostRemoteConnectionsAllowAll(params *CustomerPrototypePostRemoteConnectionsAllowAllParams, opts ...ClientOption) (*CustomerPrototypePostRemoteConnectionsAllowAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostRemoteConnectionsAllowAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postRemoteConnectionsAllowAll",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allowAll",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostRemoteConnectionsAllowAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostRemoteConnectionsAllowAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostRemoteConnectionsAllowAllDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostRooms creates a room for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id does not exist and is not known to Plume</div>
<div><strong>422</strong>: Devices and Nodes must be defined and mac addresses must be valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostRooms(params *CustomerPrototypePostRoomsParams, opts ...ClientOption) (*CustomerPrototypePostRoomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostRoomsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postRooms",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/rooms",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostRoomsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostRoomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostRoomsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostRunMobileIspSpeedTest runs i s p speed test for g w node on mobile request

	<div><strong>200</strong>: Success, run.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer or location does not exists.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostRunMobileIspSpeedTest(params *CustomerPrototypePostRunMobileIspSpeedTestParams, opts ...ClientOption) (*CustomerPrototypePostRunMobileIspSpeedTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostRunMobileIspSpeedTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postRunMobileIspSpeedTest",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/ispSpeedTest",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostRunMobileIspSpeedTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostRunMobileIspSpeedTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostRunMobileIspSpeedTestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostSpeedTest runs speed test for a node

	<div><strong>200</strong>: Success, run.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer, location or node does not exists.</div>
<div><strong>422</strong>: Invalid test type.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostSpeedTest(params *CustomerPrototypePostSpeedTestParams, opts ...ClientOption) (*CustomerPrototypePostSpeedTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostSpeedTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postSpeedTest",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTest",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostSpeedTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostSpeedTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostSpeedTestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWhitelistApprovalRequest posts a request for a whitelist exception to be added to your person profile

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostWhitelistApprovalRequest(params *CustomerPrototypePostWhitelistApprovalRequestParams, opts ...ClientOption) (*CustomerPrototypePostWhitelistApprovalRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWhitelistApprovalRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWhitelistApprovalRequest",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWhitelistApprovalRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWhitelistApprovalRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWhitelistApprovalRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiAccessZone creates a new wi fi access zone

	<div><strong>200</strong>: Success, all access zones returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiAccessZone(params *CustomerPrototypePostWifiAccessZoneParams, opts ...ClientOption) (*CustomerPrototypePostWifiAccessZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiAccessZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiAccessZone",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiAccessZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiAccessZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiAccessZoneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiKey creates a new wi fi password

	<div><strong>200</strong>: Success, all passwords returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>422</strong>: Password validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiKey(params *CustomerPrototypePostWifiKeyParams, opts ...ClientOption) (*CustomerPrototypePostWifiKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiKey",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiNetwork updates a wi fi s s ID and or p s k for a location ID

	<div><strong>200</strong>: Success, in your future 100 mbps for all devices I see. -Yoda.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist and is not known to Plume</div>
<div><strong>409</strong>: A WifiNetwork already exists for this location.</div>
<div><strong>422</strong>: encryptionKey or ssid must be defined, or key length < 8.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiNetwork(params *CustomerPrototypePostWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiNetwork",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiNetworkDpp creates the d p p setting for a location ID

	<div><strong>202</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiNetworkDpp(params *CustomerPrototypePostWifiNetworkDppParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiNetworkDppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiNetworkDpp",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiNetworkDppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiNetworkDppAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiNetworkDppDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiNetworkDppBootstrap creates a bootstrap for d p p setting for a wifi network

	<div><strong>200</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or wifi network does not exist.</div>
<div><strong>422</strong>: Invalid curve.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiNetworkDppBootstrap(params *CustomerPrototypePostWifiNetworkDppBootstrapParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppBootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiNetworkDppBootstrapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiNetworkDppBootstrap",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp/bootstrapUris",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiNetworkDppBootstrapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiNetworkDppBootstrapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiNetworkDppBootstrapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePostWifiNetworkDppEnrollment creates an enrollment for d p p setting for a wifi network

	<div><strong>202</strong>: Success, new DPP configurator generated.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or wifi network does not exist.</div>
<div><strong>404</strong>: Configurator keys for network not found.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePostWifiNetworkDppEnrollment(params *CustomerPrototypePostWifiNetworkDppEnrollmentParams, opts ...ClientOption) (*CustomerPrototypePostWifiNetworkDppEnrollmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePostWifiNetworkDppEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.postWifiNetworkDppEnrollment",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/dpp/enrollments",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePostWifiNetworkDppEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePostWifiNetworkDppEnrollmentAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePostWifiNetworkDppEnrollmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerPrototypePublishSlowChangingDimensionConfigs publishes all slow changing dimension kafka messages

<div><strong>204</strong>: Success.</div>
*/
func (a *Client) CustomerPrototypePublishSlowChangingDimensionConfigs(params *CustomerPrototypePublishSlowChangingDimensionConfigsParams, opts ...ClientOption) (*CustomerPrototypePublishSlowChangingDimensionConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePublishSlowChangingDimensionConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.publishSlowChangingDimensionConfigs",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/publishSlowChangingDimensionConfigs",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePublishSlowChangingDimensionConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePublishSlowChangingDimensionConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePublishSlowChangingDimensionConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizations configures number of authorized leaf pods for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields are missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizations(params *CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_authorizations",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/authorizations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizations configures number of authorized leaf pods grouped by model id for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields are missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizations(params *CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsParams, opts ...ClientOption) (*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_nodeAuthorizations",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodeAuthorizations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutAuthorizationsPutCustomersIDLocationsLocationIDNodeAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutBackhaul toggles secure backhaul for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutBackhaul(params *CustomerPrototypePutBackhaulParams, opts ...ClientOption) (*CustomerPrototypePutBackhaulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutBackhaulParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putBackhaul",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/backhaul",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutBackhaulReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutBackhaulOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutBackhaulDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutBandSteering enables disable band steering for a location ID deprecated

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutBandSteering(params *CustomerPrototypePutBandSteeringParams, opts ...ClientOption) (*CustomerPrototypePutBandSteeringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutBandSteeringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putBandSteering",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/bandSteering",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutBandSteeringReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutBandSteeringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutBandSteeringDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutBleMode enables or disable b l e beaconing for all pods at a location for pod location services e g for pods naming

	<div>With the mode of "on", all connected pods at this location will have their bluetooth beacon turned on for locating purposes. Each BLE beacon contains the serial number of the transmitting Pod. A setting of "off", turns off the BLE beaconing for all Pods. With mode set to "wps", all connected pods at this location will have their bluetooth beacon turned on for WPS related proximity measurements.</div>

<div><strong>200</strong>: Success, your new info looks good.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: bleMode must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutBleMode(params *CustomerPrototypePutBleModeParams, opts ...ClientOption) (*CustomerPrototypePutBleModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutBleModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putBleMode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/bleMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutBleModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutBleModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutBleModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutBleModeForNode enables or disable b l e beaconing for the specific pod at a location

	<div>With the mode of "on", all connected pods at this location will have their bluetooth beacon turned on for locating purposes. Each BLE beacon contains the serial number of the transmitting Pod. A setting of "off", turns off the BLE beaconing for all Pods. With mode set to "wps", all connected pods at this location will have their bluetooth beacon turned on for WPS related proximity measurements.</div>

<div><strong>200</strong>: Success, your new info looks good.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: bleMode must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutBleModeForNode(params *CustomerPrototypePutBleModeForNodeParams, opts ...ClientOption) (*CustomerPrototypePutBleModeForNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutBleModeForNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putBleModeForNode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutBleModeForNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutBleModeForNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutBleModeForNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutCaptivePortalSendDetails sends captive portal guest details to requesters email for a given location ID network Id

	<div><strong>204</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutCaptivePortalSendDetails(params *CustomerPrototypePutCaptivePortalSendDetailsParams, opts ...ClientOption) (*CustomerPrototypePutCaptivePortalSendDetailsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutCaptivePortalSendDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putCaptivePortalSendDetails",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/sendGuestDetails",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutCaptivePortalSendDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutCaptivePortalSendDetailsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutCaptivePortalSendDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutCommand returns cloud migration status for customer

	<div><strong>204</strong>: Success, no content.</div>

<div><strong>400</strong>: Missing providerId body parameter</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>409</strong>: Accounts are already linked for providerId</div>
<div><strong>422</strong>: Invalid providerId</div>
*/
func (a *Client) CustomerPrototypePutCommand(params *CustomerPrototypePutCommandParams, opts ...ClientOption) (*CustomerPrototypePutCommandNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putCommand",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/command",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutCommandNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutControlMode sets control mode for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutControlMode(params *CustomerPrototypePutControlModeParams, opts ...ClientOption) (*CustomerPrototypePutControlModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutControlModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putControlMode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/controlMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutControlModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutControlModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutControlModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutCouncilmanResync pushes security configurations to councilman

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutCouncilmanResync(params *CustomerPrototypePutCouncilmanResyncParams, opts ...ClientOption) (*CustomerPrototypePutCouncilmanResyncNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutCouncilmanResyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putCouncilmanResync",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/councilman/resync",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutCouncilmanResyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutCouncilmanResyncNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutCouncilmanResyncDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceFreeze puts a device to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
<div><strong>501</strong>: Not Implemented, if location is utilizing shared location freeze schedules</div>
*/
func (a *Client) CustomerPrototypePutDeviceFreeze(params *CustomerPrototypePutDeviceFreezeParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceFreeze",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceFreezeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceFreezeAutoExpire puts a device to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutDeviceFreezeAutoExpire(params *CustomerPrototypePutDeviceFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeAutoExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceFreezeAutoExpire",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceFreezeAutoExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceFreezeForever puts a device forever freeze for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutDeviceFreezeForever(params *CustomerPrototypePutDeviceFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeForeverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceFreezeForever",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceFreezeForeverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceFreezeResidentialGwManaged puts a device residential gw managed freeze for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutDeviceFreezeResidentialGwManaged(params *CustomerPrototypePutDeviceFreezeResidentialGwManagedParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeResidentialGwManagedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceFreezeResidentialGwManagedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceFreezeResidentialGwManaged",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/residentialGwManaged",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceFreezeResidentialGwManagedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceFreezeResidentialGwManagedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceFreezeResidentialGwManagedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceFreezeSuspend puts a device suspend for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutDeviceFreezeSuspend(params *CustomerPrototypePutDeviceFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutDeviceFreezeSuspendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceFreezeSuspend",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceFreezeSuspendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDeviceNickname nicknames a customer s device for all locations

	<div><strong>200</strong>: Success, device name has been updated<br/>but not validated as a device that <br/>has ever connected.</div>

<div><strong>400</strong>: nickname value must be defined.</div>
<div><strong>404</strong>: customer id and/or mac does not exist.</div>
<div><strong>422</strong>: nickname value must be less than 33 characters.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutDeviceNickname(params *CustomerPrototypePutDeviceNicknameParams, opts ...ClientOption) (*CustomerPrototypePutDeviceNicknameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDeviceNicknameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDeviceNickname",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDeviceNicknameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDeviceNicknameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDeviceNicknameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDevicesFreezeCommand sets auto expire or freeze template Id suspend for specified mac addresses

	<div><strong>200</strong>: Succcess, updated</div>

<div><strong>401</strong>: Unathorized</div>
<div><strong>404</strong>: Mac not found</div>
<div><strong>422</strong>: Invalid freezeTemplateID</div>
<div><strong>500</strong>: Internal Server Error</div>
*/
func (a *Client) CustomerPrototypePutDevicesFreezeCommand(params *CustomerPrototypePutDevicesFreezeCommandParams, opts ...ClientOption) (*CustomerPrototypePutDevicesFreezeCommandNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDevicesFreezeCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDevicesFreezeCommand",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/command/devices/freeze",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDevicesFreezeCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDevicesFreezeCommandNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDevicesFreezeCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDevicesVisibleToGuests ds e p r e c a t e d update home devices visible to guests

	<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>
<div><strong>422</strong>: Device mac validation failed.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutDevicesVisibleToGuests(params *CustomerPrototypePutDevicesVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypePutDevicesVisibleToGuestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDevicesVisibleToGuestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDevicesVisibleToGuests",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDevicesVisibleToGuestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDevicesVisibleToGuestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDevicesVisibleToGuestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDhcp records or update a new d h c p subnet subnet mask for a location ID

	<div><strong>200</strong>: Success, DHCP are returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: subnet value is empty, or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutDhcp(params *CustomerPrototypePutDhcpParams, opts ...ClientOption) (*CustomerPrototypePutDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDhcp",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDhcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDhcpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDhcpReservation records or update a new d h c p IP reservation for a particular m a c address at a location ID

	<div><strong>200</strong>: Success, all DHCP Reservations are returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>412</strong>: Subnet prefix is unknown.</div>
<div><strong>422</strong>: IP/mac value is empty, or invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutDhcpReservation(params *CustomerPrototypePutDhcpReservationParams, opts ...ClientOption) (*CustomerPrototypePutDhcpReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDhcpReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDhcpReservation",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDhcpReservationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDhcpReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDhcpReservationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDNSServers updates the DNS IPv4 server addresses for a location ID

	<div><strong>200</strong>: Success, new DNS Servers saved.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: primaryDns or secondaryDns DNS Servers value is empty.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutDNSServers(params *CustomerPrototypePutDNSServersParams, opts ...ClientOption) (*CustomerPrototypePutDNSServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDNSServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDnsServers",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDNSServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDNSServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDNSServersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutDppEnrollments creates and persist a list of d p p enrollments

	<div><strong>202</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or wifi network does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutDppEnrollments(params *CustomerPrototypePutDppEnrollmentsParams, opts ...ClientOption) (*CustomerPrototypePutDppEnrollmentsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutDppEnrollmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putDppEnrollments",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/dpp/enrollments",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutDppEnrollmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutDppEnrollmentsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutDppEnrollmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutEthernetLan updates location nodes with ethernet lan modes

	<div><strong>202</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Node does not exist.</div>
<div><strong>422</strong>: nodeEthernetLan does not exist.</div>
*/
func (a *Client) CustomerPrototypePutEthernetLan(params *CustomerPrototypePutEthernetLanParams, opts ...ClientOption) (*CustomerPrototypePutEthernetLanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutEthernetLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putEthernetLan",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/ethernetLan",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutEthernetLanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutEthernetLanAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutEthernetLanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutFirmwareUpgradeRequest requests firmware upgrade for a location ID

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutFirmwareUpgradeRequest(params *CustomerPrototypePutFirmwareUpgradeRequestParams, opts ...ClientOption) (*CustomerPrototypePutFirmwareUpgradeRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutFirmwareUpgradeRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putFirmwareUpgradeRequest",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/firmware",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutFirmwareUpgradeRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutFirmwareUpgradeRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutFirmwareUpgradeRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutFrontlineStorage creates or update the frontline storage for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutFrontlineStorage(params *CustomerPrototypePutFrontlineStorageParams, opts ...ClientOption) (*CustomerPrototypePutFrontlineStorageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutFrontlineStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putFrontlineStorage",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/frontline/storage",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutFrontlineStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutFrontlineStorageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutFrontlineStorageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpire puts group of unassigned devices auto expire freeze for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpire(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putGroupOfUnassignedDevicesFreezeAutoExpire",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutGroupOfUnassignedDevicesFreezeForever ps u t group of unassigned devices forever for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutGroupOfUnassignedDevicesFreezeForever(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putGroupOfUnassignedDevicesFreezeForever",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspend ps u t group of unassigned devices suspend for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspend(params *CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putGroupOfUnassignedDevicesFreezeSuspend",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutGroupOfUnassignedDevicesFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutIosDeviceToken inserts the i o s device token for the customer ID which may be used for notification services

	<div><strong>204</strong>: Success, most recent IOS device Token saved.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: deviceToken value must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutIosDeviceToken(params *CustomerPrototypePutIosDeviceTokenParams, opts ...ClientOption) (*CustomerPrototypePutIosDeviceTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutIosDeviceTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putIosDeviceToken",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/iosDeviceToken/{deviceToken}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutIosDeviceTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutIosDeviceTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutIosDeviceTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutIspSpeedTestConfiguration enables pipe disable isp speed test configuration to schedule speed tests

	<div><strong>200</strong>: Success, run.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Customer or location does not exists.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutIspSpeedTestConfiguration(params *CustomerPrototypePutIspSpeedTestConfigurationParams, opts ...ClientOption) (*CustomerPrototypePutIspSpeedTestConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutIspSpeedTestConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putIspSpeedTestConfiguration",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/ispSpeedTestConfiguration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutIspSpeedTestConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutIspSpeedTestConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutIspSpeedTestConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLedMode updates the l e d mode on a particular node for a location ID

	When the mode is set to "locate", the Node with that ID at this locationId, will have its LED blinked for locating purposes. The mode is set to "normal" to return the LED to its normal mode of operation.

<div><strong>200</strong>: Success, your new info looks good.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist.</div>
<div><strong>422</strong>: ledMode must be defined.</div>
<div><strong>422</strong>: ledMode must be "locate" or "normal".</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>425</strong>: nodeId must belong to the location.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutLedMode(params *CustomerPrototypePutLedModeParams, opts ...ClientOption) (*CustomerPrototypePutLedModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLedModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLedMode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/ledMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLedModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLedModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLedModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLocale configures locale values for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Region value is not valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutLocale(params *CustomerPrototypePutLocaleParams, opts ...ClientOption) (*CustomerPrototypePutLocaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLocaleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLocale",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/locale",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLocaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLocaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLocaleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMapping updates the device UUID mapping for out of home protection

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMapping(params *CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingParams, opts ...ClientOption) (*CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLocationSecurityPolicyOHPDeviceUuidMapping",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceUuid",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLocationSecurityPolicyOHPDeviceUUIDMappingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLocationSecurityPolicyOHPProtectionState updates the device protection state for out of home protection

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutLocationSecurityPolicyOHPProtectionState(params *CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateParams, opts ...ClientOption) (*CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLocationSecurityPolicyOHPProtectionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLocationSecurityPolicyOHPProtectionState",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/ohp/protectionState",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLocationSecurityPolicyOHPProtectionStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLocationWanConfiguration persists w a n configuration for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Required fields are not valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutLocationWanConfiguration(params *CustomerPrototypePutLocationWanConfigurationParams, opts ...ClientOption) (*CustomerPrototypePutLocationWanConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLocationWanConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLocationWanConfiguration",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wanConfiguration",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLocationWanConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLocationWanConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLocationWanConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutLocationWanSettings ds e p r e c a t e d persist w a n settings for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Required fields are not valid.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutLocationWanSettings(params *CustomerPrototypePutLocationWanSettingsParams, opts ...ClientOption) (*CustomerPrototypePutLocationWanSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutLocationWanSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putLocationWanSettings",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wanSettings",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutLocationWanSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutLocationWanSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutLocationWanSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutMonitorMode enables disable monitor mode for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutMonitorMode(params *CustomerPrototypePutMonitorModeParams, opts ...ClientOption) (*CustomerPrototypePutMonitorModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutMonitorModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putMonitorMode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/monitorMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutMonitorModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutMonitorModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutMonitorModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutNetworkMode updates the network mode for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutNetworkMode(params *CustomerPrototypePutNetworkModeParams, opts ...ClientOption) (*CustomerPrototypePutNetworkModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutNetworkModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putNetworkMode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkMode",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutNetworkModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutNetworkModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutNetworkModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutOptimizations enables disable optimizations for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>422</strong>: Invalid dfsMode, prefer160MhzMode, hopPenalty or preCACScheduler provided.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutOptimizations(params *CustomerPrototypePutOptimizationsParams, opts ...ClientOption) (*CustomerPrototypePutOptimizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutOptimizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putOptimizations",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/optimizations",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutOptimizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutOptimizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutOptimizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutOverlordResync pushes secondary network configurations to overlord

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutOverlordResync(params *CustomerPrototypePutOverlordResyncParams, opts ...ClientOption) (*CustomerPrototypePutOverlordResyncNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutOverlordResyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putOverlordResync",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/overlord/resync",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutOverlordResyncReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutOverlordResyncNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutOverlordResyncDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPersistConfigurationOnGateway updates settings for persist configuration on gateway

	Supported modes are:

* enable/disable/auto

<div><strong>200</strong>: Success, new ethernetLan settings saved.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Input validation error, see output for details.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutPersistConfigurationOnGateway(params *CustomerPrototypePutPersistConfigurationOnGatewayParams, opts ...ClientOption) (*CustomerPrototypePutPersistConfigurationOnGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPersistConfigurationOnGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPersistConfigurationOnGateway",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/persistConfigurationOnGateway",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPersistConfigurationOnGatewayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPersistConfigurationOnGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPersistConfigurationOnGatewayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPersonFreeze puts a person to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
<div><strong>501</strong>: Not Implemented, if location is utilizing shared location freeze schedules</div>
*/
func (a *Client) CustomerPrototypePutPersonFreeze(params *CustomerPrototypePutPersonFreezeParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPersonFreezeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPersonFreeze",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/{freezeTemplateId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPersonFreezeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPersonFreezeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPersonFreezeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPersonFreezeAutoExpire puts all devices from a person to be frozen for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutPersonFreezeAutoExpire(params *CustomerPrototypePutPersonFreezeAutoExpireParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeAutoExpireOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPersonFreezeAutoExpireParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPersonFreezeAutoExpire",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/autoExpire",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPersonFreezeAutoExpireReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPersonFreezeAutoExpireOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPersonFreezeAutoExpireDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPersonFreezeForever puts a person forever freeze for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutPersonFreezeForever(params *CustomerPrototypePutPersonFreezeForeverParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeForeverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPersonFreezeForeverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPersonFreezeForever",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/forever",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPersonFreezeForeverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPersonFreezeForeverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPersonFreezeForeverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPersonFreezeSuspend puts a person suspend for a location ID

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutPersonFreezeSuspend(params *CustomerPrototypePutPersonFreezeSuspendParams, opts ...ClientOption) (*CustomerPrototypePutPersonFreezeSuspendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPersonFreezeSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPersonFreezeSuspend",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/persons/{personId}/freeze/suspend",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPersonFreezeSuspendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPersonFreezeSuspendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPersonFreezeSuspendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutPortForward updates an existing port forwarding entry for an existing d h c p IP reservation tied to a m a c address at a location ID

	<div><strong>200</strong>: Success, all PortForwards are returned.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward is empty.</div>
<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort is out of range, or protocol is invalid.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutPortForward(params *CustomerPrototypePutPortForwardParams, opts ...ClientOption) (*CustomerPrototypePutPortForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutPortForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putPortForward",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward/{externalPort}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutPortForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutPortForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutPortForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutSniffing updates location sniffing toggle modes

	<div><strong>202</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypePutSniffing(params *CustomerPrototypePutSniffingParams, opts ...ClientOption) (*CustomerPrototypePutSniffingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutSniffingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putSniffing",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/sniffing",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutSniffingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutSniffingAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutSniffingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutSnoozeOnDeviceAlert snoozes an alert on a device

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id does not exist or device mac not in this account's recent history.</div>
<div><strong>422</strong>: Invalid alert type and/or state.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutSnoozeOnDeviceAlert(params *CustomerPrototypePutSnoozeOnDeviceAlertParams, opts ...ClientOption) (*CustomerPrototypePutSnoozeOnDeviceAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutSnoozeOnDeviceAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putSnoozeOnDeviceAlert",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/alerts/{type}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutSnoozeOnDeviceAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutSnoozeOnDeviceAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutSnoozeOnDeviceAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutSnoozeOnNodeAlert snoozes an alert on a node

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id does not exist or nodeId not claimed to this account.</div>
<div><strong>422</strong>: Invalid alert type and/or state.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutSnoozeOnNodeAlert(params *CustomerPrototypePutSnoozeOnNodeAlertParams, opts ...ClientOption) (*CustomerPrototypePutSnoozeOnNodeAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutSnoozeOnNodeAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putSnoozeOnNodeAlert",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/alerts/{type}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutSnoozeOnNodeAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutSnoozeOnNodeAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutSnoozeOnNodeAlertDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutSubscription puts subscription details for this location

	<div><strong>200</strong>: Success, service level returned</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: customer id or location id does not exist and is not known to Plume</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutSubscription(params *CustomerPrototypePutSubscriptionParams, opts ...ClientOption) (*CustomerPrototypePutSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putSubscription",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/subscription",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutSubscriptionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutUpnp updates the u pn p setting for a location ID

	<div><strong>200</strong>: Success, new Upnp saved.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: Upnp value is empty.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutUpnp(params *CustomerPrototypePutUpnpParams, opts ...ClientOption) (*CustomerPrototypePutUpnpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutUpnpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putUpnp",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkConfiguration/upnp",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutUpnpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutUpnpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutUpnpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutWifiKey updates a wi fi password

	<div><strong>200</strong>: Success, all passwords returned</div>

<div><strong>400</strong>: Required fields missing</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist</div>
<div><strong>405</strong>: Cannot disable a read-only key</div>
<div><strong>422</strong>: Password validation failed</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypePutWifiKey(params *CustomerPrototypePutWifiKeyParams, opts ...ClientOption) (*CustomerPrototypePutWifiKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutWifiKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putWifiKey",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys/{keyId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutWifiKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutWifiKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutWifiKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypePutWifiNetwork updates a wi fi s s ID and or p s k for a location ID

	<div><strong>200</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id, or wifi network does not exist.</div>
<div><strong>422</strong>: encryptionKey or ssid must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypePutWifiNetwork(params *CustomerPrototypePutWifiNetworkParams, opts ...ClientOption) (*CustomerPrototypePutWifiNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypePutWifiNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.putWifiNetwork",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypePutWifiNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypePutWifiNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypePutWifiNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRebootLocation reboots a particular on line node for a location ID

	<div><strong>204</strong>: Success, your new info looks good.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id, does not exist.</div>
<div><strong>422</strong>: Delay, is not between 0 and 100000.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeRebootLocation(params *CustomerPrototypeRebootLocationParams, opts ...ClientOption) (*CustomerPrototypeRebootLocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRebootLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.rebootLocation",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/reboot",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRebootLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRebootLocationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRebootLocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRebootNode reboots a single on line node for a location ID

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: location id or nodeId, does not exist.</div>
<div><strong>422</strong>: Delay, is not between 0 and 100000.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeRebootNode(params *CustomerPrototypeRebootNodeParams, opts ...ClientOption) (*CustomerPrototypeRebootNodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRebootNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.rebootNode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}/reboot",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRebootNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRebootNodeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRebootNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRejectWhitelistRequest rejects an approval request for a website whitelist

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id, CustomerId or requst id does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeRejectWhitelistRequest(params *CustomerPrototypeRejectWhitelistRequestParams, opts ...ClientOption) (*CustomerPrototypeRejectWhitelistRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRejectWhitelistRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.rejectWhitelistRequest",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests/{requestId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRejectWhitelistRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRejectWhitelistRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRejectWhitelistRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRemoveDeviceByMac removes a device for a customer s location id wiping config and setting a hidden flag

	<div><strong>204</strong>: Success, device removed from location. </div>

<div><strong>404</strong>: location id or  device not found. </div>
<div><strong>500</strong>: internal server error </div>
*/
func (a *Client) CustomerPrototypeRemoveDeviceByMac(params *CustomerPrototypeRemoveDeviceByMacParams, opts ...ClientOption) (*CustomerPrototypeRemoveDeviceByMacNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRemoveDeviceByMacParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.removeDeviceByMac",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRemoveDeviceByMacReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRemoveDeviceByMacNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRemoveDeviceByMacDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRemoveDeviceVisibleToGuests ds e p r e c a t e d update home devices visible to guests

	<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Customer id, location id, or WifiNetwork does not exist.</div>
<div><strong>422</strong>: Device mac validation failed.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeRemoveDeviceVisibleToGuests(params *CustomerPrototypeRemoveDeviceVisibleToGuestsParams, opts ...ClientOption) (*CustomerPrototypeRemoveDeviceVisibleToGuestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRemoveDeviceVisibleToGuestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.removeDeviceVisibleToGuests",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRemoveDeviceVisibleToGuestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRemoveDeviceVisibleToGuestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRemoveDeviceVisibleToGuestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeRenameNode renames a particular node for a location ID with the option to disable the blinking l e d

	Rename a particular Node for a Location ID with the option to disable the blinking LED with the option "emitMessage":"on" or "off".

<div><strong>200</strong>: Success, a job well done.</div>
<div><strong>400</strong>: Bad request, nickname is undefined or empty string.</div>
<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>
<div><strong>404</strong>: location ID or node ID not found.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeRenameNode(params *CustomerPrototypeRenameNodeParams, opts ...ClientOption) (*CustomerPrototypeRenameNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeRenameNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.renameNode",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeRenameNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeRenameNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeRenameNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeResendManagerInvite resends invite to a manager that has status pending

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Required fields missing or field type is incorrect.</div>
<div><strong>404</strong>: Location or Manager does not exist.</div>
<div><strong>422</strong>: Manager already accepted the invite to manage the location </div>
*/
func (a *Client) CustomerPrototypeResendManagerInvite(params *CustomerPrototypeResendManagerInviteParams, opts ...ClientOption) (*CustomerPrototypeResendManagerInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeResendManagerInviteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.resendManagerInvite",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/managers/{managerId}/resendInvite",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeResendManagerInviteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeResendManagerInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeResendManagerInviteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeResetTos resets the back off and thresholds for the given client

	<div><strong>200</strong>: Ok.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>404</strong>: No device found with provided mac address</div>
<div><strong>422</strong>: Invalid MAC.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeResetTos(params *CustomerPrototypeResetTosParams, opts ...ClientOption) (*CustomerPrototypeResetTosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeResetTosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.resetTos",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/tos/reset",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeResetTosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeResetTosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeResetTosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeSetForcedSteer forces a device to use the 2 4 ghz band with auto expire

	<div><strong>204</strong>: Success, forced steer enabled.</div>

<div><strong>404</strong>: Location ID or Device mac not found or the device has not been online in the last 31 days</div>
<div><strong>422</strong>: expiresAt is outside of the expected range 5 to 60 minutes in the future</div>
<div><strong>422</strong>: expiresAt is an invalid UTC date</div>
<div><strong>422</strong>: expiresAt cannot be in the past</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeSetForcedSteer(params *CustomerPrototypeSetForcedSteerParams, opts ...ClientOption) (*CustomerPrototypeSetForcedSteerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeSetForcedSteerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.setForcedSteer",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/{mac}/forcedSteer",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeSetForcedSteerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeSetForcedSteerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeSetForcedSteerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeSetPrimarySecondaryNetworks sets networks at wpa3 transition flow

	<div><strong>202</strong>: Success, accepted the data</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: location id does not exist</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeSetPrimarySecondaryNetworks(params *CustomerPrototypeSetPrimarySecondaryNetworksParams, opts ...ClientOption) (*CustomerPrototypeSetPrimarySecondaryNetworksAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeSetPrimarySecondaryNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.setPrimarySecondaryNetworks",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/primarySecondaryNetworks",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeSetPrimarySecondaryNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeSetPrimarySecondaryNetworksAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeSetPrimarySecondaryNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeShareDevice shares access to individual device

	<p>This endpoint allows for a device in the first network to have access to all of the devices in the other group in the second network and/or to individual devices in the second network. In other words, by sharing access, we're allowing a single device to communicate with other devices across networks, by specifying other groups and/or individual devices.</p>

<div><strong>200</strong>: Success.</div>
<div><strong>422</strong>: Schema validation failed.</div>
<div><strong>422</strong>: Illegal share.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>404</strong>: Group does not exist.</div>
<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Invalid JSON or missing arguments.</div>
*/
func (a *Client) CustomerPrototypeShareDevice(params *CustomerPrototypeShareDeviceParams, opts ...ClientOption) (*CustomerPrototypeShareDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeShareDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.shareDevice",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/devices/{mac}/groupShares",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeShareDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeShareDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeShareDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeShareDeviceGroup shares access for a group or employee

	<p>This endpoint allows for a device in the first network to have access to all of the devices in the other group in the second network and/or to individual devices in the second network. In other words, by sharing access, we're allowing a single device to communicate with other devices across networks, by specifying other groups and/or individual devices.</p>

<div><strong>200</strong>: Success.</div>
<div><strong>422</strong>: Schema validation failed.</div>
<div><strong>422</strong>: Illegal share.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>404</strong>: Group does not exist.</div>
<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Invalid JSON or missing arguments.</div>
*/
func (a *Client) CustomerPrototypeShareDeviceGroup(params *CustomerPrototypeShareDeviceGroupParams, opts ...ClientOption) (*CustomerPrototypeShareDeviceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeShareDeviceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.shareDeviceGroup",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}/groupShares",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeShareDeviceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeShareDeviceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeShareDeviceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeStartWps starts a w p s session

	<div><strong>201</strong>: Success, a WPS session was requested.</div>

<div><strong>401</strong>: Authorization required </div>
<div><strong>404</strong>: location id not found or nodeId missing from URL
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeStartWps(params *CustomerPrototypeStartWpsParams, opts ...ClientOption) (*CustomerPrototypeStartWpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeStartWpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.startWps",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/startWps",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeStartWpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeStartWpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeStartWpsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeStitchDevice deletes prioritization of a single device

	<div><strong>204</strong>: Success.</div>

<div><strong>401</strong>: Unauthorized.</div>
<div><strong>400</strong>: Missing oldMac or newMac field.</div>
<div><strong>404</strong>: Location does not exist.</div>
<div><strong>422</strong>: oldMac or newMac is not valid mac.</div>
<div><strong>422</strong>: If oldMac and newMac are the same.</div>
*/
func (a *Client) CustomerPrototypeStitchDevice(params *CustomerPrototypeStitchDeviceParams, opts ...ClientOption) (*CustomerPrototypeStitchDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeStitchDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.stitchDevice",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/locations/{locationId}/devices/stitch",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeStitchDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeStitchDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeStitchDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUnapproveDevice unapproves approved devices in the network

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
<div><strong>404</strong>: Network does not exist.</div>
<div><strong>404</strong>: Device is not approved.</div>
*/
func (a *Client) CustomerPrototypeUnapproveDevice(params *CustomerPrototypeUnapproveDeviceParams, opts ...ClientOption) (*CustomerPrototypeUnapproveDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUnapproveDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.unapproveDevice",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUnapproveDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUnapproveDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUnapproveDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUnblockDevice unblocks blocked devices

	<div><strong>204</strong>: Success.</div>

<div><strong>404</strong>: Location does not exist.</div>
*/
func (a *Client) CustomerPrototypeUnblockDevice(params *CustomerPrototypeUnblockDeviceParams, opts ...ClientOption) (*CustomerPrototypeUnblockDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUnblockDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.unblockDevice",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/networkAccess/blocked/{mac}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUnblockDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUnblockDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUnblockDeviceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUnclaimAllNodes unclaims all nodes from a location ID with the option of preserving the original package ID

	<div><strong>204</strong>: Success, a job well done.</div>

<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>
<div><strong>404</strong>: location id not found in customer service or not found in inventory service.<p/>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeUnclaimAllNodes(params *CustomerPrototypeUnclaimAllNodesParams, opts ...ClientOption) (*CustomerPrototypeUnclaimAllNodesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUnclaimAllNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.unclaimAllNodes",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUnclaimAllNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUnclaimAllNodesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUnclaimAllNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUnclaimNode unclaims a particular node from a location ID with the option of preserving the original package ID

	<div><strong>204</strong>: Success, a job well done.</div>

<div><strong>400</strong>: Pod already unclaimed.</div>
<div><strong>401</strong>: Authorization required, customer id not found, <br/> or id not owned by requestor.</div>
<div><strong>403</strong>: the node is online, and can not be unclaimed.<br/>
<div><strong>404</strong>: location id not found, nodeId missing from URL,<br/> or location has zero owned pods.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeUnclaimNode(params *CustomerPrototypeUnclaimNodeParams, opts ...ClientOption) (*CustomerPrototypeUnclaimNodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUnclaimNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.unclaimNode",
		Method:             "DELETE",
		PathPattern:        "/Customers/{id}/locations/{locationId}/nodes/{nodeId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUnclaimNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUnclaimNodeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUnclaimNodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUpdateLocationName updates the location name

	<div><strong>200</strong>: Success, updated.</div>

<div><strong>400</strong>: Required fields missing.</div>
<div><strong>401</strong>: Authorization required or customer id not found.</div>
<div><strong>404</strong>: Location id, does not exist.</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeUpdateLocationName(params *CustomerPrototypeUpdateLocationNameParams, opts ...ClientOption) (*CustomerPrototypeUpdateLocationNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUpdateLocationNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.updateLocationName",
		Method:             "PUT",
		PathPattern:        "/Customers/{id}/locations/{locationId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUpdateLocationNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUpdateLocationNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUpdateLocationNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUpdateTermsAndPrivacy updates a terms and privacy acceptance for customer

	<div><strong>200</strong>: Success, terms and privacy updated.</div>

<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeUpdateTermsAndPrivacy(params *CustomerPrototypeUpdateTermsAndPrivacyParams, opts ...ClientOption) (*CustomerPrototypeUpdateTermsAndPrivacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUpdateTermsAndPrivacyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.updateTermsAndPrivacy",
		Method:             "POST",
		PathPattern:        "/Customers/{id}/termsAndPrivacyAccepted",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUpdateTermsAndPrivacyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUpdateTermsAndPrivacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUpdateTermsAndPrivacyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeUserInfo gets customer details with user info access token

	<div><strong>200</strong>: Success, customer details returned.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerPrototypeUserInfo(params *CustomerPrototypeUserInfoParams, opts ...ClientOption) (*CustomerPrototypeUserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeUserInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.userInfo",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/userInfo",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeUserInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeUserInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeUserInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeVerifyEmailPasswordlessToken verifies the email token and activates tokens related to it returns verified text with redirect to signup complete deep link

	<div><strong>204</strong>: Success, return new appToken and send out the email with emailToken.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: nodeId must be defined.</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeVerifyEmailPasswordlessToken(params *CustomerPrototypeVerifyEmailPasswordlessTokenParams, opts ...ClientOption) (*CustomerPrototypeVerifyEmailPasswordlessTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeVerifyEmailPasswordlessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.verifyEmailPasswordlessToken",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/passwordLessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeVerifyEmailPasswordlessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeVerifyEmailPasswordlessTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeVerifyEmailPasswordlessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeVlanServices returns vlan services from customer location state

	<div><strong>200</strong>: Success.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>404</strong>: Location id or WifiNetwork does not exist and is not known to Plume</div>
<div><strong>500</strong>: Internal server error</div>
*/
func (a *Client) CustomerPrototypeVlanServices(params *CustomerPrototypeVlanServicesParams, opts ...ClientOption) (*CustomerPrototypeVlanServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeVlanServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.vlanServices",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/vlanServices",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeVlanServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeVlanServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeVlanServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerPrototypeWpsState gets w p s state

	<div><strong>200</strong>: Success, a job well done.</div>

<div><strong>401</strong>: Authorization required </div>
<div><strong>404</strong>: location id not found or nodeId missing from URL
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerPrototypeWpsState(params *CustomerPrototypeWpsStateParams, opts ...ClientOption) (*CustomerPrototypeWpsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerPrototypeWpsStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.prototype.wpsState",
		Method:             "GET",
		PathPattern:        "/Customers/{id}/locations/{locationId}/wpsState",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerPrototypeWpsStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerPrototypeWpsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerPrototypeWpsStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerRefreshOauthAccessToken refreshes access and refresh tokens

	<div><strong>200</strong>: Success, access and refresh tokens created and returned.</div>

<div><strong>401</strong>: Authorization Required.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerRefreshOauthAccessToken(params *CustomerRefreshOauthAccessTokenParams, opts ...ClientOption) (*CustomerRefreshOauthAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerRefreshOauthAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.refreshOauthAccessToken",
		Method:             "POST",
		PathPattern:        "/Customers/refreshOauthAccessToken",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerRefreshOauthAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerRefreshOauthAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerRefreshOauthAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerRegister registers create an anonymous account with an account Id instead of with email password

	<div><strong>200</strong>: Success, customer and location IDs returned.</div>

<div><strong>400</strong>: Required fields are missing.</div>
<div><strong>401</strong>: Authorization required.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>422</strong>: Only integration role can set profile to property.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerRegister(params *CustomerRegisterParams, opts ...ClientOption) (*CustomerRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerRegisterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.register",
		Method:             "POST",
		PathPattern:        "/Customers/register",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerRegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerRegisterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerRegisterWithGroups registers create an account with an account Id plus email password groups

	<div><strong>200</strong>: Success, customer and location IDs returned.</div>

<div><strong>400</strong>: Required fields are missing.</div>
<div><strong>401</strong>: Authorization required.</div>
<div><strong>422</strong>: Input validation failed.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerRegisterWithGroups(params *CustomerRegisterWithGroupsParams, opts ...ClientOption) (*CustomerRegisterWithGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerRegisterWithGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.registerWithGroups",
		Method:             "POST",
		PathPattern:        "/Customers/registerWithGroups",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerRegisterWithGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerRegisterWithGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerRegisterWithGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerResendEmailVerification resends the verification email

	<div><strong>204</strong>: Successfully sent email verification.</div>

<div><strong>400</strong>: Customer email is required (for this request).</div>
<div><strong>404</strong>: Unable to find Customer by email address.</div>
<div><strong>409</strong>: Customer email already verified.</div>
<div><strong>500</strong>: Internal server error.</div>
*/
func (a *Client) CustomerResendEmailVerification(params *CustomerResendEmailVerificationParams, opts ...ClientOption) (*CustomerResendEmailVerificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerResendEmailVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.resendEmailVerification",
		Method:             "POST",
		PathPattern:        "/Customers/resendEmailVerification",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerResendEmailVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerResendEmailVerificationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerResendEmailVerificationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CustomerResetPassword resets password for a user with email
*/
func (a *Client) CustomerResetPassword(params *CustomerResetPasswordParams, opts ...ClientOption) (*CustomerResetPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerResetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.resetPassword",
		Method:             "POST",
		PathPattern:        "/Customers/reset",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerResetPasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CustomerSearchFields searches the keyword on a particular field such as account Id name email

	<div><strong>200</strong>: Success, return the search result.</div>

<div><strong>401</strong>: Authorization required or customer id not found</div>
<div><strong>422</strong>: "illegal field"</div>
<div><strong>500</strong>: internal server error</div>
*/
func (a *Client) CustomerSearchFields(params *CustomerSearchFieldsParams, opts ...ClientOption) (*CustomerSearchFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerSearchFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Customer.searchFields",
		Method:             "GET",
		PathPattern:        "/Customers/search/{keyword}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CustomerSearchFieldsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerSearchFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerSearchFieldsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
