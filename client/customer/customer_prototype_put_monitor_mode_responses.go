// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypePutMonitorModeReader is a Reader for the CustomerPrototypePutMonitorMode structure.
type CustomerPrototypePutMonitorModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypePutMonitorModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypePutMonitorModeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypePutMonitorModeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypePutMonitorModeOK creates a CustomerPrototypePutMonitorModeOK with default headers values
func NewCustomerPrototypePutMonitorModeOK() *CustomerPrototypePutMonitorModeOK {
	return &CustomerPrototypePutMonitorModeOK{}
}

/*
CustomerPrototypePutMonitorModeOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypePutMonitorModeOK struct {
	Payload *models.LocationMonitorMode
}

// IsSuccess returns true when this customer prototype put monitor mode o k response has a 2xx status code
func (o *CustomerPrototypePutMonitorModeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype put monitor mode o k response has a 3xx status code
func (o *CustomerPrototypePutMonitorModeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype put monitor mode o k response has a 4xx status code
func (o *CustomerPrototypePutMonitorModeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype put monitor mode o k response has a 5xx status code
func (o *CustomerPrototypePutMonitorModeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype put monitor mode o k response a status code equal to that given
func (o *CustomerPrototypePutMonitorModeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype put monitor mode o k response
func (o *CustomerPrototypePutMonitorModeOK) Code() int {
	return 200
}

func (o *CustomerPrototypePutMonitorModeOK) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/monitorMode][%d] customerPrototypePutMonitorModeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutMonitorModeOK) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/monitorMode][%d] customerPrototypePutMonitorModeOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypePutMonitorModeOK) GetPayload() *models.LocationMonitorMode {
	return o.Payload
}

func (o *CustomerPrototypePutMonitorModeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LocationMonitorMode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypePutMonitorModeDefault creates a CustomerPrototypePutMonitorModeDefault with default headers values
func NewCustomerPrototypePutMonitorModeDefault(code int) *CustomerPrototypePutMonitorModeDefault {
	return &CustomerPrototypePutMonitorModeDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypePutMonitorModeDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypePutMonitorModeDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype put monitor mode default response has a 2xx status code
func (o *CustomerPrototypePutMonitorModeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype put monitor mode default response has a 3xx status code
func (o *CustomerPrototypePutMonitorModeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype put monitor mode default response has a 4xx status code
func (o *CustomerPrototypePutMonitorModeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype put monitor mode default response has a 5xx status code
func (o *CustomerPrototypePutMonitorModeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype put monitor mode default response a status code equal to that given
func (o *CustomerPrototypePutMonitorModeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype put monitor mode default response
func (o *CustomerPrototypePutMonitorModeDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypePutMonitorModeDefault) Error() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/monitorMode][%d] Customer.prototype.putMonitorMode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutMonitorModeDefault) String() string {
	return fmt.Sprintf("[PUT /Customers/{id}/locations/{locationId}/monitorMode][%d] Customer.prototype.putMonitorMode default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypePutMonitorModeDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypePutMonitorModeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
