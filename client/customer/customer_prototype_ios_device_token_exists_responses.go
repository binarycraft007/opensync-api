// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypeIosDeviceTokenExistsReader is a Reader for the CustomerPrototypeIosDeviceTokenExists structure.
type CustomerPrototypeIosDeviceTokenExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypeIosDeviceTokenExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypeIosDeviceTokenExistsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypeIosDeviceTokenExistsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypeIosDeviceTokenExistsOK creates a CustomerPrototypeIosDeviceTokenExistsOK with default headers values
func NewCustomerPrototypeIosDeviceTokenExistsOK() *CustomerPrototypeIosDeviceTokenExistsOK {
	return &CustomerPrototypeIosDeviceTokenExistsOK{}
}

/*
CustomerPrototypeIosDeviceTokenExistsOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypeIosDeviceTokenExistsOK struct {
	Payload interface{}
}

// IsSuccess returns true when this customer prototype ios device token exists o k response has a 2xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype ios device token exists o k response has a 3xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype ios device token exists o k response has a 4xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype ios device token exists o k response has a 5xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype ios device token exists o k response a status code equal to that given
func (o *CustomerPrototypeIosDeviceTokenExistsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype ios device token exists o k response
func (o *CustomerPrototypeIosDeviceTokenExistsOK) Code() int {
	return 200
}

func (o *CustomerPrototypeIosDeviceTokenExistsOK) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/iosDeviceTokens/{deviceToken}/exists][%d] customerPrototypeIosDeviceTokenExistsOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeIosDeviceTokenExistsOK) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/iosDeviceTokens/{deviceToken}/exists][%d] customerPrototypeIosDeviceTokenExistsOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeIosDeviceTokenExistsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CustomerPrototypeIosDeviceTokenExistsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypeIosDeviceTokenExistsDefault creates a CustomerPrototypeIosDeviceTokenExistsDefault with default headers values
func NewCustomerPrototypeIosDeviceTokenExistsDefault(code int) *CustomerPrototypeIosDeviceTokenExistsDefault {
	return &CustomerPrototypeIosDeviceTokenExistsDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypeIosDeviceTokenExistsDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypeIosDeviceTokenExistsDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype ios device token exists default response has a 2xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype ios device token exists default response has a 3xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype ios device token exists default response has a 4xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype ios device token exists default response has a 5xx status code
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype ios device token exists default response a status code equal to that given
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype ios device token exists default response
func (o *CustomerPrototypeIosDeviceTokenExistsDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypeIosDeviceTokenExistsDefault) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/iosDeviceTokens/{deviceToken}/exists][%d] Customer.prototype.iosDeviceTokenExists default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeIosDeviceTokenExistsDefault) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/iosDeviceTokens/{deviceToken}/exists][%d] Customer.prototype.iosDeviceTokenExists default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeIosDeviceTokenExistsDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypeIosDeviceTokenExistsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
