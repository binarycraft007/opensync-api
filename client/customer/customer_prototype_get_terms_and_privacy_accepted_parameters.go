// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeGetTermsAndPrivacyAcceptedParams creates a new CustomerPrototypeGetTermsAndPrivacyAcceptedParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeGetTermsAndPrivacyAcceptedParams() *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	return &CustomerPrototypeGetTermsAndPrivacyAcceptedParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithTimeout creates a new CustomerPrototypeGetTermsAndPrivacyAcceptedParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithTimeout(timeout time.Duration) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	return &CustomerPrototypeGetTermsAndPrivacyAcceptedParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithContext creates a new CustomerPrototypeGetTermsAndPrivacyAcceptedParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithContext(ctx context.Context) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	return &CustomerPrototypeGetTermsAndPrivacyAcceptedParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithHTTPClient creates a new CustomerPrototypeGetTermsAndPrivacyAcceptedParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeGetTermsAndPrivacyAcceptedParamsWithHTTPClient(client *http.Client) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	return &CustomerPrototypeGetTermsAndPrivacyAcceptedParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeGetTermsAndPrivacyAcceptedParams contains all the parameters to send to the API endpoint

	for the customer prototype get terms and privacy accepted operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeGetTermsAndPrivacyAcceptedParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Refresh.
	Refresh *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype get terms and privacy accepted params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithDefaults() *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype get terms and privacy accepted params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithTimeout(timeout time.Duration) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithContext(ctx context.Context) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithHTTPClient(client *http.Client) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithID(id string) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetID(id string) {
	o.ID = id
}

// WithRefresh adds the refresh to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WithRefresh(refresh *bool) *CustomerPrototypeGetTermsAndPrivacyAcceptedParams {
	o.SetRefresh(refresh)
	return o
}

// SetRefresh adds the refresh to the customer prototype get terms and privacy accepted params
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) SetRefresh(refresh *bool) {
	o.Refresh = refresh
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeGetTermsAndPrivacyAcceptedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Refresh != nil {

		// query param refresh
		var qrRefresh bool

		if o.Refresh != nil {
			qrRefresh = *o.Refresh
		}
		qRefresh := swag.FormatBool(qrRefresh)
		if qRefresh != "" {

			if err := r.SetQueryParam("refresh", qRefresh); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
