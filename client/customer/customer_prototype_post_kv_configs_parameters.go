// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypePostKvConfigsParams creates a new CustomerPrototypePostKvConfigsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypePostKvConfigsParams() *CustomerPrototypePostKvConfigsParams {
	return &CustomerPrototypePostKvConfigsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypePostKvConfigsParamsWithTimeout creates a new CustomerPrototypePostKvConfigsParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypePostKvConfigsParamsWithTimeout(timeout time.Duration) *CustomerPrototypePostKvConfigsParams {
	return &CustomerPrototypePostKvConfigsParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypePostKvConfigsParamsWithContext creates a new CustomerPrototypePostKvConfigsParams object
// with the ability to set a context for a request.
func NewCustomerPrototypePostKvConfigsParamsWithContext(ctx context.Context) *CustomerPrototypePostKvConfigsParams {
	return &CustomerPrototypePostKvConfigsParams{
		Context: ctx,
	}
}

// NewCustomerPrototypePostKvConfigsParamsWithHTTPClient creates a new CustomerPrototypePostKvConfigsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypePostKvConfigsParamsWithHTTPClient(client *http.Client) *CustomerPrototypePostKvConfigsParams {
	return &CustomerPrototypePostKvConfigsParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypePostKvConfigsParams contains all the parameters to send to the API endpoint

	for the customer prototype post kv configs operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypePostKvConfigsParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// Key.
	Key string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// Module.
	Module string

	// NodeID.
	NodeID string

	// Persist.
	Persist *bool

	// Value.
	Value string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype post kv configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostKvConfigsParams) WithDefaults() *CustomerPrototypePostKvConfigsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype post kv configs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypePostKvConfigsParams) SetDefaults() {
	var (
		persistDefault = bool(false)
	)

	val := CustomerPrototypePostKvConfigsParams{
		Persist: &persistDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithTimeout(timeout time.Duration) *CustomerPrototypePostKvConfigsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithContext(ctx context.Context) *CustomerPrototypePostKvConfigsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithHTTPClient(client *http.Client) *CustomerPrototypePostKvConfigsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithID(id string) *CustomerPrototypePostKvConfigsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetID(id string) {
	o.ID = id
}

// WithKey adds the key to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithKey(key string) *CustomerPrototypePostKvConfigsParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetKey(key string) {
	o.Key = key
}

// WithLocationID adds the locationID to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithLocationID(locationID string) *CustomerPrototypePostKvConfigsParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithModule adds the module to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithModule(module string) *CustomerPrototypePostKvConfigsParams {
	o.SetModule(module)
	return o
}

// SetModule adds the module to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetModule(module string) {
	o.Module = module
}

// WithNodeID adds the nodeID to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithNodeID(nodeID string) *CustomerPrototypePostKvConfigsParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetNodeID(nodeID string) {
	o.NodeID = nodeID
}

// WithPersist adds the persist to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithPersist(persist *bool) *CustomerPrototypePostKvConfigsParams {
	o.SetPersist(persist)
	return o
}

// SetPersist adds the persist to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetPersist(persist *bool) {
	o.Persist = persist
}

// WithValue adds the value to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) WithValue(value string) *CustomerPrototypePostKvConfigsParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the customer prototype post kv configs params
func (o *CustomerPrototypePostKvConfigsParams) SetValue(value string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypePostKvConfigsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form param key
	frKey := o.Key
	fKey := frKey
	if fKey != "" {
		if err := r.SetFormParam("key", fKey); err != nil {
			return err
		}
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	// form param module
	frModule := o.Module
	fModule := frModule
	if fModule != "" {
		if err := r.SetFormParam("module", fModule); err != nil {
			return err
		}
	}

	// path param nodeId
	if err := r.SetPathParam("nodeId", o.NodeID); err != nil {
		return err
	}

	if o.Persist != nil {

		// form param persist
		var frPersist bool
		if o.Persist != nil {
			frPersist = *o.Persist
		}
		fPersist := swag.FormatBool(frPersist)
		if fPersist != "" {
			if err := r.SetFormParam("persist", fPersist); err != nil {
				return err
			}
		}
	}

	// form param value
	frValue := o.Value
	fValue := frValue
	if fValue != "" {
		if err := r.SetFormParam("value", fValue); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
