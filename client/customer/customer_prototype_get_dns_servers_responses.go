// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/opensync-api/models"
)

// CustomerPrototypeGetDNSServersReader is a Reader for the CustomerPrototypeGetDNSServers structure.
type CustomerPrototypeGetDNSServersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CustomerPrototypeGetDNSServersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCustomerPrototypeGetDNSServersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCustomerPrototypeGetDNSServersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCustomerPrototypeGetDNSServersOK creates a CustomerPrototypeGetDNSServersOK with default headers values
func NewCustomerPrototypeGetDNSServersOK() *CustomerPrototypeGetDNSServersOK {
	return &CustomerPrototypeGetDNSServersOK{}
}

/*
CustomerPrototypeGetDNSServersOK describes a response with status code 200, with default header values.

Request was successful
*/
type CustomerPrototypeGetDNSServersOK struct {
	Payload *models.DNSServers
}

// IsSuccess returns true when this customer prototype get Dns servers o k response has a 2xx status code
func (o *CustomerPrototypeGetDNSServersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this customer prototype get Dns servers o k response has a 3xx status code
func (o *CustomerPrototypeGetDNSServersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this customer prototype get Dns servers o k response has a 4xx status code
func (o *CustomerPrototypeGetDNSServersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this customer prototype get Dns servers o k response has a 5xx status code
func (o *CustomerPrototypeGetDNSServersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this customer prototype get Dns servers o k response a status code equal to that given
func (o *CustomerPrototypeGetDNSServersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the customer prototype get Dns servers o k response
func (o *CustomerPrototypeGetDNSServersOK) Code() int {
	return 200
}

func (o *CustomerPrototypeGetDNSServersOK) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers][%d] customerPrototypeGetDnsServersOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeGetDNSServersOK) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers][%d] customerPrototypeGetDnsServersOK  %+v", 200, o.Payload)
}

func (o *CustomerPrototypeGetDNSServersOK) GetPayload() *models.DNSServers {
	return o.Payload
}

func (o *CustomerPrototypeGetDNSServersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSServers)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCustomerPrototypeGetDNSServersDefault creates a CustomerPrototypeGetDNSServersDefault with default headers values
func NewCustomerPrototypeGetDNSServersDefault(code int) *CustomerPrototypeGetDNSServersDefault {
	return &CustomerPrototypeGetDNSServersDefault{
		_statusCode: code,
	}
}

/*
CustomerPrototypeGetDNSServersDefault describes a response with status code -1, with default header values.

unexpected error
*/
type CustomerPrototypeGetDNSServersDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this customer prototype get Dns servers default response has a 2xx status code
func (o *CustomerPrototypeGetDNSServersDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this customer prototype get Dns servers default response has a 3xx status code
func (o *CustomerPrototypeGetDNSServersDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this customer prototype get Dns servers default response has a 4xx status code
func (o *CustomerPrototypeGetDNSServersDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this customer prototype get Dns servers default response has a 5xx status code
func (o *CustomerPrototypeGetDNSServersDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this customer prototype get Dns servers default response a status code equal to that given
func (o *CustomerPrototypeGetDNSServersDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the customer prototype get Dns servers default response
func (o *CustomerPrototypeGetDNSServersDefault) Code() int {
	return o._statusCode
}

func (o *CustomerPrototypeGetDNSServersDefault) Error() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers][%d] Customer.prototype.getDnsServers default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeGetDNSServersDefault) String() string {
	return fmt.Sprintf("[GET /Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers][%d] Customer.prototype.getDnsServers default  %+v", o._statusCode, o.Payload)
}

func (o *CustomerPrototypeGetDNSServersDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *CustomerPrototypeGetDNSServersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
