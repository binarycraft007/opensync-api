// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCustomerPrototypeSetPrimarySecondaryNetworksParams creates a new CustomerPrototypeSetPrimarySecondaryNetworksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCustomerPrototypeSetPrimarySecondaryNetworksParams() *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	return &CustomerPrototypeSetPrimarySecondaryNetworksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithTimeout creates a new CustomerPrototypeSetPrimarySecondaryNetworksParams object
// with the ability to set a timeout on a request.
func NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithTimeout(timeout time.Duration) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	return &CustomerPrototypeSetPrimarySecondaryNetworksParams{
		timeout: timeout,
	}
}

// NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithContext creates a new CustomerPrototypeSetPrimarySecondaryNetworksParams object
// with the ability to set a context for a request.
func NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithContext(ctx context.Context) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	return &CustomerPrototypeSetPrimarySecondaryNetworksParams{
		Context: ctx,
	}
}

// NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithHTTPClient creates a new CustomerPrototypeSetPrimarySecondaryNetworksParams object
// with the ability to set a custom HTTPClient for a request.
func NewCustomerPrototypeSetPrimarySecondaryNetworksParamsWithHTTPClient(client *http.Client) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	return &CustomerPrototypeSetPrimarySecondaryNetworksParams{
		HTTPClient: client,
	}
}

/*
CustomerPrototypeSetPrimarySecondaryNetworksParams contains all the parameters to send to the API endpoint

	for the customer prototype set primary secondary networks operation.

	Typically these are written to a http.Request.
*/
type CustomerPrototypeSetPrimarySecondaryNetworksParams struct {

	/* ID.

	   Customer id

	   Format: JSON
	*/
	ID string

	// LocationID.
	//
	// Format: JSON
	LocationID string

	// Wpa2enabled.
	Wpa2enabled *bool

	// Wpa2ssid.
	//
	// Format: JSON
	Wpa2ssid *string

	// Wpa3enabled.
	Wpa3enabled *bool

	// Wpa3encryptionKey.
	Wpa3encryptionKey *string

	// Wpa3ssid.
	Wpa3ssid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the customer prototype set primary secondary networks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithDefaults() *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the customer prototype set primary secondary networks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithTimeout(timeout time.Duration) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithContext(ctx context.Context) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithHTTPClient(client *http.Client) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithID(id string) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetID(id string) {
	o.ID = id
}

// WithLocationID adds the locationID to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithLocationID(locationID string) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetLocationID(locationID string) {
	o.LocationID = locationID
}

// WithWpa2enabled adds the wpa2enabled to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithWpa2enabled(wpa2enabled *bool) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetWpa2enabled(wpa2enabled)
	return o
}

// SetWpa2enabled adds the wpa2enabled to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetWpa2enabled(wpa2enabled *bool) {
	o.Wpa2enabled = wpa2enabled
}

// WithWpa2ssid adds the wpa2ssid to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithWpa2ssid(wpa2ssid *string) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetWpa2ssid(wpa2ssid)
	return o
}

// SetWpa2ssid adds the wpa2ssid to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetWpa2ssid(wpa2ssid *string) {
	o.Wpa2ssid = wpa2ssid
}

// WithWpa3enabled adds the wpa3enabled to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithWpa3enabled(wpa3enabled *bool) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetWpa3enabled(wpa3enabled)
	return o
}

// SetWpa3enabled adds the wpa3enabled to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetWpa3enabled(wpa3enabled *bool) {
	o.Wpa3enabled = wpa3enabled
}

// WithWpa3encryptionKey adds the wpa3encryptionKey to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithWpa3encryptionKey(wpa3encryptionKey *string) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetWpa3encryptionKey(wpa3encryptionKey)
	return o
}

// SetWpa3encryptionKey adds the wpa3encryptionKey to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetWpa3encryptionKey(wpa3encryptionKey *string) {
	o.Wpa3encryptionKey = wpa3encryptionKey
}

// WithWpa3ssid adds the wpa3ssid to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WithWpa3ssid(wpa3ssid *string) *CustomerPrototypeSetPrimarySecondaryNetworksParams {
	o.SetWpa3ssid(wpa3ssid)
	return o
}

// SetWpa3ssid adds the wpa3ssid to the customer prototype set primary secondary networks params
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) SetWpa3ssid(wpa3ssid *string) {
	o.Wpa3ssid = wpa3ssid
}

// WriteToRequest writes these params to a swagger request
func (o *CustomerPrototypeSetPrimarySecondaryNetworksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param locationId
	if err := r.SetPathParam("locationId", o.LocationID); err != nil {
		return err
	}

	if o.Wpa2enabled != nil {

		// form param wpa2enabled
		var frWpa2enabled bool
		if o.Wpa2enabled != nil {
			frWpa2enabled = *o.Wpa2enabled
		}
		fWpa2enabled := swag.FormatBool(frWpa2enabled)
		if fWpa2enabled != "" {
			if err := r.SetFormParam("wpa2enabled", fWpa2enabled); err != nil {
				return err
			}
		}
	}

	if o.Wpa2ssid != nil {

		// form param wpa2ssid
		var frWpa2ssid string
		if o.Wpa2ssid != nil {
			frWpa2ssid = *o.Wpa2ssid
		}
		fWpa2ssid := frWpa2ssid
		if fWpa2ssid != "" {
			if err := r.SetFormParam("wpa2ssid", fWpa2ssid); err != nil {
				return err
			}
		}
	}

	if o.Wpa3enabled != nil {

		// form param wpa3enabled
		var frWpa3enabled bool
		if o.Wpa3enabled != nil {
			frWpa3enabled = *o.Wpa3enabled
		}
		fWpa3enabled := swag.FormatBool(frWpa3enabled)
		if fWpa3enabled != "" {
			if err := r.SetFormParam("wpa3enabled", fWpa3enabled); err != nil {
				return err
			}
		}
	}

	if o.Wpa3encryptionKey != nil {

		// form param wpa3encryptionKey
		var frWpa3encryptionKey string
		if o.Wpa3encryptionKey != nil {
			frWpa3encryptionKey = *o.Wpa3encryptionKey
		}
		fWpa3encryptionKey := frWpa3encryptionKey
		if fWpa3encryptionKey != "" {
			if err := r.SetFormParam("wpa3encryptionKey", fWpa3encryptionKey); err != nil {
				return err
			}
		}
	}

	if o.Wpa3ssid != nil {

		// form param wpa3ssid
		var frWpa3ssid string
		if o.Wpa3ssid != nil {
			frWpa3ssid = *o.Wpa3ssid
		}
		fWpa3ssid := frWpa3ssid
		if fWpa3ssid != "" {
			if err := r.SetFormParam("wpa3ssid", fWpa3ssid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
