// Code generated by go-swagger; DO NOT EDIT.

package command

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new command API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for command API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CommandDeleteCommand(params *CommandDeleteCommandParams, opts ...ClientOption) (*CommandDeleteCommandOK, error)

	CommandGetCommand(params *CommandGetCommandParams, opts ...ClientOption) (*CommandGetCommandOK, error)

	CommandGetHealth(params *CommandGetHealthParams, opts ...ClientOption) (*CommandGetHealthOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CommandDeleteCommand deletes account linking

	<div><strong>204</strong>: Success.</div>

<div><strong>400</strong>: Missing providerUserId body parameter</div>
<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Command not found.</div>
<div><strong>500</strong>: internal server error.</div>
*/
func (a *Client) CommandDeleteCommand(params *CommandDeleteCommandParams, opts ...ClientOption) (*CommandDeleteCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommandDeleteCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Command.deleteCommand",
		Method:             "DELETE",
		PathPattern:        "/command/{providerUserId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommandDeleteCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommandDeleteCommandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommandDeleteCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CommandGetCommand gets account linking

	<div><strong>200</strong>: Success.</div>

<div><strong>400</strong>: Missing providerUserId body parameter</div>
<div><strong>401</strong>: Authorization required.</div>
<div><strong>404</strong>: Command not found.</div>
<div><strong>500</strong>: internal server error.</div>
*/
func (a *Client) CommandGetCommand(params *CommandGetCommandParams, opts ...ClientOption) (*CommandGetCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommandGetCommandParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Command.getCommand",
		Method:             "GET",
		PathPattern:        "/command/{providerUserId}",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommandGetCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommandGetCommandOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommandGetCommandDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CommandGetHealth returns a 200 response when your server is healthy else send a 500 response

	<div><strong>200</strong>: Success, return health data.</div>

<div><strong>401</strong>: Authorization required.</div>
<div><strong>500</strong>: internal server error.</div>
*/
func (a *Client) CommandGetHealth(params *CommandGetHealthParams, opts ...ClientOption) (*CommandGetHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommandGetHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Command.getHealth",
		Method:             "GET",
		PathPattern:        "/command/health",
		ProducesMediaTypes: []string{"application/javascript", "application/json", "application/xml", "text/javascript", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommandGetHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommandGetHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommandGetHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
