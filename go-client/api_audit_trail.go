
/*
 * plume-customer
 *
 * Customer APIs for NOC, IOS, Android, QA scripts, and www.plume.com
 *
 * API version: 1.109.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type AuditTrailApiService service

/*
AuditTrailApiService Get Audit Trail for a customer and/or location
&lt;div&gt;&lt;strong&gt;200&lt;/strong&gt;: Ok.&lt;/div&gt; &lt;div&gt;&lt;strong&gt;401&lt;/strong&gt;: Authorization required.&lt;/div&gt; &lt;div&gt;&lt;strong&gt;404&lt;/strong&gt;: Location id, does not exist.&lt;/div&gt; &lt;div&gt;&lt;strong&gt;500&lt;/strong&gt;: Internal server error.&lt;/div&gt;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param customerId Customer Id
 * @param optional nil or *AuditTrailApiAuditTrailGetAuditTrailOpts - Optional Parameters:
     * @param "LocationId" (optional.String) -  Location Id
     * @param "PartnerIds" (optional.String) -  Partner Id

@return []AuditTrail
*/

type AuditTrailApiAuditTrailGetAuditTrailOpts struct { 
	LocationId optional.String
	PartnerIds optional.String
}

func (a *AuditTrailApiService) AuditTrailGetAuditTrail(ctx context.Context, customerId string, localVarOptionals *AuditTrailApiAuditTrailGetAuditTrailOpts) ([]AuditTrail, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []AuditTrail
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/AuditTrails/getAuditTrail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("customerId", parameterToString(customerId, ""))
	if localVarOptionals != nil && localVarOptionals.LocationId.IsSet() {
		localVarQueryParams.Add("locationId", parameterToString(localVarOptionals.LocationId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PartnerIds.IsSet() {
		localVarQueryParams.Add("partnerIds", parameterToString(localVarOptionals.PartnerIds.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v []AuditTrail
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

