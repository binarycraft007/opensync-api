---
swagger: "2.0"
info:
  description: "Customer APIs for NOC, IOS, Android, QA scripts, and www.plume.com"
  version: "1.109.0"
  title: "plume-customer"
basePath: "/api"
tags:
- name: "Group"
  description: "A tag applied to Customers for labeling and administering. These APIs\
    \ are only available for Admin users of the NOC."
- name: "Partner"
  description: "A tag applied to Customers for labeling and administering. These APIs\
    \ are only available for Admin users of the NOC."
- name: "Customer"
  description: "A Plume Customer is initialized with a default location."
- name: "Location"
  description: "Plume internal-only APIs."
- name: "Node"
  description: "Plume internal-only APIs."
- name: "Inventory"
- name: "IntegrationHealthCheck"
- name: "PartnerConfig"
  description: "Persists all dynamic partner based config managed by customer"
- name: "Command"
- name: "AuditTrail"
consumes:
- "application/json"
- "application/x-www-form-urlencoded"
- "application/xml"
- "text/xml"
produces:
- "application/json"
- "application/xml"
- "text/xml"
- "application/javascript"
- "text/javascript"
paths:
  /Groups/{id}/customers/rel/{fk}:
    put:
      tags:
      - "Group"
      summary: "Add a related item by id for customers."
      operationId: "Group.prototype.__link__customers"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for customers"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/CustomerGroup"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/CustomerGroup"
    delete:
      tags:
      - "Group"
      summary: "Remove the customers relation to an item by id."
      operationId: "Group.prototype.__unlink__customers"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for customers"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Groups/{id}/customers:
    get:
      tags:
      - "Group"
      summary: "Queries customers of Group."
      operationId: "Group.prototype.__get__customers"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
  /Groups/{id}:
    get:
      tags:
      - "Group"
      summary: "Find a model instance by {{id}} from the data source."
      operationId: "Group.findById"
      parameters:
      - name: "id"
        in: "path"
        description: "Model id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        description: "Filter defining fields and include - must be a JSON-encoded\
          \ string ({\"something\":\"value\"})"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Group"
    put:
      tags:
      - "Group"
      summary: "Patch attributes for a model instance and persist it into the data\
        \ source."
      operationId: "Group.prototype.patchAttributes__put_Groups_{id}"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        description: "An object of model property name/value pairs"
        required: false
        schema:
          $ref: "#/definitions/Group"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Group"
    delete:
      tags:
      - "Group"
      summary: "Delete a group."
      description: "<div><strong>200</strong>: Returns count of deleted groups, if\
        \ any were deleted\n<div><strong>423</strong>: Locked, group cannot be deleted\
        \ because it is used as a partnerId in Inventory"
      operationId: "Group.prototype.delete"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200"
    patch:
      tags:
      - "Group"
      summary: "Patch attributes for a model instance and persist it into the data\
        \ source."
      operationId: "Group.prototype.patchAttributes__patch_Groups_{id}"
      parameters:
      - name: "id"
        in: "path"
        description: "Group id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        description: "An object of model property name/value pairs"
        required: false
        schema:
          $ref: "#/definitions/Group"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Group"
  /Groups:
    get:
      tags:
      - "Group"
      summary: "Find all instances of the model matched by filter from the data source."
      operationId: "Group.find"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter defining fields, where, include, order, offset, and limit\
          \ - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"\
          }}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
    post:
      tags:
      - "Group"
      summary: "Create a group."
      description: "<div><strong>200</strong>: Success, group created.</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Group.customCreate"
      parameters:
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "description"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Description"
      - name: "id"
        in: "formData"
        description: "an ObjectID id for porting group ids"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "importGroupIdAsPartnerIdIntoInventory"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "ImportGroupIdAsPartnerIdIntoInventory"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Group"
  /Groups/count:
    get:
      tags:
      - "Group"
      summary: "Count instances of the model matched by where from the data source."
      operationId: "Group.count"
      parameters:
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Groups/customers/search/{keyword}:
    get:
      tags:
      - "Group"
      summary: "Queries Customers with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Group.findCustomers"
      parameters:
      - name: "keyword"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      - name: "field"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Field"
      - name: "exactMatch"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ExactMatch"
        x-optionalDataType: "Bool"
      - name: "startsWith"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "StartsWith"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Groups/customers/{keyword}:
    get:
      tags:
      - "Group"
      summary: "Queries Customers with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Group.getCustomers"
      parameters:
      - name: "keyword"
        in: "path"
        description: "could be name, email, or accountId, even partial"
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Groups/locations/{keyword}:
    get:
      tags:
      - "Group"
      summary: "Queries Locations with serviceId or locationId within the caller's\
        \ groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Group.getLocations"
      parameters:
      - name: "keyword"
        in: "path"
        description: "could be locationId, or serviceId."
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Groups/nodes/{id}:
    get:
      tags:
      - "Group"
      summary: "Queries Customers/locations/nodes with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>:\
        \ No right to access the node.</div>\n<div><strong>404</strong>: LocationId\
        \ not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Group.getNodesById"
      parameters:
      - name: "id"
        in: "path"
        description: "node Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "excludeUnclaimed"
        in: "query"
        description: "whether to filter out unclaimed nodes"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeUnclaimed"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Group"
      summary: "Queries Customers/locations/nodes with caller's groups, and update\
        \ it."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Group.patchNodesById"
      parameters:
      - name: "id"
        in: "path"
        description: "node Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "accountId"
        in: "formData"
        description: "accountId"
        required: false
        type: "string"
        x-exportParamName: "AccountId"
        x-optionalDataType: "String"
      - name: "unclaimable"
        in: "formData"
        description: "unclaimable"
        required: false
        type: "string"
        x-exportParamName: "Unclaimable"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Groups/{id}/customers/count:
    get:
      tags:
      - "Group"
      summary: "Queries Customers/locations/count with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Group.getCustomerCount"
      parameters:
      - name: "id"
        in: "path"
        description: "group Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Groups/{id}/customers/recent:
    get:
      tags:
      - "Group"
      summary: "Queries Customers/locations/count with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Group.getRecentCustomers"
      parameters:
      - name: "id"
        in: "path"
        description: "group Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/customers/search/{keyword}:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers with caller's partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Partner.findCustomers"
      parameters:
      - name: "keyword"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      - name: "field"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Field"
      - name: "exactMatch"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ExactMatch"
        x-optionalDataType: "Bool"
      - name: "startsWith"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "StartsWith"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        default: 10.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "skip"
        in: "query"
        required: false
        type: "number"
        default: 0.0
        format: "double"
        x-exportParamName: "Skip"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/{id}/customers/count:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers/locations/count with caller's groups."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Partner.getCustomerCount"
      parameters:
      - name: "id"
        in: "path"
        description: "partner Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/{id}/customers/recent:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers/locations/count with caller's partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Group id not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Partner.getRecentCustomers"
      parameters:
      - name: "id"
        in: "path"
        description: "group Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/locations/{keyword}:
    get:
      tags:
      - "Partner"
      summary: "Queries Locations with serviceId or locationId within the caller's\
        \ partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Partner.getLocations"
      parameters:
      - name: "keyword"
        in: "path"
        description: "could be locationId, or serviceId."
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/{partnerId}/nodes/{nodeId}:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers/locations/nodes with caller's partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>:\
        \ No right to access the node.</div>\n<div><strong>404</strong>: partnerId\
        \ or nodeId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Partner.getNodesByIdForIntegrationUser"
      parameters:
      - name: "partnerId"
        in: "path"
        description: "partner Id"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      - name: "nodeId"
        in: "path"
        description: "node Id"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "excludeUnclaimed"
        in: "query"
        description: "whether to filter out unclaimed nodes"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeUnclaimed"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/{partnerId}/customers/search/{keyword}:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers with caller's partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>:\
        \ Not allowed to access partner.</div>\n<div><strong>404</strong>: partnerId\
        \ or nodeId not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Partner.findCustomersForIntegrationUser"
      parameters:
      - name: "partnerId"
        in: "path"
        description: "partner Id"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      - name: "keyword"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      - name: "field"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Field"
      - name: "exactMatch"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ExactMatch"
        x-optionalDataType: "Bool"
      - name: "startsWith"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "StartsWith"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        default: 10.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "skip"
        in: "query"
        required: false
        type: "number"
        default: 0.0
        format: "double"
        x-exportParamName: "Skip"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partners/nodes/{id}:
    get:
      tags:
      - "Partner"
      summary: "Queries Customers/locations/nodes with caller's partnerId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>403</strong>:\
        \ No right to access the node.</div>\n<div><strong>404</strong>: LocationId\
        \ not found.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Partner.getNodesById"
      parameters:
      - name: "id"
        in: "path"
        description: "node Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "excludeUnclaimed"
        in: "query"
        description: "whether to filter out unclaimed nodes"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeUnclaimed"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Partner"
      summary: "Queries Customers/locations/nodes with caller's partnerId, and update\
        \ it."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Partner.patchNodesById"
      parameters:
      - name: "id"
        in: "path"
        description: "node Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "accountId"
        in: "formData"
        description: "accountId"
        required: false
        type: "string"
        x-exportParamName: "AccountId"
        x-optionalDataType: "String"
      - name: "unclaimable"
        in: "formData"
        description: "unclaimable"
        required: false
        type: "string"
        x-exportParamName: "Unclaimable"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/termsAndPrivacyAccepted:
    get:
      tags:
      - "Customer"
      summary: "Fetches hasOne relation termsAndPrivacyAccepted."
      operationId: "Customer.prototype.__get__termsAndPrivacyAccepted"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "refresh"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Refresh"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/TermsAndPrivacy"
    post:
      tags:
      - "Customer"
      summary: "Update a terms and privacy acceptance for customer."
      description: "<div><strong>200</strong>: Success, terms and privacy updated.</div>\n\
        <div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.updateTermsAndPrivacy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "termsDocumentId"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TermsDocumentId"
        x-optionalDataType: "Float64"
      - name: "privacyDocumentId"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PrivacyDocumentId"
        x-optionalDataType: "Float64"
      - name: "termsAcceptedAt"
        in: "formData"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "TermsAcceptedAt"
        x-optionalDataType: "Time"
      - name: "privacyAcceptedAt"
        in: "formData"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "PrivacyAcceptedAt"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/TermsAndPrivacy"
  /Customers/{id}/_migration:
    get:
      tags:
      - "Customer"
      summary: "Fetches hasOne relation _migration."
      operationId: "Customer.prototype.__get___migration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "refresh"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Refresh"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Migration"
    post:
      tags:
      - "Customer"
      summary: "Creates a new instance in _migration of this model."
      operationId: "Customer.prototype.__create___migration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/Migration"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Migration"
    put:
      tags:
      - "Customer"
      summary: "Update _migration of this model."
      operationId: "Customer.prototype.__update___migration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/Migration"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Migration"
    delete:
      tags:
      - "Customer"
      summary: "Deletes _migration of this model."
      operationId: "Customer.prototype.__destroy___migration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/accessTokens:
    post:
      tags:
      - "Customer"
      summary: "Creates a new instance in accessTokens of this model."
      operationId: "Customer.prototype.__create__accessTokens"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/AccessToken"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/roles:
    get:
      tags:
      - "Customer"
      summary: "Queries roles of Customer."
      operationId: "Customer.prototype.__get__roles"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
  /Customers/{id}:
    get:
      tags:
      - "Customer"
      summary: "Find a model instance by {{id}} from the data source."
      operationId: "Customer.findById"
      parameters:
      - name: "id"
        in: "path"
        description: "Model id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        description: "Filter defining fields and include - must be a JSON-encoded\
          \ string ({\"something\":\"value\"})"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
    put:
      tags:
      - "Customer"
      summary: "Patch attributes for a model instance and persist it into the data\
        \ source."
      operationId: "Customer.prototype.patchAttributes__put_Customers_{id}"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        description: "An object of model property name/value pairs"
        required: false
        schema:
          $ref: "#/definitions/Customer"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
    delete:
      tags:
      - "Customer"
      summary: "Delete a model instance by {{id}} from the data source."
      description: "<div><strong>200</strong>: Success, customer details returned.</div>\n\
        <div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.deleteCustomer"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch attributes for a model instance and persist it into the data\
        \ source."
      operationId: "Customer.prototype.patchAttributes__patch_Customers_{id}"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        description: "An object of model property name/value pairs"
        required: false
        schema:
          $ref: "#/definitions/Customer"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Customers:
    get:
      tags:
      - "Customer"
      summary: "Find all instances of the model matched by filter from the data source."
      operationId: "Customer.find"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter defining fields, where, include, order, offset, and limit\
          \ - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"\
          }}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
    post:
      tags:
      - "Customer"
      summary: "Create a Plume customer."
      description: "<div><strong>200</strong>: Success, customer created.</div>\n\
        <div><strong>422</strong>: Input validation failed.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.customCreate"
      parameters:
      - name: "email"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "password"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "partnerId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "PartnerId"
        x-optionalDataType: "String"
      - name: "person"
        in: "formData"
        description: "Person object should contain field 'imageId'  and object profile\
          \ with field type (String)"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Person"
        x-optionalDataType: "String"
      - name: "location"
        in: "formData"
        description: "Location object should contain field 'name' (String)"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Location"
        x-optionalDataType: "String"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      - name: "passwordLessToken"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "PasswordLessToken"
        x-optionalDataType: "Bool"
      - name: "source"
        in: "formData"
        required: false
        type: "string"
        default: "customCreate"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Customers/count:
    get:
      tags:
      - "Customer"
      summary: "Count instances of the model matched by where from the data source."
      operationId: "Customer.count"
      parameters:
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Customers/login:
    post:
      tags:
      - "Customer"
      summary: "Login a user with username/email and password."
      operationId: "Customer.login"
      parameters:
      - in: "body"
        name: "credentials"
        required: true
        schema:
          type: "object"
        x-exportParamName: "Credentials"
      - name: "include"
        in: "query"
        description: "Related objects to include in the response. See the description\
          \ of return value for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
            description: "The response body contains properties of the AccessToken\
              \ created on login.\nDepending on the value of `include` parameter,\
              \ the body may contain additional properties:\n\n  - `user` - `U+007BUserU+007D`\
              \ - Data of the currently logged in user. (`include=user`)\n\n"
  /Customers/logout:
    post:
      tags:
      - "Customer"
      summary: "Logout a user with access token."
      operationId: "Customer.logout__post_Customers_logout"
      parameters: []
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/confirm:
    get:
      tags:
      - "Customer"
      summary: "Confirm a user registration with identity verification token."
      operationId: "Customer.confirm"
      parameters:
      - name: "uid"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Uid"
      - name: "token"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Token"
      - name: "redirect"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Redirect"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/reset:
    post:
      tags:
      - "Customer"
      summary: "Reset password for a user with email."
      operationId: "Customer.resetPassword"
      parameters:
      - in: "body"
        name: "options"
        required: true
        schema:
          type: "object"
        x-exportParamName: "Options"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/backhaul:
    get:
      tags:
      - "Customer"
      operationId: "Customer.prototype.getBackhaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Toggle secure backhaul for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putBackhaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      - name: "dynamicBeacon"
        in: "formData"
        description: "A valid state for the dynamic beaconing setting. Either auto,\
          \ enable, or disable"
        required: false
        type: "string"
        x-exportParamName: "DynamicBeacon"
        x-optionalDataType: "String"
      - name: "wds"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "Wds"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        description: "auto || psk2 || sae-mixed"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationBackhaul"
  /Customers/{id}/locations/{locationId}/ipv6:
    get:
      tags:
      - "Customer"
      operationId: "Customer.prototype.getIPv6"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      operationId: "Customer.prototype.patchIPv6"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "addressingConfig"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "AddressingConfig"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/search/{keyword}:
    get:
      tags:
      - "Customer"
      summary: "Search the keyword on a particular field such as \"accountId\", \"\
        name\", \"email\"."
      description: "<div><strong>200</strong>: Success, return the search result.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.searchFields"
      parameters:
      - name: "keyword"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Keyword"
      - name: "field"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Field"
      - name: "exactMatch"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ExactMatch"
        x-optionalDataType: "Bool"
      - name: "startsWith"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "StartsWith"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all kvConfigs on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getKvConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KvConfig"
    post:
      tags:
      - "Customer"
      summary: "Retrieve all kvConfigs on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postKvConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "module"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Module"
      - name: "key"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Key"
      - name: "value"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Value"
      - name: "persist"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Persist"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/KvConfig"
    patch:
      tags:
      - "Customer"
      summary: "Retrieve all kvConfigs on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchKvConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "kvConfigs"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "KvConfigs"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KvConfig"
  /Customers/{id}/locations/{locationId}/vapStates:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all Vap State on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getVapStates"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/backhauls:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all Vap State on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getVapsAndStaStatesFromBackhaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvStates:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all kvStates on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getNodeKvStates"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/schedules:
    get:
      tags:
      - "Customer"
      summary: "Get custom shared schedules for a given Location ID."
      description: "<div><strong>200</strong>: Success, custom schedules list returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.listCustomSharedSchedules"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LocationCustomSchedule"
    post:
      tags:
      - "Customer"
      summary: "Create \"custom shared\" schedules that shared by all persons and\
        \ devices in a location."
      description: "<div><strong>200</strong>: Success, custom shared schedules applied.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id does not exist or is not known to Plume</div>\n\
        <div><strong>422</strong>: schedules value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postCustomSharedSchedule"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "type"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - name: "schedules"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Schedules"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationCustomSchedule"
  /Customers/{id}/locations/{locationId}/schedules/{templateId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete \"custom shared\" schedule shared by all persons and devices\
        \ in a location."
      description: "<div><strong>204</strong>: Success, the custom shared schedule\
        \ deleted.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: Location id does not exist\
        \ or is not known to Plume</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.deleteCustomSharedSchedule"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "templateId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TemplateId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Patch a custom shared schedule freeze template for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ templateId must be defined.</div>\n<div><strong>422</strong>: schedules\
        \ value is invalid.</div>\n<div><strong>425</strong>: templateId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchCustomSharedSchedule"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "templateId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TemplateId"
      - name: "schedules"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Schedules"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationCustomSchedule"
  /Customers/{id}/linkedAccounts:
    post:
      tags:
      - "Customer"
      summary: "link the outside account, such as Samsung user."
      description: "<div><strong>200</strong>: Success, the outside account inserted\
        \ into the customer info/object.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.linkAccount"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "provider"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Provider"
      - name: "userId"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "userName"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "UserName"
        x-optionalDataType: "String"
      - name: "userDisplayName"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "UserDisplayName"
        x-optionalDataType: "String"
      - name: "sessionToken"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "SessionToken"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/linkedAccounts/{provider}/{userId}:
    delete:
      tags:
      - "Customer"
      summary: "link the outside account, such as Samsung user."
      description: "<div><strong>200</strong>: Success, the outside account inserted\
        \ into the customer info/object.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteLinkedAccount"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "provider"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Provider"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "UserId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/qoe/liveMode:
    patch:
      tags:
      - "Customer"
      summary: "Update the location qoe liveMode by api call and Kafka message"
      description: "<div><strong>200</strong>: Success, the new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>400</strong>: enalbe and expiresAt, reportingInterval validation\
        \ error.</div>\n<div><strong>422</strong>: expiresAt and reportingInterval\
        \ validation error.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchLocationQoeLiveMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Enable"
      - name: "expiresAt"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "String"
      - name: "reportingInterval"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "ReportingInterval"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/kvConfigs/{module}/{key}:
    delete:
      tags:
      - "Customer"
      summary: "Delete kvConfigs with selected module and key on a particular Node\
        \ for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.deleteKvConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "module"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Module"
      - name: "key"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Key"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/KvConfig"
  /Customers/{id}/passwordLessToken:
    get:
      tags:
      - "Customer"
      summary: "Verifies the email token and activates tokens related to it. Returns\
        \ verified text with redirect to \"signup complete deep link\""
      description: "<div><strong>204</strong>: Success, return new appToken and send\
        \ out the email with emailToken.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>422</strong>: nodeId\
        \ must be defined.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.verifyEmailPasswordlessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/accessToken:
    post:
      tags:
      - "Customer"
      summary: "Generates usable passwordless accessToken for the account with the\
        \ email address."
      description: "<div><strong>204</strong>: Success, return new appToken.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.createNewPasswordlessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/passwordLessToken:
    post:
      tags:
      - "Customer"
      summary: "Generate two accessTokens with special scopes for the account with\
        \ the email address and send a verification email."
      description: "<div><strong>200</strong>: Success, return new appToken, refreshToken\
        \ and send out the email with emailToken.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Email must be defined and valid.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.emailPasswordlessToken"
      parameters:
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/createIpLimitedAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Create access token with limited privileges as defined for IP authenticated\
        \ customers"
      description: "<div><strong>200</strong>: Success, response object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.createIpLimitedAccessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "ttl"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Ttl"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/createReadDnsAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Create access token to read data related to DNS security policies"
      description: "<div><strong>200</strong>: Success, accessToken returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.createReadDnsAccessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/createPatchServiceLevelAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Create access token to patch customer serviceLevel used by ZUORA"
      description: "<div><strong>200</strong>: Success, accessToken returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.createPatchServiceLevelAccessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "ttl"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Ttl"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/createGetMarketingExportDataAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Create access token to get marketing data by CRM for campaigns"
      description: "<div><strong>200</strong>: Success, accessToken returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.createGetMarketingExportDataAccessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "ttl"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Ttl"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/locations/{locationId}/firmware:
    get:
      tags:
      - "Customer"
      summary: "Firmware Upgrade Status"
      description: "<div><strong>200</strong>: Success, response object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getFirmwareUpgradeStatus"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
    put:
      tags:
      - "Customer"
      summary: "Request Firmware Upgrade for a Location ID"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putFirmwareUpgradeRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/frontline/storage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the frontline storage for this location"
      description: "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getFrontlineStorage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/FrontlineStorage"
    put:
      tags:
      - "Customer"
      summary: "Create or Update the frontline storage for a Location ID"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putFrontlineStorage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "data"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/homeSecurity:
    get:
      tags:
      - "Customer"
      summary: "Fetch the home security configuration for this location"
      description: "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getHomeSecurity"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
    patch:
      tags:
      - "Customer"
      summary: "Enable/disable live motion streaming and/or motion events for this\
        \ location"
      description: "<div><strong>200</strong>: Success, updated HomeSecurity object\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: customer id or location id\
        \ does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchHomeSecurity"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "source"
        in: "formData"
        description: "Source of patch request; must be one of \"user\" or \"geofence\""
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "liveMotionEnabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "LiveMotionEnabled"
        x-optionalDataType: "Bool"
      - name: "motionEventsEnabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "MotionEventsEnabled"
        x-optionalDataType: "Bool"
      - name: "homeAwayActive"
        in: "formData"
        description: "Enable/disable motion events based on location Homeaway state"
        required: false
        type: "boolean"
        x-exportParamName: "HomeAwayActive"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
  /Customers/{id}/locations/{locationId}/homeSecurity/homeAway:
    patch:
      tags:
      - "Customer"
      summary: "Enable/disable homeAway wifiMotionEvents activation for this location"
      description: "<div><strong>200</strong>: Success, updated HomeSecurity object\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: customer id or location id\
        \ does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchHomeAwayActive"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "homeAwayActive"
        in: "formData"
        description: "Enable/disable motion events based on location Homeaway state"
        required: true
        type: "boolean"
        x-exportParamName: "HomeAwayActive"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
  /Customers/{id}/locations/{locationId}/homeSecurity/sensitivity:
    patch:
      tags:
      - "Customer"
      summary: "Configure motion event configuration for this location"
      description: "<div><strong>200</strong>: Success, updated HomeSecurity object\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: customer id or location id\
        \ does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchHomeSecuritySensitivity"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "cooldown"
        in: "formData"
        description: "sets required rest period for motion detected events to end,\
          \ in seconds"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Cooldown"
        x-optionalDataType: "Float64"
      - name: "petMode"
        in: "formData"
        description: "adjusts sensitivity of motion detected events for pets; must\
          \ be one of \"none\", \"under10\", \"10to30\", \"over30\" and can only be\
          \ set if sensitivity = high"
        required: false
        type: "string"
        x-exportParamName: "PetMode"
        x-optionalDataType: "String"
      - name: "sensitivity"
        in: "formData"
        description: "adjusts sensitivity of motion detected events; must be one of\
          \ \"low\", \"medium\", \"high\""
        required: false
        type: "string"
        x-exportParamName: "Sensitivity"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
  /Customers/{id}/locations/{locationId}/homeSecurity/motionHistory:
    get:
      tags:
      - "Customer"
      summary: "Fetch the motion density history for this location"
      description: "<div><strong>200</strong>: Success, motion density array returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getMotionHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "bucket"
        in: "query"
        description: "number of seconds\nin density calculation window; returned data\
          \ points represent % of non-zero intensity values in the window"
        required: false
        type: "number"
        default: 3600.0
        format: "double"
        x-exportParamName: "Bucket"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/homeSecurity/motionHistory/state:
    get:
      tags:
      - "Customer"
      summary: "Fetch the motion state history for this location"
      description: "<div><strong>200</strong>: Success, motion state array returned\
        \ (Each element of the array is in the form [\"val\", \"unix_ts\"], where\
        \ \"val\" is one of: \n<div>0 - Not armed, not tripped</div>\n<div>1 - Not\
        \ armed, tripped</div>\n<div>2 - Armed, not tripped</div>\n<div>3 - Armed,\
        \ tripped</div></div>\n<div><strong>401</strong>: Authorization required or\
        \ customer id not found</div>\n<div><strong>404</strong>: customer id or location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getMotionStateHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "bucket"
        in: "query"
        description: "number of seconds\nin density calculation window; returned data\
          \ points represent % of non-zero intensity values in the window"
        required: false
        type: "number"
        default: 3600.0
        format: "double"
        x-exportParamName: "Bucket"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/homeSecurity/events/history:
    get:
      tags:
      - "Customer"
      summary: "Fetch the event history for this location"
      description: "<div><strong>200</strong>: Success, event array returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getEventHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "category"
        in: "query"
        description: "Filter events by category (Motion or Plume [config changes]).\
          \ Multiple categories can be passed as a comma-separated string. Default\
          \ is both."
        required: false
        type: "string"
        x-exportParamName: "Category"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Maximum number of events to return. Defaults to 10"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "sort"
        in: "query"
        description: "whether the returned events will be post-sorted by timestamp"
        required: false
        type: "boolean"
        x-exportParamName: "Sort"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/homeSecurity/devices/sounding:
    get:
      tags:
      - "Customer"
      summary: "Fetch the sounding states for eligible devices in this location"
      description: "<div><strong>200</strong>: Success, device sounding states returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDeviceSoundingState"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "query"
        description: "Optional mac address for single device lookup (fetches all devices\
          \ by default)"
        required: false
        type: "string"
        x-exportParamName: "Mac"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch the sounding states for the given devices"
      description: "<div><strong>200</strong>: Success, device sounding states returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchDeviceSoundingState"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "soundingStates"
        required: true
        schema:
          type: "object"
        x-exportParamName: "SoundingStates"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/wifiMotion:
    get:
      tags:
      - "Customer"
      summary: "Get WifiMotion config for this location"
      description: "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getWifiMotion"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiMotion"
    patch:
      tags:
      - "Customer"
      summary: "Enable/disable WifiMotion feature for this location"
      description: "<div><strong>200</strong>: Success, updated object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchWifiMotion"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "auto"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Auto"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiMotion"
  /Customers/{id}/locations/{locationId}/serviceLevel:
    get:
      tags:
      - "Customer"
      summary: "Get the service level for this location"
      description: "<div><strong>200</strong>: Success, return service Level object.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getServiceLevel"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Set the service level for this location"
      description: "<div><strong>200</strong>: Success, updated service Level object\
        \ returned.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>422</strong>: Invalid 'status' value.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchServiceLevel"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "status"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Status"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/marketingExport:
    get:
      tags:
      - "Customer"
      summary: "Get detailed information of a location for CRM campaigns."
      description: "<div><strong>200</strong>: Success, location data in response.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.marketingExport"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "wifiMotionCapable"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "WifiMotionCapable"
        x-optionalDataType: "Bool"
      - name: "wifiMotionEnable"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "WifiMotionEnable"
        x-optionalDataType: "Bool"
      - name: "onlineProtectionEnabled"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "OnlineProtectionEnabled"
        x-optionalDataType: "Bool"
      - name: "personsWithoutAssignedDevices"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "PersonsWithoutAssignedDevices"
        x-optionalDataType: "Bool"
      - name: "peopleProfileEverCreated"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "PeopleProfileEverCreated"
        x-optionalDataType: "Bool"
      - name: "blockedSecurityEventsCountThirtyDay"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "BlockedSecurityEventsCountThirtyDay"
        x-optionalDataType: "Bool"
      - name: "devicesOnlineThirtyDays"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "DevicesOnlineThirtyDays"
        x-optionalDataType: "Bool"
      - name: "mostActiveDevicesThirtyDays"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "MostActiveDevicesThirtyDays"
        x-optionalDataType: "Bool"
      - name: "appTimeCapable"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "AppTimeCapable"
        x-optionalDataType: "Bool"
      - name: "subscription"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Subscription"
        x-optionalDataType: "Bool"
      - name: "lastThirtyDaysSpeedTestAverages"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "LastThirtyDaysSpeedTestAverages"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/homeAway/events:
    get:
      tags:
      - "Customer"
      summary: "Fetch the all the Homeaway events history for this location"
      description: "<div><strong>200</strong>: Success, event array returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getHomeAwayLocationEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "from"
        in: "query"
        description: "UTC unix epoch ms, defaults to 1 week ago"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix epoch ms, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "limit"
        in: "query"
        description: "Maximum number of events to return. Defaults to 100"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/wifiNetworks:
    get:
      tags:
      - "Customer"
      summary: "WiFi Networks"
      description: "<div><strong>200</strong>: Success, response object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getWifiNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/createOrUpdateUser:
    put:
      tags:
      - "Customer"
      summary: "Create or update a Plume NOC user."
      description: "<div><strong>200</strong>: Success, user created.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>422</strong>: Input validation\
        \ failed.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Customer.createOrUpdateUser"
      parameters:
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "roles"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Roles"
      - name: "groups"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Groups"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Customers/registerWithGroups:
    post:
      tags:
      - "Customer"
      summary: "Register/create an account with an accountId plus email/password/groups."
      description: "<div><strong>200</strong>: Success, customer and location IDs\
        \ returned.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.registerWithGroups"
      parameters:
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "password"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "accountId"
        in: "formData"
        description: "must be unique, a UUID is recommended, min length is 6 characters."
        required: true
        type: "string"
        x-exportParamName: "AccountId"
      - name: "name"
        in: "formData"
        description: "Full name of customer, defaults to value of accountId"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "groupIds"
        in: "formData"
        description: "at least one groupId"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GroupIds"
        x-optionalDataType: "String"
      - name: "partnerId"
        in: "formData"
        description: "PartnerId of customer for accountId"
        required: false
        type: "string"
        x-exportParamName: "PartnerId"
        x-optionalDataType: "String"
      - name: "acceptLanguage"
        in: "formData"
        description: "acceptable language"
        required: false
        type: "string"
        x-exportParamName: "AcceptLanguage"
        x-optionalDataType: "String"
      - name: "profile"
        in: "formData"
        description: "location profile"
        required: false
        type: "string"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/RegisterResponse"
  /Customers/register:
    post:
      tags:
      - "Customer"
      summary: "Register/create an anonymous account with an accountId instead of\
        \ with email/password."
      description: "<div><strong>200</strong>: Success, customer and location IDs\
        \ returned.</div>\n<div><strong>400</strong>: Required fields are missing.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>422</strong>: Only integration\
        \ role can set profile to property.</div>\n<div><strong>500</strong>: Internal\
        \ server error.</div>"
      operationId: "Customer.register"
      parameters:
      - name: "accountId"
        in: "formData"
        description: "must be unique, a UUID is recommended, min length is 6 characters."
        required: true
        type: "string"
        x-exportParamName: "AccountId"
      - name: "name"
        in: "formData"
        description: "Full name of customer, defaults to value of accountId"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "partnerId"
        in: "formData"
        description: "PartnerId of customer for accountId"
        required: false
        type: "string"
        x-exportParamName: "PartnerId"
        x-optionalDataType: "String"
      - name: "email"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "acceptLanguage"
        in: "formData"
        description: "acceptable language"
        required: false
        type: "string"
        x-exportParamName: "AcceptLanguage"
        x-optionalDataType: "String"
      - name: "profile"
        in: "formData"
        description: "location profile"
        required: false
        type: "string"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      - name: "onboardingCheckpoint"
        in: "formData"
        description: "is the last passed onboarding step by the customer: 'PodsAdded'\
          \ or 'OnboardingComplete';"
        required: false
        type: "string"
        x-exportParamName: "OnboardingCheckpoint"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/RegisterResponse"
  /Customers/{id}/locations:
    get:
      tags:
      - "Customer"
      summary: "Queries locations of Customer."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.getLocations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "include"
        in: "query"
        description: "CSV value of objects to add to the response: summary (is the\
          \ only option for now)"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
    post:
      tags:
      - "Customer"
      summary: "Create a new location."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required field(the location name) missing.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.createLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "profile"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}:
    get:
      tags:
      - "Customer"
      summary: "Get a Location's combined State and Config by LocationId."
      description: "<div><strong>200</strong>: Success, full object returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.findLocationById"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "include"
        in: "query"
        description: "CSV value of objects to add to the response: summary (is the\
          \ only option for now)"
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
    head:
      tags:
      - "Customer"
      summary: "Verify that a Customer Id has a Location Id."
      description: "<div><strong>200</strong>: Success, no data returned.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ LocationId not found.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.hasLocationById"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
    put:
      tags:
      - "Customer"
      summary: "Update the location name."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.updateLocationName"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Archive a location."
      description: "<div><strong>204</strong>: Success, location archived.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>409</strong>:\
        \ Location already archived.</div>\n<div><strong>500</strong>: Internal server\
        \ error</div>"
      operationId: "Customer.prototype.deleteLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Update a Location's serviceId."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ You must specify at least one parameter to patch.</div>\n<div><strong>422</strong>:\
        \ Only integration role can set profile to property.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "serviceId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ServiceId"
        x-optionalDataType: "String"
      - name: "profile"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
  /Customers/{id}/locations/{locationId}/subscription:
    get:
      tags:
      - "Customer"
      summary: "Get Subscription details for this location"
      description: "<div><strong>200</strong>: Success, subscription details returned</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getSubscription"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Put Subscription details for this location"
      description: "<div><strong>200</strong>: Success, service level returned</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putSubscription"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "ratePlanId"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "RatePlanId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch Subscription details for this location"
      description: "<div><strong>202</strong>: Success, status patched</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: Status is invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchSubscription"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "status"
        in: "formData"
        description: "enum of values include: Active, Suspended"
        required: true
        type: "string"
        x-exportParamName: "Status"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/appFacade/home:
    get:
      tags:
      - "Customer"
      summary: "Retrieve timezone, capabilities, summary, ... for this location."
      description: "<div><strong>200</strong>: Success, an array of properties returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.appFacadeHome"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "filters"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "daysOffline"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "DaysOffline"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AppFacadeHomeResponse"
  /Customers/{id}/locations/{locationId}/persons:
    get:
      tags:
      - "Customer"
      summary: "Get all Persons for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getPersons"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Person"
    post:
      tags:
      - "Customer"
      summary: "Create  a Person for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ Nickname must be defined and mac addresses must be valid and email needs\
        \ to be provided when permission is provided.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postPersons"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nickname"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Nickname"
      - name: "imageId"
        in: "formData"
        description: "unique identifier for referencing a Person's hosted profile\
          \ image, defaults are PROFILE_MAN and PROFILE_WOMAN"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "assignedDevices"
        in: "formData"
        description: "mac addresses of devices assigned to this Person"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AssignedDevices"
        x-optionalDataType: "String"
      - name: "profile"
        in: "formData"
        description: "Profile object contains 'type' field - valid values: 'employee'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      - name: "email"
        in: "formData"
        description: "email"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "permission"
        in: "formData"
        description: "Permission object for creating a manager for the location"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Permission"
        x-optionalDataType: "String"
      - name: "serviceLinking"
        in: "formData"
        description: "serviceLinking object that links this Person object to a 3rd\
          \ party's Person"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ServiceLinking"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
  /Customers/{id}/locations/{locationId}/persons/{personId}:
    get:
      tags:
      - "Customer"
      summary: "Get a Person by ID for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getPersonById"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
    delete:
      tags:
      - "Customer"
      summary: "Delete a Person for a location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Person id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deletePerson"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "blockUnassignedDevices"
        in: "formData"
        description: "block any devices previously assigned to Person (false by default)"
        required: false
        type: "boolean"
        x-exportParamName: "BlockUnassignedDevices"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Update a Person for a location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Person id does not exist and is not known to Plume</div>\n\
        <div><strong>409</strong>: primaryDevice is not included in the list of assignedDevices[]</div>\n\
        <div><strong>422</strong>: Mac addresses must be valid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchPerson"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "nickname"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Nickname"
        x-optionalDataType: "String"
      - name: "imageId"
        in: "formData"
        description: "unique identifier for referencing a Person's hosted profile\
          \ image"
        required: false
        type: "string"
        x-exportParamName: "ImageId"
        x-optionalDataType: "String"
      - name: "primaryDevice"
        in: "formData"
        description: "mac addresses of Person's primary device"
        required: false
        type: "string"
        x-exportParamName: "PrimaryDevice"
        x-optionalDataType: "String"
      - name: "assignedDevices"
        in: "formData"
        description: "mac addresses assigned to this Person"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AssignedDevices"
        x-optionalDataType: "String"
      - name: "homeAwayNotification"
        in: "formData"
        description: "track person homeAway state"
        required: false
        type: "boolean"
        x-exportParamName: "HomeAwayNotification"
        x-optionalDataType: "Bool"
      - name: "permission"
        in: "formData"
        description: "permission object for creating or deleting the manager"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Permission"
        x-optionalDataType: "String"
      - name: "email"
        in: "formData"
        description: "email for sending the manager invite"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "serviceLinking"
        in: "formData"
        description: "serviceLinking object that links this Person object to a 3rd\
          \ party's Person"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ServiceLinking"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
  /Customers/{id}/locations/{locationId}/persons/{personId}/devices/{mac}:
    delete:
      tags:
      - "Customer"
      summary: "Unassign a device from Person for a location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, Person id, or mac does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteDeviceFromPerson"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy:
    get:
      tags:
      - "Customer"
      summary: "Returns the security policy Device for a Location ID."
      description: "<div><strong>200</strong>: Success, device returned.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist. Or, device not found in this\
        \ network 's history.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDeviceSecurity"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DeviceResponse"
    patch:
      tags:
      - "Customer"
      summary: "Update a Device's Security Policy for a location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Person id does not exist and is not known to\
        \ Plume</div>\n<div><strong>409</strong>: Device is assigned to a person so\
        \ its security policy must be configured on the Person</div>\n<div><strong>422</strong>:\
        \ Mac addresses must be valid.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.patchDeviceSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "secureAndProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SecureAndProtect"
        x-optionalDataType: "Bool"
      - name: "iotProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "IotProtect"
        x-optionalDataType: "Bool"
      - name: "iotProtectReason"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "IotProtectReason"
        x-optionalDataType: "String"
      - name: "content"
        in: "formData"
        description: "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive\
          \ || workAppropriate'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
  /Customers/{id}/locations/{locationId}/securityPolicy:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
    patch:
      tags:
      - "Customer"
      summary: "Update a Location's Security Policy by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchLocationSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "secureAndProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SecureAndProtect"
        x-optionalDataType: "Bool"
      - name: "iotProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "IotProtect"
        x-optionalDataType: "Bool"
      - name: "content"
        in: "formData"
        description: "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive\
          \ || workAppropriate'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      - name: "appliesToAllDevices"
        in: "formData"
        description: "hash map of security policy IDs that should be applied to all\
          \ devices"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AppliesToAllDevices"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/qos/appPrioritization:
    get:
      tags:
      - "Customer"
      summary: "Get status for app prioritization."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppPrioritizationLocationConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Update app prioritization config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchAppPrioritizationLocationConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enabled"
        in: "formData"
        description: "true if app prioritization is enabled"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      - name: "mode"
        in: "formData"
        description: "App Prioritization mode - any of auto | enable | disable"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      - name: "isFirstTimeUserExperience"
        in: "formData"
        description: "true if it is first time user experience"
        required: false
        type: "boolean"
        x-exportParamName: "IsFirstTimeUserExperience"
        x-optionalDataType: "Bool"
      - name: "template"
        in: "formData"
        description: "Template for app prioritization"
        required: false
        type: "string"
        x-exportParamName: "Template"
        x-optionalDataType: "String"
      - name: "customSettingEnabled"
        in: "formData"
        description: "true if custom setting is enabled"
        required: false
        type: "boolean"
        x-exportParamName: "CustomSettingEnabled"
        x-optionalDataType: "Bool"
      - name: "customSetting"
        in: "formData"
        description: "Settings for app prioritization"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "CustomSetting"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/qos/appPrioritization/customSetting:
    delete:
      tags:
      - "Customer"
      summary: "Set custom setting to default for app prioritization."
      operationId: "Customer.prototype.deleteAppPrioritizationLocationConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/qos/appPrioritization/monitoring:
    post:
      tags:
      - "Customer"
      summary: "Get monitoring metrics for app prioritization."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppPrioritizationMonitoring"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "granularity"
        in: "formData"
        description: "any of the values - total/15 minutes/1 hour/1 day"
        required: false
        type: "string"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "macs"
        in: "formData"
        description: "array of macs[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      - name: "trafficClasses"
        in: "formData"
        description: "array of trafficClasses[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TrafficClasses"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "formData"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "endTime"
        in: "formData"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
      - name: "sortOrder"
        in: "formData"
        description: "TxBytes\"|| \"RxBytes"
        required: false
        type: "string"
        x-exportParamName: "SortOrder"
        x-optionalDataType: "String"
      - name: "limit"
        in: "formData"
        description: "Maximum number of devices to return."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/appqoe/traffic_class_stats:
    get:
      tags:
      - "Customer"
      summary: "Get App QoE metrics for traffic classes."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppQoeTrafficClassMetrics__get_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "granularity"
        in: "query"
        description: "any of the values - total/1 minute/15 minutes/1 hour/1 day"
        required: true
        type: "string"
        x-exportParamName: "Granularity"
      - name: "macs"
        in: "query"
        description: "array of macs[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "endTime"
        in: "query"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
      - name: "trafficClasses"
        in: "query"
        description: "array of trafficClasses"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TrafficClasses"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Maximum number of devices to return."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Get App QoE metrics for traffic classes."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppQoeTrafficClassMetrics__post_Customers_{id}_locations_{locationId}_appqoe_traffic_class_stats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "granularity"
        in: "formData"
        description: "any of the values - total/1 minute/15 minutes/1 hour/1 day"
        required: true
        type: "string"
        x-exportParamName: "Granularity"
      - name: "macs"
        in: "formData"
        description: "array of macs"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "formData"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "endTime"
        in: "formData"
        description: "format yyyy-mm-ddThh:MM:ss.nnnZ, 24 hours time specified in\
          \ UTC"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
      - name: "trafficClasses"
        in: "formData"
        description: "array of trafficClasses"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TrafficClasses"
        x-optionalDataType: "String"
      - name: "limit"
        in: "formData"
        description: "Maximum number of devices to return."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/appqoe/AppQoeStatsByTrafficClass:
    post:
      tags:
      - "Customer"
      summary: "Get App QoE metrics by traffic classes / devices / apps."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppQoeStatsByTrafficClass"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "formData"
        description: "Any of \"last24Hours\",\"last7Days\",\"last30Days\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "includeApps"
        in: "formData"
        description: "Default false, to include app stats in the response"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeApps"
        x-optionalDataType: "Bool"
      - name: "trafficClassNames"
        in: "formData"
        description: "array of traffic classes - default list - av_streaming, gaming,\
          \ video_conferencing"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TrafficClassNames"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/qos/appPrioritization/templateConfig:
    get:
      tags:
      - "Customer"
      summary: "Get AppPrioritization template configs"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAppPrioritizationTemplateConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/hourlyBlockedCounts:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Hourly Blocked Counts for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationSecurityPolicyHourlyCounts"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Counts"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/hourlyBlockedCounts:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Hourly Blocked Counts for a Device for a Location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceSecurityPolicyHourlyCounts"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Counts"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/hourlyBlockedCounts:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Hourly Blocked Counts for a Person for a Location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getPersonSecurityPolicyHourlyCounts"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        description: "person"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Counts"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/hourlyBlockedCounts:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Hourly Blocked Counts for group Of Unassigned\
        \ Devices for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyHourlyCounts"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Counts"
  /Customers/{id}/locations/{locationId}/securityPolicy/events:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Events for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationSecurityPolicyEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "includes"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "query"
        required: false
        type: "string"
        default: "ihp"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
    delete:
      tags:
      - "Customer"
      summary: "Delete a Location's Security Events history for a location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteLocationEventsHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "categories"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Categories"
      - name: "reason"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Reason"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/securityPolicy/guard/events:
    post:
      tags:
      - "Customer"
      summary: "Get the Guard Event Domain Groups for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationGuardEventsTldOrIp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "macs"
        in: "formData"
        description: "array of macs[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      - name: "persons"
        in: "formData"
        description: "array of personIds[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Persons"
        x-optionalDataType: "String"
      - name: "tldOrIp"
        in: "formData"
        description: "top level domain or IP address"
        required: false
        type: "string"
        x-exportParamName: "TldOrIp"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "formData"
        description: "filter by protectionType: ihp | ohp. Returns all types by default."
        required: false
        type: "string"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      - name: "eventTypes"
        in: "formData"
        description: "filter by event type, any combo of: 'adBlocking','teenagers','kids','adultAndSensitive','secureAndProtect','ipThreatOutbound','ipThreatInbound',\
          \ 'iotProtect'. Returns all types by default."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "EventTypes"
        x-optionalDataType: "String"
      - name: "timePeriod"
        in: "formData"
        description: "Any of \"last24Hours\", \"last7Days\", \"last30Days\""
        required: false
        type: "string"
        default: "last30Days"
        x-exportParamName: "TimePeriod"
        x-optionalDataType: "String"
      - name: "groupOfUnassignedDevices"
        in: "formData"
        description: "to include the group of unassigned devices"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "GroupOfUnassignedDevices"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
  /Customers/{id}/locations/{locationId}/securityPolicy/guard/personEventsSummary:
    get:
      tags:
      - "Customer"
      summary: "Get the Guard Event Stats for all persons in a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationGuardPersonEventsSummary"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"last24Hours\",\"last7Days\",\"last30Days\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/personEventStats"
  /Customers/{id}/locations/{locationId}/securityPolicy/guard/eventStats:
    post:
      tags:
      - "Customer"
      summary: "Get the Guard Event Stats for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationGuardEventStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "macs"
        in: "formData"
        description: "array of macs[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      - name: "persons"
        in: "formData"
        description: "array of personIds[]"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Persons"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "formData"
        description: "filter by protectionType: ihp | ohp. Returns all types by default."
        required: false
        type: "string"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      - name: "eventTypes"
        in: "formData"
        description: "filter by event type, any combo of: 'adBlocking','teenagers','kids','adultAndSensitive','secureAndProtect','ipThreatOutbound','ipThreatInbound',\
          \ 'iotProtect'. Returns all types by default."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "EventTypes"
        x-optionalDataType: "String"
      - name: "timePeriod"
        in: "formData"
        description: "Any of \"last24Hours\",\"last7Days\",\"last30Days\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "groupOfUnassignedDevices"
        in: "formData"
        description: "to include the group of unassigned devices"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "GroupOfUnassignedDevices"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/events:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Events for Device for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceSecurityPolicyEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "includes"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "query"
        required: false
        type: "string"
        default: "ihp"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/events:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Events for Person for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getPersonSecurityPolicyEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        description: "person"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "includes"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "query"
        required: false
        type: "string"
        default: "ihp"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/events:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy Events for groupOfUnassignedDevices for a Location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicyEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "includes"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "protectionType"
        in: "query"
        required: false
        type: "string"
        default: "ihp"
        x-exportParamName: "ProtectionType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityEventsResponse"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy:
    get:
      tags:
      - "Customer"
      summary: "Get a Security Policy for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getGroupOfUnassignedDevicesSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Person"
    patch:
      tags:
      - "Customer"
      summary: "Update a Location's Default Device Group Security Policy by location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchGroupOfUnassignedDevicesSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "secureAndProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SecureAndProtect"
        x-optionalDataType: "Bool"
      - name: "iotProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "IotProtect"
        x-optionalDataType: "Bool"
      - name: "content"
        in: "formData"
        description: "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive\
          \ || workAppropriate'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist:
    post:
      tags:
      - "Customer"
      summary: "Update a Location's Security Policy for a location ID to include a\
        \ whitelisted DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postLocationSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "eventType"
        in: "formData"
        description: "EventType field from events response - can be 'kids', 'teenagers',\
          \ 'secureAndProtect', etc"
        required: false
        type: "string"
        x-exportParamName: "EventType"
        x-optionalDataType: "String"
      - name: "source"
        in: "formData"
        description: "Source field from events response - can be 'brightcloud', 'webpulse',\
          \ 'gatekeeper', 'gatekeeper-ohp'"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests:
    get:
      tags:
      - "Customer"
      summary: "Get a list of pending approval requests for this location."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, CustomerId or requst id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getWhitelistApprovalRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Post a request for a whitelist exception to be added to your person\
        \ profile."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, CustomerId or requst id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postWhitelistApprovalRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "value"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Value"
      - name: "type"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/approvalRequests/{requestId}:
    put:
      tags:
      - "Customer"
      summary: "Approve a persons whitelist request and add it to the security policy."
      description: "<div><strong>204</strong>: No content.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, CustomerId or requst id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.approveWhitelistRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "requestId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      - name: "persons"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Persons"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    delete:
      tags:
      - "Customer"
      summary: "Reject an approval request for a website whitelist"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, CustomerId or requst id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.rejectWhitelistRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "requestId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/whitelist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Locations's Security Policy for a location ID to remove a\
        \ whitelisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist:
    post:
      tags:
      - "Customer"
      summary: "Update a Location's Security Policy for a location ID to include a\
        \ blacklisted DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postLocationSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/websites/blacklist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Location's Security Policy for a location ID to remove a\
        \ blacklisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromLocationSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist:
    post:
      tags:
      - "Customer"
      summary: "Update a Location's Default Device Group Security Policy for a location\
        \ ID to include a whitelisted DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/whitelist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Location's Default Device Group Security Policy for a location\
        \ ID to remove a whitelisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist:
    post:
      tags:
      - "Customer"
      summary: "Update a Location's Default Device Group Security Policy for a location\
        \ ID to include a blacklisted DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/securityPolicy/websites/blacklist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Location's Default Device Group Security Policy for a location\
        \ ID to remove a blacklisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or DNS does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromGroupOfUnassignedDevicesSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist:
    post:
      tags:
      - "Customer"
      summary: "Approve a previously blacklisted anomalous dns for a Device on a location."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postDeviceSecurityPolicyAnomalyWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "fqdn"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Fqdn"
      - name: "reason"
        in: "formData"
        required: false
        type: "string"
        default: "trust"
        x-exportParamName: "Reason"
        x-optionalDataType: "String"
      - name: "ttl"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Ttl"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/websites/whitelist/{fqdn}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Location's Anomaly Security Policy for a location ID to remove\
        \ a whitelisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteDeviceSecurityPolicyAnomalyWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "fqdn"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Fqdn"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/anomaly/experience:
    post:
      tags:
      - "Customer"
      summary: "Initiate an Anomaly Experience (demo) for a Device on a location."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postDeviceSecurityPolicyAnomalyExperience"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "fqdn"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Fqdn"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "Customer"
      summary: "Delete an Anomaly Experience (demo) for a Device on a location."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteDeviceSecurityPolicyAnomalyExperience"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceSetup:
    post:
      tags:
      - "Customer"
      summary: "Setup a Mobile Device for Security Out of Home Protection (returns\
        \ a Deeplink for use with Mobolize)."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postLocationSecurityPolicyOHPDeviceSetup"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "lanIpv4"
        in: "formData"
        description: "Mobile device lanIpv4 address, if any"
        required: false
        type: "string"
        x-exportParamName: "LanIpv4"
        x-optionalDataType: "String"
      - name: "lanIpv6"
        in: "formData"
        description: "Mobile device lanIpv6 address, if any"
        required: false
        type: "string"
        x-exportParamName: "LanIpv6"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/ohp/deviceUuid:
    put:
      tags:
      - "Customer"
      summary: "Update the Device UUID Mapping for Out of Home Protection."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putLocationSecurityPolicyOHPDeviceUuidMapping"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "lanIpv4"
        in: "formData"
        description: "Mobile device lanIpv4 address, if any"
        required: false
        type: "string"
        x-exportParamName: "LanIpv4"
        x-optionalDataType: "String"
      - name: "lanIpv6"
        in: "formData"
        description: "Mobile device lanIpv6 address, if any"
        required: false
        type: "string"
        x-exportParamName: "LanIpv6"
        x-optionalDataType: "String"
      - name: "uuid"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/ohp:
    patch:
      tags:
      - "Customer"
      summary: "Update the Device UUID Mapping for Out of Home Protection."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Device does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchDeviceOHPConfiguration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "OHPNotificationsFlags"
        in: "formData"
        description: "OHP feature flags"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "OHPNotificationsFlags"
        x-optionalDataType: "String"
      - name: "disableMobilizeSdk"
        in: "formData"
        description: "enable or disable OHP SDK on the device"
        required: false
        type: "boolean"
        x-exportParamName: "DisableMobilizeSdk"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/ohp/protectionState:
    put:
      tags:
      - "Customer"
      summary: "Update the Device Protection State for Out of Home Protection."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putLocationSecurityPolicyOHPProtectionState"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "uuid"
        in: "formData"
        description: "Mobile device uuid (as was assigned by Mobolize)"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - name: "protectionState"
        in: "formData"
        description: "ProtectionState info as obtained directly from the Mobolize\
          \ SDK, null if deleting ProtectionState"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ProtectionState"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow:
    post:
      tags:
      - "Customer"
      summary: "Post a Remote Connection Allow IpAddress/ttl for the given device\
        \ and Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: Location\
        \ id or Device mac does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ Fields have an invalid type or value.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postRemoteConnectionsAllow"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "type"
        in: "formData"
        description: "either ipv4 or ipv6"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - name: "value"
        in: "formData"
        description: "ipaddress"
        required: true
        type: "string"
        x-exportParamName: "Value"
      - name: "expiresAt"
        in: "formData"
        description: "UTC timestamp in ISO 8601 format"
        required: true
        type: "string"
        x-exportParamName: "ExpiresAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allow/{ipaddr}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a Remote Connection Allow IpAddress/ttl for the given device\
        \ and Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Device mac does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteRemoteConnectionsAllow"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "ipaddr"
        in: "path"
        description: "ipaddress"
        required: true
        type: "string"
        x-exportParamName: "Ipaddr"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/remoteConnections/allowAll:
    post:
      tags:
      - "Customer"
      summary: "Post a Remote Connection Allow All/ttl for the given device and Location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: Location\
        \ id or Device mac does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ Fields have an invalid type or value.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postRemoteConnectionsAllowAll"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "expiresAt"
        in: "formData"
        description: "UTC timestamp in ISO 8601 format"
        required: true
        type: "string"
        x-exportParamName: "ExpiresAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "Customer"
      summary: "Delete a Remote Connection Allow All for the given device and Location\
        \ ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Device mac does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteRemoteConnectionsAllowAll"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/remoteConnections:
    get:
      tags:
      - "Customer"
      summary: "Get the Unauthorized Remote Connections config for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getRemoteConnectionsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch a Remote Connections Config for the given Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchRemoteConnectionsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: "Any of \"auto\", \"enabled\", \"disabled\", \"highRiskOnly\""
        required: true
        type: "string"
        x-exportParamName: "Mode"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy:
    patch:
      tags:
      - "Customer"
      summary: "Update a Person's Security Policy for a location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Person id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchPersonSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "secureAndProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SecureAndProtect"
        x-optionalDataType: "Bool"
      - name: "iotProtect"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "IotProtect"
        x-optionalDataType: "Bool"
      - name: "content"
        in: "formData"
        description: "Valid values: 'kids || teenagers || adBlocking || adultAndSensitive\
          \ || workAppropriate'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/profile:
    delete:
      tags:
      - "Customer"
      summary: "Delete a Person's Profile for a location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Person id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deletePersonProfile"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Update a Person's Profile for a location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Person id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchPersonProfile"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "type"
        in: "formData"
        description: "Valid values: 'employee'"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist:
    post:
      tags:
      - "Customer"
      summary: "Update a Person's Security Policy for a location ID to include a whitelisted\
        \ DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Person id does not exist and is not known to\
        \ Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postPersonSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "eventType"
        in: "formData"
        description: "EventType field from events response - can be 'kids', 'teenagers',\
          \ 'secureAndProtect', etc"
        required: false
        type: "string"
        x-exportParamName: "EventType"
        x-optionalDataType: "String"
      - name: "source"
        in: "formData"
        description: "Source field from events response - can be 'brightcloud', 'webpulse',\
          \ 'gatekeeper', 'gatekeeper-ohp'"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/whitelist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Person's Security Policy for a location ID to remove a whitelisted\
        \ DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Person id, or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist:
    post:
      tags:
      - "Customer"
      summary: "Update a Person's Security Policy for a location ID to include a blacklisted\
        \ DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Person id does not exist and is not known to\
        \ Plume</div>\n<div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postPersonSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/securityPolicy/websites/blacklist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Person's Security Policy for a location ID to remove a blacklisted\
        \ DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Person id, or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromPersonSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist:
    post:
      tags:
      - "Customer"
      summary: "Update a Device's Security Policy for a location ID to include a whitelisted\
        \ DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postDeviceSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "eventType"
        in: "formData"
        description: "EventType field from event response - can be 'kids', 'teenagers',\
          \ 'secureAndProtect, etc'"
        required: false
        type: "string"
        x-exportParamName: "EventType"
        x-optionalDataType: "String"
      - name: "source"
        in: "formData"
        description: "Source field from events response - can be 'brightcloud', 'webpulse',\
          \ 'gatekeeper', 'gatekeeper-ohp'"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/whitelist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Device's Security Policy for a location ID to remove a whitelisted\
        \ DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device, or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesWhitelist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist:
    post:
      tags:
      - "Customer"
      summary: "Update a Device's Security Policy for a location ID to include a blacklisted\
        \ DNS entry."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postDeviceSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "dns"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Dns"
        x-optionalDataType: "String"
      - name: "type"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "direction"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "geoLocation"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "GeoLocation"
        x-optionalDataType: "String"
      - name: "endTimestamp"
        in: "formData"
        description: "the end time stamp,  UTC unix epoch timestamp in ms"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "Float64"
      - name: "akamaiCategoryId"
        in: "formData"
        description: "the akamai category id, number"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AkamaiCategoryId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/securityPolicy/websites/blacklist/{dns}:
    delete:
      tags:
      - "Customer"
      summary: "Update a Device's Security Policy for a location ID to remove a blacklisted\
        \ DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device, or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteFromDeviceSecurityPolicyWebsitesBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "dns"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Dns"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/configAudit/events:
    get:
      tags:
      - "Customer"
      summary: "Get a Config Audit Trail Events for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getLocationConfigAuditEvents"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "includes"
        in: "query"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Includes"
      - name: "startTime"
        in: "query"
        required: true
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "direction"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/ConfigAuditEventsResponse"
  /Customers/{id}/locations/{locationId}/appFacade/wifiDashboard:
    get:
      tags:
      - "Customer"
      summary: "WiFi Dashboard"
      description: "<div><strong>200</strong>: Success, response object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getWifiDashboard"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiDashboardResponse"
  /Customers/{id}/devices/{mac}:
    put:
      tags:
      - "Customer"
      summary: "Nickname a Customer's device for all locations."
      description: "<div><strong>200</strong>: Success, device name has been updated<br/>but\
        \ not validated as a device that <br/>has ever connected.</div>\n<div><strong>400</strong>:\
        \ nickname value must be defined.</div>\n<div><strong>404</strong>: customer\
        \ id and/or mac does not exist.</div>\n<div><strong>422</strong>: nickname\
        \ value must be less than 33 characters.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putDeviceNickname"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "nickname"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Nickname"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Customers/{id}/locations/{locationId}/devices/{mac}/forcedSteer:
    put:
      tags:
      - "Customer"
      summary: "Force a device to use the 2.4Ghz band with auto expire."
      description: "<div><strong>204</strong>: Success, forced steer enabled.</div>\n\
        <div><strong>404</strong>: Location ID or Device mac not found or the device\
        \ has not been online in the last 31 days</div>\n<div><strong>422</strong>:\
        \ expiresAt is outside of the expected range 5 to 60 minutes in the future</div>\n\
        <div><strong>422</strong>: expiresAt is an invalid UTC date</div>\n<div><strong>422</strong>:\
        \ expiresAt cannot be in the past</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.setForcedSteer"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "locationId"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "MAC address of the target device. Must have been online in the\
          \ last 31 days."
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "expiresAt"
        in: "formData"
        description: "time of expiration in RFC 3339 format (e.g. 2021-11-24T09:13:33+00:00),\
          \ must be between 5 and 60 minutes in the future."
        required: false
        type: "string"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "Customer"
      summary: "Disable 2.4Ghz band enforcement early."
      description: "<div><strong>204</strong>: Success, forced steer ended early.</div>\n\
        <div><strong>404</strong>: Location ID or Device mac not found or the device\
        \ has not been online in the last 31 days</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.deleteForcedSteer"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "locationId"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "MAC address of the target device. Must have been online in the\
          \ last 31 days."
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/customType:
    patch:
      tags:
      - "Customer"
      summary: "Update a Customer's device type configuration (user feedback)."
      description: "<div><strong>200</strong>: Success, device type has been updated<br/>but\
        \ not validated as a device that <br/>has ever connected.</div>\n<div><strong>400</strong>:\
        \ nickname value must be defined.</div>\n<div><strong>404</strong>: customer\
        \ id and/or mac does not exist.</div>\n<div><strong>422</strong>: nickname\
        \ value must be less than 33 characters.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchCustomDeviceType"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "category"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Category"
        x-optionalDataType: "String"
      - name: "brand"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Brand"
        x-optionalDataType: "String"
      - name: "model"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Model"
        x-optionalDataType: "String"
      - name: "osName"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "OsName"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/CustomDeviceType"
  /Customers/{id}/locations/{locationId}/wifiNetwork:
    get:
      tags:
      - "Customer"
      summary: "Get the current WiFi SSID and PSK for a Location ID."
      description: "<div><strong>200</strong>: Success, current Wifi Network returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or WifiNetwork does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getWifiNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_2"
    post:
      tags:
      - "Customer"
      summary: "Update a WiFi SSID and/or PSK for a Location ID."
      description: "<div><strong>200</strong>: Success, in your future 100 mbps for\
        \ all devices I see. -Yoda.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>409</strong>:\
        \ A WifiNetwork already exists for this location.</div>\n<div><strong>422</strong>:\
        \ encryptionKey or ssid must be defined, or key length < 8.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postWifiNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "encryptionKey"
        in: "formData"
        description: "Needs to be a minimum of 8 characters"
        required: false
        type: "string"
        x-exportParamName: "EncryptionKey"
        x-optionalDataType: "String"
      - name: "ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Ssid"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        description: "psk-mixed (WPA+WPA2) || sae-mixed (WPA2+WPA3) || psk2 (WPA2\
          \ only) || sae (WPA3 only)"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_2"
    put:
      tags:
      - "Customer"
      summary: "Update a WiFi SSID and/or PSK for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id, or wifi network does not exist.</div>\n\
        <div><strong>422</strong>: encryptionKey or ssid must be defined.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putWifiNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "encryptionKey"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "EncryptionKey"
        x-optionalDataType: "String"
      - name: "ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Ssid"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_2"
    patch:
      tags:
      - "Customer"
      summary: "Update the SSID of the WifiNetwork"
      description: "<div><strong>200</strong>: Success, access zone returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchWifiNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Ssid"
        x-optionalDataType: "String"
      - name: "uapsd"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Uapsd"
        x-optionalDataType: "Bool"
      - name: "groupRekey"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "GroupRekey"
        x-optionalDataType: "String"
      - name: "fastTransition"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "FastTransition"
        x-optionalDataType: "String"
      - name: "minWifiMode24"
        in: "formData"
        description: "auto || 11b || 11g || 11n"
        required: false
        type: "string"
        x-exportParamName: "MinWifiMode24"
        x-optionalDataType: "String"
      - name: "privateMode"
        in: "formData"
        description: "Stop collecting user info like DNS-Queries, UserAgent etc"
        required: false
        type: "boolean"
        x-exportParamName: "PrivateMode"
        x-optionalDataType: "Bool"
      - name: "enabled"
        in: "formData"
        description: "enabled:true for active WiFi radios, enabled:false to turn `off`\
          \ all WiFi radios"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiNetwork"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys:
    post:
      tags:
      - "Customer"
      summary: "Create a new WiFi Password"
      description: "<div><strong>200</strong>: Success, all passwords returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Password validation failed</div>\n<div><strong>500</strong>: Internal server\
        \ error</div>"
      operationId: "Customer.prototype.postWifiKey"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "accessZone"
        in: "path"
        description: "home | guests | internetAccessOnly"
        required: true
        type: "string"
        x-exportParamName: "AccessZone"
      - name: "encryptionKey"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "EncryptionKey"
      - name: "enable"
        in: "formData"
        description: "devices can connect using this encryptionKey"
        required: true
        type: "boolean"
        x-exportParamName: "Enable"
      - name: "format"
        in: "formData"
        description: "encryptionKey | phoneNumber"
        required: true
        type: "string"
        x-exportParamName: "Format"
      - name: "expiresAt"
        in: "formData"
        description: "UTC in ISO 8601 String format"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "Time"
      - name: "content"
        in: "formData"
        description: "Valid values: 'adultAndSensitive'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiNetworkKey"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZone}/keys/{keyId}:
    put:
      tags:
      - "Customer"
      summary: "Update a WiFi Password"
      description: "<div><strong>200</strong>: Success, all passwords returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>:\
        \ Cannot disable a read-only key</div>\n<div><strong>422</strong>: Password\
        \ validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putWifiKey"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "accessZone"
        in: "path"
        description: "home | guests | internetAccessOnly"
        required: true
        type: "string"
        x-exportParamName: "AccessZone"
      - name: "keyId"
        in: "path"
        description: "Unique password id: 0-9"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "KeyId"
      - name: "encryptionKey"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "EncryptionKey"
      - name: "enable"
        in: "formData"
        description: "devices can connect using this encryptionKey"
        required: true
        type: "boolean"
        x-exportParamName: "Enable"
      - name: "format"
        in: "formData"
        description: "encryptionKey | phoneNumber"
        required: true
        type: "string"
        x-exportParamName: "Format"
      - name: "expiresAt"
        in: "formData"
        description: "UTC in ISO 8601 String format"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "Time"
      - name: "content"
        in: "formData"
        description: "Valid values: 'adultAndSensitive'"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiNetworkKey"
    delete:
      tags:
      - "Customer"
      summary: "Delete a WiFi Password"
      description: "<div><strong>200</strong>: Success, all passwords returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>:\
        \ Cannot delete a read-only key</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteWifiKey"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "accessZone"
        in: "path"
        description: "home | guests | internetAccessOnly"
        required: true
        type: "string"
        x-exportParamName: "AccessZone"
      - name: "keyId"
        in: "path"
        description: "Unique password id: 0-9"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "KeyId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiNetworkKey"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests:
    put:
      tags:
      - "Customer"
      summary: "DEPRECATED: Update home devices visible to guests."
      description: "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n\
        <div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>:\
        \ Device mac validation failed.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putDevicesVisibleToGuests"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "devicesVisibleToGuests"
        in: "formData"
        description: "array of macs[]"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "DevicesVisibleToGuests"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "string"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/home/devicesVisibleToGuests/{mac}:
    post:
      tags:
      - "Customer"
      summary: "DEPRECATED: Update home devices visible to guests."
      description: "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n\
        <div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>:\
        \ Device mac validation failed.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.addDeviceVisibleToGuests"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac to be added"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "string"
    delete:
      tags:
      - "Customer"
      summary: "DEPRECATED: Update home devices visible to guests."
      description: "<div><strong>200</strong>: Success, devicesVisibleToGuests returned.</div>\n\
        <div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist.</div>\n<div><strong>422</strong>:\
        \ Device mac validation failed.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.removeDeviceVisibleToGuests"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac to be removed"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "string"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones:
    post:
      tags:
      - "Customer"
      summary: "Create a new WiFi Access Zone"
      description: "<div><strong>200</strong>: Success, all access zones returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postWifiAccessZone"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "description"
        in: "formData"
        description: "name of access zone"
        required: true
        type: "string"
        x-exportParamName: "Description"
      - name: "type"
        in: "formData"
        description: "for now, must be 'guests'"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - name: "accessibleDevices"
        in: "formData"
        description: "macs of home devices visible to this guest access zone"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AccessibleDevices"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiAccessZone"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{accessZoneId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a WiFi Access Zone"
      description: "<div><strong>200</strong>: Success, remaining access zones returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>405</strong>:\
        \ Cannot delete a read-only access zone</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.deleteWifiAccessZone"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "accessZoneId"
        in: "path"
        description: "access zone id"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "AccessZoneId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiAccessZone"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/keys/{keyId}/invitations:
    post:
      tags:
      - "Customer"
      summary: "Update home devices visible to guests."
      description: "<div><strong>200</strong>: Success, Invitation returned.</div>\n\
        <div><strong>400</strong>: Required fields missing.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork accessZone zoneId/keyId does not\
        \ exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getWifiInvitationById"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "zoneId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "ZoneId"
      - name: "keyId"
        in: "path"
        description: "keys id be added"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "KeyId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Invitation"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}/accessibleDevices/{mac}:
    post:
      tags:
      - "Customer"
      summary: "Add a device mac to a WiFi Access Zone"
      description: "<div><strong>200</strong>: Success, all access zones returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postDeviceToAccessZone"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "zoneId"
        in: "path"
        description: "id of access zone"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "ZoneId"
      - name: "mac"
        in: "path"
        description: "the device mac to be added to the access zone"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device mac from a WiFi Access Zone"
      description: "<div><strong>200</strong>: Success, all access zones returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteDeviceFromAccessZone"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "zoneId"
        in: "path"
        description: "id of access zone"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "ZoneId"
      - name: "mac"
        in: "path"
        description: "the device mac to be added to the access zone"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/wifiNetwork/accessZones/{zoneId}:
    patch:
      tags:
      - "Customer"
      summary: "Update an access zone"
      description: "<div><strong>200</strong>: Success, wifiNetwork returned</div>\n\
        <div><strong>400</strong>: Required fields missing</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Customer id, location id, or WifiNetwork does not exist</div>\n<div><strong>422</strong>:\
        \ Validation failed</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchAccessZone"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "zoneId"
        in: "path"
        description: "id of access zone"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "ZoneId"
      - name: "description"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "accessibleDevices"
        in: "formData"
        description: "array of home macs[] visible to this access zone"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AccessibleDevices"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiNetwork"
  /Customers/{id}/locations/{locationId}/bleMode:
    put:
      tags:
      - "Customer"
      summary: "Enable or Disable BLE beaconing for all Pods at a location for Pod\
        \ location services (e.g. for Pods Naming)."
      description: "<div>With the mode of \"on\", all connected pods at this location\
        \ will have their bluetooth beacon turned on for locating purposes. Each BLE\
        \ beacon contains the serial number of the transmitting Pod. A setting of\
        \ \"off\", turns off the BLE beaconing for all Pods. With mode set to \"wps\"\
        , all connected pods at this location will have their bluetooth beacon turned\
        \ on for WPS related proximity measurements.</div>\n<div><strong>200</strong>:\
        \ Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id does not exist.</div>\n<div><strong>422</strong>: bleMode must be defined.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putBleMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: "on/off/wps/connectable"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_3"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/bleMode:
    put:
      tags:
      - "Customer"
      summary: "Enable or Disable BLE beaconing for the specific Pod at a location."
      description: "<div>With the mode of \"on\", all connected pods at this location\
        \ will have their bluetooth beacon turned on for locating purposes. Each BLE\
        \ beacon contains the serial number of the transmitting Pod. A setting of\
        \ \"off\", turns off the BLE beaconing for all Pods. With mode set to \"wps\"\
        , all connected pods at this location will have their bluetooth beacon turned\
        \ on for WPS related proximity measurements.</div>\n<div><strong>200</strong>:\
        \ Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id does not exist.</div>\n<div><strong>422</strong>: bleMode must be defined.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putBleModeForNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "NodeId"
      - name: "mode"
        in: "formData"
        description: "on/off/wps/connectable"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_3"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/ledMode:
    put:
      tags:
      - "Customer"
      summary: "Update the LED mode on a particular Node for a Location ID."
      description: "When the mode is set to \"locate\", the Node with that ID at this\
        \ locationId, will have its LED blinked for locating purposes. The mode is\
        \ set to \"normal\" to return the LED to its normal mode of operation.\n<div><strong>200</strong>:\
        \ Success, your new info looks good.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id does not exist.</div>\n<div><strong>422</strong>: ledMode must be defined.</div>\n\
        <div><strong>422</strong>: ledMode must be \"locate\" or \"normal\".</div>\n\
        <div><strong>422</strong>: nodeId must be defined.</div>\n<div><strong>425</strong>:\
        \ nodeId must belong to the location.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.putLedMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "mode"
        in: "formData"
        description: "locate/normal"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_3"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults:
    get:
      tags:
      - "Customer"
      summary: "retrieve the speed test result for a node."
      description: "<div><strong>200</strong>: Success, run.</div>\n<div><strong>422</strong>:\
        \ locationId or nodeId isn't defined.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>\n<div><strong>503</strong>: Service Unavailable.</div>"
      operationId: "Customer.prototype.getSpeedTestResults"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "granularity"
        in: "query"
        description: "days/hours/minutes"
        required: false
        type: "string"
        default: "days"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "X # of days/hours/minutes"
        required: false
        type: "number"
        default: 7.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTestResults/{requestId}:
    get:
      tags:
      - "Customer"
      summary: "retrieve single speed test result by request id for a node."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>:\
        \ locationId or nodeId isn't defined.</div>\n<div><strong>404</strong>: Speed\
        \ test not found.</div>\n<div><strong>500</strong>: Internal server error</div>\n\
        <div><strong>503</strong>: Service Unavailable.</div>"
      operationId: "Customer.prototype.getSpeedTestResultsByRequestId"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "requestId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RequestId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/speedTest:
    post:
      tags:
      - "Customer"
      summary: "Run speed test for a node."
      description: "<div><strong>200</strong>: Success, run.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required.</div>\n<div><strong>404</strong>: Customer, location or node does\
        \ not exists.</div>\n<div><strong>422</strong>: Invalid test type.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postSpeedTest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "testType"
        in: "formData"
        required: true
        type: "string"
        default: "OOKLA"
        x-exportParamName: "TestType"
      - name: "serverId"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "ServerId"
        x-optionalDataType: "Float64"
      - name: "uplinkType"
        in: "formData"
        required: false
        type: "string"
        default: "wire"
        x-exportParamName: "UplinkType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/ispSpeedTest:
    post:
      tags:
      - "Customer"
      summary: "Run ISP speed test for GW node on mobile request."
      description: "<div><strong>200</strong>: Success, run.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Customer or location\
        \ does not exists.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postRunMobileIspSpeedTest"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "requestId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "RequestId"
        x-optionalDataType: "String"
      - name: "serverId"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "ServerId"
        x-optionalDataType: "Float64"
      - name: "uplinkType"
        in: "formData"
        required: false
        type: "string"
        default: "wire"
        x-exportParamName: "UplinkType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/ispSpeedTestConfiguration:
    put:
      tags:
      - "Customer"
      summary: "Enable|Disable ispSpeedTestConfiguration to schedule speed tests."
      description: "<div><strong>200</strong>: Success, run.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Customer or location\
        \ does not exists.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putIspSpeedTestConfiguration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        description: "boolean but marked as 'any' because our mobile app platforms\
          \ mixed string and boolean primitive"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Enable"
      - name: "enableAllNodes"
        in: "formData"
        description: "boolean but treated as a string since it is optional"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "EnableAllNodes"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_4"
  /Customers/{id}/locations/{locationId}/networkMode:
    get:
      tags:
      - "Customer"
      summary: "Get the current Network Mode for a Location ID."
      description: "<div><strong>200</strong>: Success, current NetworkMode returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or NetworkMode does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getNetworkMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_5"
    put:
      tags:
      - "Customer"
      summary: "Update the Network Mode for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putNetworkMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "NetworkMode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_6"
  /Customers/{id}/locations/{locationId}/reboot:
    put:
      tags:
      - "Customer"
      summary: "Reboots a particular on-line Node for a Location ID."
      description: "<div><strong>204</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Delay, is not between 0 and 100000.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.rebootLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "delay"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Delay"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/reboot:
    put:
      tags:
      - "Customer"
      summary: "Reboots a single on-line Node for a Location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ location id or nodeId, does not exist.</div>\n<div><strong>422</strong>:\
        \ Delay, is not between 0 and 100000.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.rebootNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "NodeId"
      - name: "delay"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Delay"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/optimize:
    post:
      tags:
      - "Customer"
      summary: "Manually initiate an Optimize request for a Location ID."
      description: "<div><strong>200</strong>: Success, optimize request sent.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.optimize"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "forcePcs"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "ForcePcs"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "string"
  /Customers/{id}/locations/{locationId}/appFacade/dashboard:
    get:
      tags:
      - "Customer"
      summary: "Get the current speed test aggregation result for a Location ID."
      description: "<div><strong>200</strong>: Success, current speedTest result and\
        \ most active devices returned.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id or NetworkMode does not exist.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.getSpeedTestResultsForApp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "excludeDevices"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeDevices"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/capabilities:
    get:
      tags:
      - "Customer"
      summary: "Get the non-base feature capabilities supported by a particular Location\
        \ ID."
      description: "<div>The controller will implement logic to determine the non-base\
        \ features supported by the Pods in the location ID. The feature capability\
        \ is determined on the system level, and not per individual Pod.</div>\n<div>The\
        \ mobile apps or other WebUIs should only show the UI for a feature if the\
        \ disabled value equals \"false\".</div>\n<div>&nbsp;</div>\n<div><strong>200</strong>:\
        \ Success, current Capabilities returned.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id does not exist.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.getLocationCapabilities"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/CapabilitiesResponse"
  /Customers/{id}/locations/{locationId}/persons/{personId}/freeze/autoExpire:
    put:
      tags:
      - "Customer"
      summary: "Put all devices from a person to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putPersonFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "expiresAt"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "ExpiresAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete all devices from a person to be frozen for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deletePersonFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/persons/{personId}/freeze/suspend:
    put:
      tags:
      - "Customer"
      summary: "Put a person suspend for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putPersonFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete person suspend for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deletePersonFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/persons/{personId}/freeze/forever:
    put:
      tags:
      - "Customer"
      summary: "Put a person forever freeze for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putPersonFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a person forever freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deletePersonFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/persons/{personId}/freeze/{freezeTemplateId}:
    post:
      tags:
      - "Customer"
      summary: "Post a shared schedule uuid freeze for a person for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>404</strong>: FreezeTemplateId\
        \ not found.</div>\n<div><strong>404</strong>: Person not found.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postPersonFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are uuids"
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    put:
      tags:
      - "Customer"
      summary: "Put a person to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>\n<div><strong>501</strong>: Not Implemented, if location\
        \ is utilizing shared location freeze schedules</div>"
      operationId: "Customer.prototype.putPersonFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are 'untilMidinight', 'schoolNights', etc."
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "schedules"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Schedules"
        x-optionalDataType: "String"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a person to be frozen for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deletePersonFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are 'untilMidinight', 'schoolNights', etc."
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/persons/{personId}/freezes:
    delete:
      tags:
      - "Customer"
      summary: "Delete a person to be frozen for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deletePersonAllFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freeze/autoExpire:
    put:
      tags:
      - "Customer"
      summary: "Put a device to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putDeviceFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "expiresAt"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "ExpiresAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device to be frozen for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteDeviceFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freeze/suspend:
    put:
      tags:
      - "Customer"
      summary: "Put a device suspend for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putDeviceFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device suspend for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address\
        \ does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteDeviceFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freeze/forever:
    put:
      tags:
      - "Customer"
      summary: "Put a device forever freeze for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putDeviceFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device forever freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address\
        \ does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteDeviceFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freeze/residentialGwManaged:
    put:
      tags:
      - "Customer"
      summary: "Put a device residentialGwManaged freeze for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putDeviceFreezeResidentialGwManaged"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "schedules"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Schedules"
        x-optionalDataType: "String"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device residentialGwManaged freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address\
        \ does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteDeviceFreezeResidentialGwManaged"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freeze/{freezeTemplateId}:
    post:
      tags:
      - "Customer"
      summary: "Post a shared schedule uuid freeze for a device for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>404</strong>: FreezeTemplateId\
        \ not found</div>\n<div><strong>404</strong>: Device not found</div>\n<div><strong>422</strong>:\
        \ GroupOfUnassignedDevices has active freeze schedule</div>\n<div><strong>422</strong>:\
        \ Person has active freeze schedule</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.postDeviceFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are uuids"
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    put:
      tags:
      - "Customer"
      summary: "Put a device to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>\n<div><strong>501</strong>: Not Implemented, if location\
        \ is utilizing shared location freeze schedules</div>"
      operationId: "Customer.prototype.putDeviceFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are 'untilMidinight', 'schoolNights', etc."
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      - name: "deleteAllExceptSuspend"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DeleteAllExceptSuspend"
        x-optionalDataType: "Bool"
      - name: "schedules"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Schedules"
        x-optionalDataType: "String"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete a device to be frozen for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: MAC address\
        \ does not exist or is invalid.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteDeviceFreeze"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are 'untilMidinight', 'schoolNights', etc."
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/freezes:
    delete:
      tags:
      - "Customer"
      summary: "Delete/clear all device freezes templateIds for a mac."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteAllDeviceFreezes"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/freeze/autoExpire:
    get:
      tags:
      - "Customer"
      summary: "Get all devices/persons except some to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.getLocationFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete the location freeze/autoExpire for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteLocationFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    patch:
      tags:
      - "Customer"
      summary: "Put all devices except some to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.patchLocationFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "includedDeviceMacs"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "IncludedDeviceMacs"
        x-optionalDataType: "String"
      - name: "includedPersonIds"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "IncludedPersonIds"
        x-optionalDataType: "String"
      - name: "expiresAt"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/wifiNetwork/ssid:
    get:
      tags:
      - "Customer"
      summary: "Get the current WiFi SSID for a Location ID."
      description: "<div><strong>200</strong>: Success, current Wifi Network returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or WifiNetwork does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getSsid"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_7"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls:
    get:
      tags:
      - "Customer"
      summary: "Get the Front Haul Portal configs for a given Location ID."
      description: "<div><strong>200</strong>: Success, FrontHaul Networks returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary network does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getFrontHaulNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
    post:
      tags:
      - "Customer"
      summary: "Create a Front Haul Network for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or NetworkId does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postFrontHaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "NetworkId"
        x-optionalDataType: "String"
      - name: "ssid"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Ssid"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "encryptionKey"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "EncryptionKey"
      - name: "accessZone"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "AccessZone"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      - name: "ssidBroadcast"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SsidBroadcast"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals:
    get:
      tags:
      - "Customer"
      summary: "Get the Captive Portal configs for a given Location ID."
      description: "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
    post:
      tags:
      - "Customer"
      summary: "Create a Captive Portal Network for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or NetworkId does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postCaptivePortal"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "NetworkId"
        x-optionalDataType: "String"
      - name: "ssid"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Ssid"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "encryptionKey"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "EncryptionKey"
        x-optionalDataType: "String"
      - name: "bandwidthLimit"
        in: "formData"
        description: "attributes: \"enabled\" boolean, \"type\": \"absolute\"|\"percentage\"\
          , \"upload\"/\"download\" - either as percentage or absolute (Mbps)"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "BandwidthLimit"
        x-optionalDataType: "String"
      - name: "sessionTimeLimitSec"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SessionTimeLimitSec"
        x-optionalDataType: "Float64"
      - name: "wpaMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      - name: "language"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Language"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a Front Haul for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.deleteFrontHaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Update a Front Haul for a given Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or NetworkId does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchFrontHaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Ssid"
        x-optionalDataType: "String"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "encryptionKey"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "EncryptionKey"
        x-optionalDataType: "String"
      - name: "accessZone"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "AccessZone"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      - name: "ssidBroadcast"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SsidBroadcast"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a CaptivePortal for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.deleteCaptivePortal"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Update a Captive Portal for a given Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or NetworkId does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: NetworkId/SSIDs must be the unique and valid values.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchCaptivePortal"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Ssid"
        x-optionalDataType: "String"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "encryptionKey"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "EncryptionKey"
        x-optionalDataType: "String"
      - name: "bandwidthLimit"
        in: "formData"
        description: "attributes: \"enabled\" boolean, \"type\": \"absolute\"|\"percentage\"\
          , \"upload\"/\"download\" - either as percentage or absolute (Mbps)"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "BandwidthLimit"
        x-optionalDataType: "String"
      - name: "wpaMode"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "WpaMode"
        x-optionalDataType: "String"
      - name: "sessionTimeLimitSec"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SessionTimeLimitSec"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guests:
    get:
      tags:
      - "Customer"
      summary: "Fetch the list of Guests which were logged into the given captivePortal\
        \ network during the current day."
      description: "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalGuests"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "orderBy"
        in: "query"
        description: "Order by: <connectionTime>"
        required: false
        type: "string"
        default: "connectionTime"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        default: 20.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp:
    get:
      tags:
      - "Customer"
      summary: "Get the current DPP configurator for a Location ID."
      description: "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getFrontHaulsDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Create the DPP setting for a Fronthaul Network."
      description: "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>\n\
        <div><strong>422</strong>: Invalid keys.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postFrontHaulsDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "enabled"
        in: "formData"
        description: "should we configure dpp for this network - defaults to true"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      - name: "curve"
        in: "formData"
        description: "one of predefined elliptic curves, - optional,  if missing in\
          \ request default to prime256v1"
        required: false
        type: "string"
        x-exportParamName: "Curve"
        x-optionalDataType: "String"
      - name: "privateKey"
        in: "formData"
        description: "privateKey, must also provide public part if present, optional"
        required: false
        type: "string"
        x-exportParamName: "PrivateKey"
        x-optionalDataType: "String"
      - name: "publicKey"
        in: "formData"
        description: "publicKey"
        required: false
        type: "string"
        x-exportParamName: "PublicKey"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/bootstrapUris:
    post:
      tags:
      - "Customer"
      summary: "Create a bootstrap for DPP setting for a Fronthaul Network."
      description: "<div><strong>200</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id or Fronthaul Network does not exist.</div>\n\
        <div><strong>422</strong>: Invalid curve.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postFrontHaulsDppBootstrap"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "curve"
        in: "formData"
        description: "one of predefined elliptic curves, - optional,  if missing in\
          \ requset default to prime256v1"
        required: false
        type: "string"
        x-exportParamName: "Curve"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/dpp/enrollments:
    put:
      tags:
      - "Customer"
      summary: "Create and persist a list of DPP enrollments"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or wifi network does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putDppEnrollments"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "enrollments"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/x-any"
        x-exportParamName: "Enrollments"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/dpp/enrollments:
    post:
      tags:
      - "Customer"
      summary: "Create an enrollment for DPP setting for a fronthaul secondary network."
      description: "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id or wifi network does not exist.</div>\n\
        <div><strong>404</strong>: Configurator keys for network not found.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postFrontHaulsDppEnrollment"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "bootstrapUri"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "BootstrapUri"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/ohp/locationIdentifier:
    get:
      tags:
      - "Customer"
      summary: "Get the current OHP identifier for a Location ID."
      description: "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getOhpLocationIdentifier"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/onboardingLocationIdentifier:
    get:
      tags:
      - "Customer"
      summary: "Get the onboarding identifier for a Location ID."
      description: "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getOnboardingLocationIdentifier"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/networkUsage:
    post:
      tags:
      - "Customer"
      summary: "Fetch the Captive Portal Network Usage stats for the given network."
      description: "<div><strong>200</strong>: Success, CaptivePortal Networks returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postCaptivePortalNetworkUsageStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "inclusions"
        in: "formData"
        description: "Fields to include in response"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Inclusions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/guestEmailCollectionInfo:
    get:
      tags:
      - "Customer"
      summary: "Fetch the Captive Portal Network guest info download availability\
        \ for the given network."
      description: "<div><strong>200</strong>: Success, CaptivePortal Networks guest\
        \ info download availability returned.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id or secondary networks does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalGuestEmailCollectionInfo"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "duration"
        in: "query"
        description: "number of days for how far back in history for data"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Duration"
        x-optionalDataType: "Float64"
      - name: "limit"
        in: "query"
        description: "limit how many emails we wish to return"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_8"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/enableGuestEmailCollection:
    post:
      tags:
      - "Customer"
      summary: "Patch the Captive Portal Network to be compliant for guest email collection."
      description: "<div><strong>200</strong>: Success, CaptivePortal Networks has\
        \ been patched.</div>\n<div><strong>401</strong>: Authorization required or\
        \ customer id not found</div>\n<div><strong>404</strong>: location id or secondary\
        \ networks does not exist.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.postCaptivePortalEnableGuestEmailCollection"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign:
    get:
      tags:
      - "Customer"
      summary: "Get the Captive Portal campaign for a given Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success, campaign returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getCampaignCaptivePortalNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
    patch:
      tags:
      - "Customer"
      summary: "Patch the Captive Portal campaign for a given Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success, campaign patched.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchCampaignCaptivePortalNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "campaignPayload"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "CampaignPayload"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/branding:
    patch:
      tags:
      - "Customer"
      summary: "Patch the Captive Portal campaign branding properties for a given\
        \ Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success, campaign branding patched.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or CaptivePortal Network does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.patchCampaignCaptivePortalBranding"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "payload"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Payload"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/campaign/preview:
    post:
      tags:
      - "Customer"
      summary: "POST Captive Portal campaign preview for a given Location ID/NetworkId."
      description: "<div><strong>200</strong>: Success, campaign posted.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postCampaignPreviewCaptivePortalNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "campaignPayload"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "CampaignPayload"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/companyInfo/search:
    post:
      tags:
      - "Customer"
      summary: "Get the companyInfo for the given url (domain)."
      description: "<div><strong>200</strong>: Success, company info returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCompanyInfoCaptivePortalNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "url"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Url"
        x-optionalDataType: "String"
      - name: "urlType"
        in: "formData"
        description: "only 'domain' currently supported"
        required: false
        type: "string"
        x-exportParamName: "UrlType"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/ownerAppIds:
    get:
      tags:
      - "Customer"
      summary: "Get the AppId info for the given location."
      description: "<div><strong>200</strong>: Success, appId info returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getAppIdInfoCaptivePortalNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/uploadCampaignAsset:
    post:
      tags:
      - "Customer"
      summary: "Upload campaign asset for given location."
      description: "<div><strong>200</strong>: Success, appId info returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or url does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postCaptivePortalCampaignAsset"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfig"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/sendGuestDetails:
    put:
      tags:
      - "Customer"
      summary: "Send Captive Portal Guest details to requesters email for a given\
        \ Location ID/NetworkId."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putCaptivePortalSendDetails"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "duration"
        in: "formData"
        description: "number of days for how far back in history for data"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Duration"
        x-optionalDataType: "Float64"
      - name: "limit"
        in: "formData"
        description: "limit how many emails we wish to return"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetails:
    get:
      tags:
      - "Customer"
      summary: "Download Captive Portal Guest details for a given Location ID/NetworkId."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalSendDetails"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "file"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/downloadGuestDetailsDirect:
    get:
      tags:
      - "Customer"
      summary: "Download Captive Portal Guest details for a given Location ID/NetworkId\
        \ without accessing Amazon S3."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id or CaptivePortal Network does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalSendDetailsDirect"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "duration"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Duration"
        x-optionalDataType: "Float64"
      - name: "limit"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "file"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients:
    get:
      tags:
      - "Customer"
      summary: "Get CaptivePortal authorized clients"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getCaptivePortalAuthorizedClients"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Post CaptivePortal authorized clients"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.postCaptivePortalAuthorizedClients"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "mac"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "expireAt"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "ExpireAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/authorizedClients/{mac}:
    delete:
      tags:
      - "Customer"
      summary: "Delete Authorized Client"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.deleteCaptivePortalAuthorizedClients"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Post CaptivePortal authorized clients"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id/NetworkId does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchCaptivePortalAuthorizedClients"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "expireAt"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "ExpireAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/clientSteering:
    patch:
      tags:
      - "Customer"
      summary: "Toggle auto:on/off client steering for a device."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Invalid mac address.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchDeviceClientSteering"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "device mac address"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "auto"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Auto"
        x-optionalDataType: "Bool"
      - name: "steeringClass"
        in: "formData"
        description: "override deviceTypeId for testing purposes"
        required: false
        type: "string"
        x-exportParamName: "SteeringClass"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/ClientSteeringConfiguration"
  /Customers/{id}/locations/{locationId}/councilman/resync:
    put:
      tags:
      - "Customer"
      summary: "Push Security Configurations to Councilman."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putCouncilmanResync"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/securityConfiguration:
    patch:
      tags:
      - "Customer"
      summary: "Patch Security Configurations for location (preferredIntelligence,\
        \ etc)"
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Invalid securityConfig.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchSecurityConfiguration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "securityConfig"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "SecurityConfig"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SecurityConfiguration"
  /Customers/{id}/locations/{locationId}/bandSteering:
    put:
      tags:
      - "Customer"
      summary: "Enable/disable band steering for a Location ID (deprecated)"
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putBandSteering"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "auto"
        in: "formData"
        required: true
        type: "boolean"
        default: true
        x-exportParamName: "Auto"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationBandSteering"
    patch:
      tags:
      - "Customer"
      summary: "Set mode for band steering"
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Invalid mode.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchLocationBandSteering"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationBandSteering"
  /Customers/{id}/locations/{locationId}/controlMode:
    get:
      tags:
      - "Customer"
      summary: "Get control mode for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.getControlMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Set control mode for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putControlMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Mode"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationControlMode"
  /Customers/{id}/locations/{locationId}/monitorMode:
    put:
      tags:
      - "Customer"
      summary: "Enable/disable monitor mode for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putMonitorMode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Enable"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationMonitorMode"
  /Customers/{id}/locations/{locationId}/optimizations:
    put:
      tags:
      - "Customer"
      summary: "Enable/disable optimizations for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid dfsMode,\
        \ prefer160MhzMode, hopPenalty or preCACScheduler provided.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.putOptimizations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "auto"
        in: "formData"
        description: "defaults to true"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Auto"
      - name: "dfsMode"
        in: "formData"
        description: "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels,\
          \ usDfs, deviceAware"
        required: false
        type: "string"
        default: "auto"
        x-exportParamName: "DfsMode"
        x-optionalDataType: "String"
      - name: "prefer160MhzMode"
        in: "formData"
        description: "enum of values include: auto, enable, disable"
        required: false
        type: "string"
        default: "auto"
        x-exportParamName: "Prefer160MhzMode"
        x-optionalDataType: "String"
      - name: "hopPenalty"
        in: "formData"
        description: "enum of values include: auto, low, medium, high"
        required: false
        type: "string"
        default: "auto"
        x-exportParamName: "HopPenalty"
        x-optionalDataType: "String"
      - name: "preCACScheduler"
        in: "formData"
        description: "enum of values include: auto, enable, disable"
        required: false
        type: "string"
        default: "auto"
        x-exportParamName: "PreCACScheduler"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Optimizations"
    patch:
      tags:
      - "Customer"
      summary: "Enable/disable optimizations for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: Invalid dfsMode,\
        \ prefer160MhzMode, zeroWaitDfsMode, hopPenalty or preCACScheduler provided.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchOptimizations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "auto"
        in: "formData"
        description: "defaults to true"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Auto"
        x-optionalDataType: "String"
      - name: "dfsMode"
        in: "formData"
        description: "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels,\
          \ usDfs, deviceAware"
        required: false
        type: "string"
        x-exportParamName: "DfsMode"
        x-optionalDataType: "String"
      - name: "prefer160MhzMode"
        in: "formData"
        description: "enum of values include: auto, enable, disable"
        required: false
        type: "string"
        x-exportParamName: "Prefer160MhzMode"
        x-optionalDataType: "String"
      - name: "zeroWaitDfsMode"
        in: "formData"
        description: "enum of values include: auto, enable, disable"
        required: false
        type: "string"
        x-exportParamName: "ZeroWaitDfsMode"
        x-optionalDataType: "String"
      - name: "hopPenalty"
        in: "formData"
        description: "enum of values include: auto, low, medium, high"
        required: false
        type: "string"
        x-exportParamName: "HopPenalty"
        x-optionalDataType: "String"
      - name: "preCACScheduler"
        in: "formData"
        description: "enum of values include: auto, enable, disable"
        required: false
        type: "string"
        default: "auto"
        x-exportParamName: "PreCACScheduler"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Optimizations"
  /Customers/{id}/locations/{locationId}/locale:
    put:
      tags:
      - "Customer"
      summary: "Configure locale values for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>422</strong>: Region value\
        \ is not valid.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putLocale"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "region"
        in: "formData"
        description: "during optimizations, used to determine allowed WiFi channels.\
          \ Possible values: US, SINGAPORE, UK, EU, CANADA, JP."
        required: true
        type: "string"
        x-exportParamName: "Region"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Locale"
  /Customers/{id}/locations/{locationId}/authorizations:
    get:
      tags:
      - "Customer"
      summary: "Get the number of authorized leaf pods for a Location ID."
      description: "<div>Number of leaf pods that are authorized to be claimed and\
        \ be a part of the Plume network</div>\n<div><strong>200</strong>: Success,\
        \ numPodsAuthorized returned.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getAuthorizations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Authorizations"
    put:
      tags:
      - "Customer"
      summary: "Configure number of authorized leaf pods for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields are missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_authorizations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "numPodsAuthorized"
        in: "formData"
        description: "number of leaf pods that are authorized to be claimed and be\
          \ a part of the Plume network"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "NumPodsAuthorized"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Authorizations"
  /Customers/{id}/locations/{locationId}/nodeAuthorizations:
    put:
      tags:
      - "Customer"
      summary: "Configure number of authorized leaf pods grouped by model id for a\
        \ Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields are missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putAuthorizations__put_Customers_{id}_locations_{locationId}_nodeAuthorizations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "numNodesAuthorized"
        in: "formData"
        description: "number of leaf pods grouped by model id that are authorized\
          \ to be claimed and be a part of the Plume network"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NumNodesAuthorized"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Authorizations"
  /Customers/{id}/locations/{locationId}/wanSettings:
    get:
      tags:
      - "Customer"
      summary: "DEPRECATED: Get the WAN Settings for a Location ID."
      description: "<div><strong>200</strong>: Success, WAN Settings returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getLocationWanSettings"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationWanSettings"
    put:
      tags:
      - "Customer"
      summary: "DEPRECATED: Persist WAN Settings for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Required fields are\
        \ not valid.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putLocationWanSettings"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "wanSettings"
        required: true
        schema:
          $ref: "#/definitions/LocationWanSettings"
        x-exportParamName: "WanSettings"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationWanSettings"
  /Customers/{id}/locations/{locationId}/wanConfiguration:
    get:
      tags:
      - "Customer"
      summary: "Get WAN Configuration for a Location ID."
      description: "<div><strong>200</strong>: Success, WAN Settings returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getLocationWanConfiguration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Persist WAN Configuration for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Required fields are\
        \ not valid.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.putLocationWanConfiguration"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "pppoe"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Pppoe"
        x-optionalDataType: "String"
      - name: "uplink"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Uplink"
        x-optionalDataType: "String"
      - name: "staticIPv4"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "StaticIPv4"
        x-optionalDataType: "String"
      - name: "publishedWithBLE"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "PublishedWithBLE"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/persistentConfigs:
    delete:
      tags:
      - "Customer"
      summary: "Delete persistent data/configs from node in runtime."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found.</div>\n<div><strong>404</strong>: Location\
        \ or Node, does not exist.</div>\n<div><strong>422</strong>: Required fields\
        \ are not valid.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteNodePersistentConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "location id"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        description: "node id"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "deleteAllPersistentConfigs"
        in: "formData"
        description: "whether all persistent config data or just GW-offline data will\
          \ be deleted"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeleteAllPersistentConfigs"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcp:
    get:
      tags:
      - "Customer"
      summary: "Get current DHCP Configuration details for a Location ID."
      description: "<div><strong>200</strong>: Success, current dhcp returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or dhcp does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDhcp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Record or update a new DHCP subnet/subnetMask for a Location ID."
      description: "<div><strong>200</strong>: Success, DHCP are returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: subnet value is empty, or invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putDhcp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "subnet"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Subnet"
      - name: "subnetMask"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "SubnetMask"
        x-optionalDataType: "String"
      - name: "startIp"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "StartIp"
        x-optionalDataType: "String"
      - name: "endIp"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "EndIp"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}:
    get:
      tags:
      - "Customer"
      summary: "Get current DHCP IP reservation details for a Location ID."
      description: "<div><strong>200</strong>: Success, current DhcpReservation returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or DhcpReservation does not exist.</div>\n\
        <div><strong>422</strong>: mac is empty, or invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDhcpReservation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DhcpReservation"
    put:
      tags:
      - "Customer"
      summary: "Record or update a new DHCP IP Reservation for a particular MAC address\
        \ at a Location ID."
      description: "<div><strong>200</strong>: Success, all DHCP Reservations are\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>412</strong>: Subnet prefix is unknown.</div>\n\
        <div><strong>422</strong>: IP/mac value is empty, or invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putDhcpReservation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      - name: "ip"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Ip"
      - name: "hostName"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "HostName"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DhcpReservation"
    delete:
      tags:
      - "Customer"
      summary: "Delete a current DHCP IP reservation and the associated port forwarding\
        \ entries for a particular MAC address at a Location ID."
      description: "<div><strong>200</strong>: Success, remaining DhcpReservations\
        \ are returned.</div>\n<div><strong>401</strong>: Authorization required or\
        \ customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration\
        \ or DhcpReservation is empty.</div>\n<div><strong>422</strong>: mac is empty\
        \ or invalid.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.deleteDhcpReservation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DhcpReservation"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations:
    get:
      tags:
      - "Customer"
      summary: "Get current DHCP IP reservation details for a Location ID."
      description: "<div><strong>200</strong>: Success, current DhcpReservation returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or DhcpReservation does not exist.</div>\n\
        <div><strong>422</strong>: mac is empty, or invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDhcpReservations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DhcpReservation"
  /Customers/{id}/locations/{locationId}/networkConfiguration/multicast:
    patch:
      tags:
      - "Customer"
      summary: "Update the multicast settings for a Location ID."
      description: "Supported modes for individual settings are:\n* igmpSnooping:\
        \ enable/disable/auto\n* igmpProxy: igmpv1/igmpv2/igmpv3/disable/auto\n* mldProxy:\
        \ mldv1/mldv2/disable/disable/auto\n* multicastToUnicast: enable/disable/auto\n\
        \n<div><strong>200</strong>: Success, new multicast settings saved.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: Input validation error, see output for details.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchMulticast"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "multicast"
        description: "multicast object"
        required: true
        schema:
          $ref: "#/definitions/Multicast"
        x-exportParamName: "Multicast"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Multicast"
  /Customers/{id}/locations/{locationId}/networkConfiguration/ethernetLan:
    patch:
      tags:
      - "Customer"
      summary: "Update the ethernetLan setting for a Location ID."
      description: "Supported modes are:\n* enable/disable/auto\n\n<div><strong>200</strong>:\
        \ Success, new ethernetLan settings saved.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Input validation error, see output for details.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchEthernetLan"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "ethernetLan"
        description: "ethernetLan object"
        required: true
        schema:
          $ref: "#/definitions/EthernetLan"
        x-exportParamName: "EthernetLan"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/EthernetLan"
  /Customers/{id}/locations/{locationId}/networkConfiguration/persistConfigurationOnGateway:
    put:
      tags:
      - "Customer"
      summary: "Update settings for persistConfigurationOnGateway."
      description: "Supported modes are:\n* enable/disable/auto\n\n<div><strong>200</strong>:\
        \ Success, new ethernetLan settings saved.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Input validation error, see output for details.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.putPersistConfigurationOnGateway"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "persistConfigurationOnGateway"
        description: "ethernetLan object"
        required: true
        schema:
          $ref: "#/definitions/EthernetLan"
        x-exportParamName: "PersistConfigurationOnGateway"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/EthernetLan"
  /Customers/{id}/locations/{locationId}/networkConfiguration/upnp:
    get:
      tags:
      - "Customer"
      summary: "Get the current UPnP setting for a Location ID."
      description: "<div><strong>200</strong>: Success, current Upnp returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getUpnp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Upnp"
    put:
      tags:
      - "Customer"
      summary: "Update the UPnP setting for a Location ID."
      description: "<div><strong>200</strong>: Success, new Upnp saved.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Upnp value is empty.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putUpnp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "enabled"
        in: "formData"
        description: "DEPRECATED: boolean but marked as 'any' because our mobile app\
          \ platforms mixed string and boolean primitive"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Enabled"
        x-optionalDataType: "String"
      - name: "mode"
        in: "formData"
        description: "Possible values enable/disable/auto"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Upnp"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dnsServers:
    get:
      tags:
      - "Customer"
      summary: "Get the current DNS IP addresses and settings for a Location ID."
      description: "<div><strong>200</strong>: Success, current DNS server settings\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: NetworkConfiguration or DNS\
        \ server settings does not exist.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.getDnsServers"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DnsServers"
    put:
      tags:
      - "Customer"
      summary: "Update the DNS IPv4 server addresses for a Location ID."
      description: "<div><strong>200</strong>: Success, new DNS Servers saved.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: primaryDns or secondaryDns DNS Servers value is\
        \ empty.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putDnsServers"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "primaryDns"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "PrimaryDns"
        x-optionalDataType: "String"
      - name: "secondaryDns"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "SecondaryDns"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DnsServers"
  /Customers/{id}/locations/{locationId}/networkConfiguration/home:
    get:
      tags:
      - "Customer"
      summary: "Get the current overall settings and status of the Advanced Networking\
        \ settings for a Location ID."
      description: "<div><strong>200</strong>: Success, current networkConfiguration\
        \ settings returned.</div>\n<div><strong>401</strong>: Authorization required\
        \ or customer id not found</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.getNetworkConfigurationHome"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkConfigurationHome"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward:
    post:
      tags:
      - "Customer"
      summary: "Record a new Port Forwarding entry for an existing DHCP IP reservation\
        \ tied to a MAC address at a Location ID."
      description: "<div><strong>200</strong>: Success, all PortForwards are returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward\
        \ is empty.</div>\n<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort\
        \ is out of range, or protocol is invalid, or duplicate externalPort.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postPortForward"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      - name: "externalPort"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ExternalPort"
        x-optionalDataType: "String"
      - name: "internalPort"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "InternalPort"
        x-optionalDataType: "String"
      - name: "protocol"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Protocol"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PortForward"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForward/{externalPort}:
    put:
      tags:
      - "Customer"
      summary: "Update an existing Port Forwarding entry for an existing DHCP IP reservation\
        \ tied to a MAC address at a Location ID."
      description: "<div><strong>200</strong>: Success, all PortForwards are returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: networkConfiguration, dhcpReservation, PortForward\
        \ is empty.</div>\n<div><strong>422</strong>: mac is empty, or invalid, externalPort/internalPort\
        \ is out of range, or protocol is invalid.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.putPortForward"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      - name: "externalPort"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "ExternalPort"
      - name: "internalPort"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "InternalPort"
        x-optionalDataType: "String"
      - name: "protocol"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Protocol"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PortForward"
    delete:
      tags:
      - "Customer"
      summary: "Delete an existing Port Forwarding entry for an existing DHCP IP reservation\
        \ tied to a MAC address at a Location ID."
      description: "<div><strong>200</strong>: Success, returns list of remaining\
        \ port forwards.</div>\n<div><strong>401</strong>: Authorization required\
        \ or customer id not found</div>\n<div><strong>404</strong>: NetworkConfiguration,\
        \ DhcpReservation or PortForward does not exist.</div>\n<div><strong>422</strong>:\
        \ mac does not exist, or is invalid, or externalPort is empty.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.deletePortForward"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      - name: "externalPort"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "ExternalPort"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortForward"
  /Customers/{id}/locations/{locationId}/networkConfiguration/dhcpReservations/{mac}/portForwards:
    get:
      tags:
      - "Customer"
      summary: "Get all existing Port Forwarding entries for an existing DHCP IP reservation\
        \ tied to a MAC address at a Location ID."
      description: "<div><strong>200</strong>: Success, current Port Forwarding entries\
        \  returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: NetworkConfiguration or dhcpReservations\
        \ value is empty.</div>\n<div><strong>422</strong>: mac is empty or invalid.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getPortForwards"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortForward"
  /Customers/{id}/locations/{locationId}/onboardingCheckpoint:
    post:
      tags:
      - "Customer"
      summary: "Record the new Onboarding Checkpoint for the Location ID."
      description: "<div><strong>200</strong>: Success, most recent checkpoint saved.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>422</strong>: checkpoint value must be defined.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postOnboardingCheckpoint"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "checkpoint"
        in: "formData"
        description: "is the last passed onboarding step by the customer: 'PodsAdded'\
          \ or 'OnboardingComplete';"
        required: false
        type: "string"
        x-exportParamName: "Checkpoint"
        x-optionalDataType: "String"
      - name: "podsSeenByBle"
        in: "formData"
        description: "is the number of Nodes the app discovered by BLE when the onboarding\
          \ was completed by the customer, submit with PodsAdded"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "PodsSeenByBle"
        x-optionalDataType: "String"
      - name: "appOs"
        in: "formData"
        description: "is the version of the app used during the onboarding, submit\
          \ with PodsAdded"
        required: false
        type: "string"
        x-exportParamName: "AppOs"
        x-optionalDataType: "String"
      - name: "osVersion"
        in: "formData"
        description: "is the phone OS version used during the onboarding, submit with\
          \ PodsAdded"
        required: false
        type: "string"
        x-exportParamName: "OsVersion"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_9"
  /Customers/{id}/iosDeviceToken/{deviceToken}:
    put:
      tags:
      - "Customer"
      summary: "Inserts the iOS device token for the Customer ID, which may be used\
        \ for notification services."
      description: "<div><strong>204</strong>: Success, most recent IOS device Token\
        \ saved.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>422</strong>: deviceToken value must be\
        \ defined.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.putIosDeviceToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "deviceToken"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DeviceToken"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/iosDeviceTokens/{deviceToken}/exists:
    get:
      tags:
      - "Customer"
      summary: "Provides feedback as to whether an iOS deviceToken was previously\
        \ registered for push notifications."
      description: "<div><strong>200</strong>: Success, exists:true|false returned.</div>\n\
        <div><strong>404</strong>: customer id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.iosDeviceTokenExists"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "deviceToken"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DeviceToken"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/summary:
    get:
      tags:
      - "Customer"
      summary: "DEPRECATED: The system summary for a location including topology,\
        \ optimizations, and firmware upgrades."
      description: "<div><strong>200</strong>: Success, system info plus topology\
        \ array returned.</div>\n<div><strong>404</strong>: customer id or location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getSummary"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/SummaryResponse"
  /Customers/{id}/locations/{locationId}/topology:
    get:
      tags:
      - "Customer"
      summary: "DEPRECATED: The topology for a location including channels and devices."
      description: "Please use the GET /Customers/{id}/locations/{locationId}/forceGraph\
        \ API as a replacement.\n<div><strong>200</strong>: Success, array of Nodes\
        \ returned.</div>\n<div><strong>404</strong>: customer id, location id, or\
        \ topology does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getTopology"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/TopologyResponse"
  /Customers/{id}/locations/{locationId}/forceGraph:
    get:
      tags:
      - "Customer"
      summary: "HTML or JSON (vertices[] + edges[]) used to display a Network Topology."
      description: "<div>The HTML and JSON to initialize and dynamically display and\
        \ update a Topology.</div>\n<div>The JSON can also be used to get a network's\
        \ list of nodes + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>\n\
        <div><strong>200</strong>: Success, HTML or JSON returned depending on \"\
        Accept\" HTTP header.</div>\n<div><strong>404</strong>: customer id or location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getForceGraph"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "ip"
        in: "query"
        description: "deprecated and optional IP address of client displaying the\
          \ topology"
        required: false
        type: "string"
        x-exportParamName: "Ip"
        x-optionalDataType: "String"
      - name: "mac"
        in: "query"
        description: "optional mac address of client displaying the topology"
        required: false
        type: "string"
        x-exportParamName: "Mac"
        x-optionalDataType: "String"
      - name: "authKey"
        in: "query"
        description: "PubNub authKey"
        required: false
        type: "string"
        x-exportParamName: "AuthKey"
        x-optionalDataType: "String"
      - name: "subscribeKey"
        in: "query"
        description: "PubNub subscribeKey"
        required: false
        type: "string"
        x-exportParamName: "SubscribeKey"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "view template override (e.g., iguana)"
        required: false
        type: "string"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      - name: "allSSIDs"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "AllSSIDs"
        x-optionalDataType: "Bool"
      - name: "showPartnerComponent"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ShowPartnerComponent"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "string"
  /Customers/{id}/locations/{locationId}/alerts:
    get:
      tags:
      - "Customer"
      summary: "Retrieve active alerts for this location."
      description: "<div><strong>200</strong>: Success, an array of Nodes and an array\
        \ of Devices returned.</div>\n<div><strong>404</strong>: customer id or location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getAlerts"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/alerts/{type}:
    put:
      tags:
      - "Customer"
      summary: "Snooze an alert on a node."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id does not exist or nodeId not claimed to this account.</div>\n\
        <div><strong>422</strong>: Invalid alert type and/or state.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.putSnoozeOnNodeAlert"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        description: "id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "type"
        in: "path"
        description: "enum of values include: poorHealth"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - name: "state"
        in: "formData"
        description: "enum of values include: snooze, ignore, performanceAcceptable,\
          \ reset"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Node"
  /Customers/{id}/locations/{locationId}/devices/{mac}/alerts/{type}:
    put:
      tags:
      - "Customer"
      summary: "Snooze an alert on a device."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id does not exist or device mac not in this account's recent history.</div>\n\
        <div><strong>422</strong>: Invalid alert type and/or state.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.putSnoozeOnDeviceAlert"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "type"
        in: "path"
        description: "enum of values include: poorHealth"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - name: "state"
        in: "formData"
        description: "enum of values include: snooze, ignore, performanceAcceptable"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Device"
  /Customers/{id}/nodes/{nodeId}:
    get:
      tags:
      - "Customer"
      summary: "Returns a single Node for a Customer ID."
      description: "<div><strong>200</strong>: Success, node returned with locationId\
        \ field.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found.</div>\n<div><strong>404</strong>: customer id or location\
        \ id does not exist. Or, nodeId not claimed to this account.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCustomerNodeById"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "nodeId"
        in: "path"
        description: "id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NodeResponse"
    delete:
      tags:
      - "Customer"
      summary: "Delete a node model based on its id."
      description: "<div><strong>204</strong>: The node was successfully deleted.</div>\n\
        <div><strong>401</strong>: Authorization Required.</div>\n<div><strong>404</strong>:\
        \ Node or customer not found.</div>\n<div><strong>422</strong>: Node deletion\
        \ could not be completed.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.deleteNodeLocked"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}:
    get:
      tags:
      - "Customer"
      summary: "Returns a single Node for a Location ID with its list of connected\
        \ devices."
      description: "<div><strong>200</strong>: Success, node returned.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist. Or, nodeId not claimed to this\
        \ account.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getNodeBySerialNumber"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        description: "id of node"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NodeResponse"
    put:
      tags:
      - "Customer"
      summary: "Rename a particular Node for a Location ID with the option to disable\
        \ the blinking LED."
      description: "Rename a particular Node for a Location ID with the option to\
        \ disable the blinking LED with the option \"emitMessage\":\"on\" or \"off\"\
        .\n<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>400</strong>:\
        \ Bad request, nickname is undefined or empty string.</div>\n<div><strong>401</strong>:\
        \ Authorization required, customer id not found, <br/> or id not owned by\
        \ requestor.</div>\n<div><strong>404</strong>: location ID or node ID not\
        \ found.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.renameNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "nickname"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Nickname"
      - name: "emitMessage"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "EmitMessage"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Node"
    delete:
      tags:
      - "Customer"
      summary: "Unclaim a particular Node from a Location ID with the option of preserving\
        \ the original Package ID."
      description: "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>400</strong>:\
        \ Pod already unclaimed.</div>\n<div><strong>401</strong>: Authorization required,\
        \ customer id not found, <br/> or id not owned by requestor.</div>\n<div><strong>403</strong>:\
        \ the node is online, and can not be unclaimed.<br/> \n<div><strong>404</strong>:\
        \ location id not found, nodeId missing from URL,<br/> or location has zero\
        \ owned pods.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.unclaimNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "preservePackId"
        in: "formData"
        description: "packId should remain the same"
        required: false
        type: "boolean"
        x-exportParamName: "PreservePackId"
        x-optionalDataType: "Bool"
      - name: "removeAccountId"
        in: "formData"
        description: "delete account id on the inventory node"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "RemoveAccountId"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/nodes:
    get:
      tags:
      - "Customer"
      summary: "Retrieve the Node settings and status for a Location ID."
      description: "<div><strong>200</strong>: Success, array of Nodes returned.</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist and is\
        \ not known to Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getNodes"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_10"
    post:
      tags:
      - "Customer"
      summary: "Claim a node and all nodes still associated to its Package ID for\
        \ a Location ID."
      description: "<div><strong>200</strong>: King node claimed and all related claimed\
        \ nodes are returned.</div>\n<div><strong>204</strong>: Valid serial number\
        \ but zero new claimed nodes.</div>\n<div><strong>404</strong>: Unable to\
        \ find Node with serial number, customer id, or location id.</div>\n<div><strong>409</strong>:\
        \ Node is owned by another customer.</div>\n<div><strong>422</strong>: Claiming\
        \ request exceeded numPodsAuthorized (=leaf pods), accountId+partnerId not\
        \ unique, and/or monitorMode=true.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Customer.prototype.claimNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "location id"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "serialNumber"
        in: "formData"
        description: "unique serial number or ID of Node"
        required: false
        type: "string"
        x-exportParamName: "SerialNumber"
        x-optionalDataType: "String"
      - name: "radioMac24"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid mac\
          \ address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac24"
        x-optionalDataType: "String"
      - name: "radioMac50"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid mac\
          \ address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac50"
        x-optionalDataType: "String"
      - name: "radioMac60"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid mac\
          \ address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac60"
        x-optionalDataType: "String"
      - name: "ethernetMac"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid mac\
          \ address"
        required: false
        type: "string"
        x-exportParamName: "EthernetMac"
        x-optionalDataType: "String"
      - name: "ethernet1Mac"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid mac\
          \ address"
        required: false
        type: "string"
        x-exportParamName: "Ethernet1Mac"
        x-optionalDataType: "String"
      - name: "claimKey"
        in: "formData"
        description: "optional but required for auto-importing, must be a valid claimKey"
        required: false
        type: "string"
        x-exportParamName: "ClaimKey"
        x-optionalDataType: "String"
      - name: "model"
        in: "formData"
        description: "optional when auto-importing, ignored otherwise"
        required: false
        type: "string"
        x-exportParamName: "Model"
        x-optionalDataType: "String"
      - name: "hybridCheck"
        in: "formData"
        description: "optional when auto-importing, ignored otherwise"
        required: false
        type: "boolean"
        x-exportParamName: "HybridCheck"
        x-optionalDataType: "Bool"
      - name: "nickname"
        in: "formData"
        description: "optional node nickname"
        required: false
        type: "string"
        x-exportParamName: "Nickname"
        x-optionalDataType: "String"
      - name: "skipSubscription"
        in: "query"
        description: "skip subscription update"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipSubscription"
        x-optionalDataType: "Bool"
      - name: "backhaulDhcpPoolIdx"
        in: "formData"
        description: "optional node backhaulDhcpPoolIdx"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "BackhaulDhcpPoolIdx"
        x-optionalDataType: "Float64"
      - name: "room"
        in: "formData"
        description: "optional room identifier"
        required: false
        type: "string"
        x-exportParamName: "Room"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NodeClaimingResponse"
    delete:
      tags:
      - "Customer"
      summary: "Unclaim all Nodes from a Location ID with the option of preserving\
        \ the original Package ID."
      description: "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>:\
        \ Authorization required, customer id not found, <br/> or id not owned by\
        \ requestor.</div>\n<div><strong>404</strong>: location id not found in customer\
        \ service or not found in inventory service.<p/> \n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.unclaimAllNodes"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "preservePackId"
        in: "formData"
        description: "packId should remain the same"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "PreservePackId"
        x-optionalDataType: "Bool"
      - name: "removeAccountId"
        in: "formData"
        description: "delete account ids on the inventory nodes"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "RemoveAccountId"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices:
    get:
      tags:
      - "Customer"
      summary: "Get all the devices for a Location ID, including the device name,\
        \ icon to use, MAC and IP  address, connecting nodes and more."
      description: "All devices with 2g, 5g and 6g channel settings\n<div><strong>200</strong>:\
        \ Success, array of Devices returned.</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>404</strong>: location\
        \ id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDevices"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "daysOffline"
        in: "query"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "DaysOffline"
        x-optionalDataType: "Float64"
      - name: "allSSIDs"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "AllSSIDs"
        x-optionalDataType: "Bool"
      - name: "showPartnerComponent"
        in: "query"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "ShowPartnerComponent"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_11"
  /Customers/{id}/locations/{locationId}/devices/{mac}:
    get:
      tags:
      - "Customer"
      summary: "Returns a single Device for a Location ID."
      description: "<div><strong>200</strong>: Success, device returned.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist. Or, device not found in this\
        \ network 's history.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDeviceByMac"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "include"
        in: "query"
        description: "can be 'bandwidthData', 'chartsData' or both. None means 'bandwidthData'\
          \ only."
        required: false
        type: "string"
        x-exportParamName: "Include"
        x-optionalDataType: "String"
      - name: "daysOffline"
        in: "query"
        description: "exclude devices disconnected longer than daysOffline."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "DaysOffline"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DeviceResponse"
    delete:
      tags:
      - "Customer"
      summary: "Removes a device for a customer's location id, wiping config and setting\
        \ a hidden flag."
      description: "<div><strong>204</strong>: Success, device removed from location.\
        \ </div>\n<div><strong>404</strong>: location id or  device not found. </div>\n\
        <div><strong>500</strong>: internal server error </div>"
      operationId: "Customer.prototype.removeDeviceByMac"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "daysOffline"
        in: "formData"
        description: "exclude devices disconnected longer than daysOffline. if not\
          \ set, it will be 31. for older devices, it will return 404, \"not found\""
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "DaysOffline"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Patches a single Device to mark it favorite for a Location ID."
      description: "<div><strong>200</strong>: Success, everything looks good.</div>\n\
        <div><strong>404</strong>: customer id or location id does not exist. Or,\
        \ device not found in this network 's history.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.patchDevice"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "favorite"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Favorite"
        x-optionalDataType: "Bool"
      - name: "nickname"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Nickname"
        x-optionalDataType: "String"
      - name: "mobileAppDeviceUuid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "MobileAppDeviceUuid"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DeviceResponse"
  /Customers/{id}/createOauthAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Create access token with ouath scope."
      description: "<div><strong>200</strong>: Success, access token created and returned.</div>\n\
        <div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.createOauthAccessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "scope"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "ttlSeconds"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TtlSeconds"
        x-optionalDataType: "Float64"
      - name: "singleToken"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "SingleToken"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/{id}/createOauthRefreshToken:
    post:
      tags:
      - "Customer"
      summary: "Create refresh token for a specific access token with ouath scope."
      description: "<div><strong>200</strong>: Success, access token created and returned.</div>\n\
        <div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.createOauthRefreshToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "linkedAccessToken"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "LinkedAccessToken"
        x-optionalDataType: "String"
      - name: "prevLinkedRefreshTokenId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "PrevLinkedRefreshTokenId"
        x-optionalDataType: "String"
      - name: "clientId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
  /Customers/refreshOauthAccessToken:
    post:
      tags:
      - "Customer"
      summary: "Refresh access and refresh tokens"
      description: "<div><strong>200</strong>: Success, access and refresh tokens\
        \ created and returned.</div>\n<div><strong>401</strong>: Authorization Required.</div>\n\
        <div><strong>500</strong>: Internal server error.</div>"
      operationId: "Customer.refreshOauthAccessToken"
      parameters:
      - name: "refreshToken"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "RefreshToken"
        x-optionalDataType: "String"
      - name: "clientId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/userInfo:
    get:
      tags:
      - "Customer"
      summary: "Get customer details with userInfo access token."
      description: "<div><strong>200</strong>: Success, customer details returned.</div>\n\
        <div><strong>401</strong>: Authorization Required.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.userInfo"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Customers/exists:
    get:
      tags:
      - "Customer"
      summary: ""
      description: "Check if customer email exists and is known to Plume, pass email\
        \ as parameter to /Customers/exists?email=xxx@yyy.com\n<div><strong>200</strong>:\
        \ customer email exists and is known to Plume, emailVerified returned</div>\n\
        <div><strong>400</strong>: email is required</div>\n<div><strong>404</strong>:\
        \ customer email does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ email is not valid</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.emailExists"
      parameters:
      - name: "email"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "boolean"
  /Customers/resendEmailVerification:
    post:
      tags:
      - "Customer"
      summary: "Resend the verification email."
      description: "<div><strong>204</strong>: Successfully sent email verification.</div>\n\
        <div><strong>400</strong>: Customer email is required (for this request).</div>\n\
        <div><strong>404</strong>: Unable to find Customer by email address.</div>\n\
        <div><strong>409</strong>: Customer email already verified.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.resendEmailVerification"
      parameters:
      - name: "email"
        in: "formData"
        description: "Email address that verification email will be sent to."
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/factoryReset:
    delete:
      tags:
      - "Customer"
      summary: "Reset specified location settings to default, while keeping claimed\
        \ nodes intact. Some of the flags can cause a node to be reeboted."
      description: "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>:\
        \ Authorization required </div>\n<div><strong>404</strong>: location id not\
        \ found or nodeId missing from URL\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.factoryReset"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "persons"
        in: "formData"
        description: "Whether or not to delete person information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Persons"
        x-optionalDataType: "Bool"
      - name: "onboardingCheckpoints"
        in: "formData"
        description: "Whether or not to reset onboarding checkpoints"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "OnboardingCheckpoints"
        x-optionalDataType: "Bool"
      - name: "devices"
        in: "formData"
        description: "Whether or not to delete devices related information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Devices"
        x-optionalDataType: "Bool"
      - name: "networkConfiguration"
        in: "formData"
        description: "Whether or not to reset network configuration (triggers node\
          \ reboot)"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "NetworkConfiguration"
        x-optionalDataType: "Bool"
      - name: "wifiNetwork"
        in: "formData"
        description: "Whether or not to reset wifi network (triggers node reboot)"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WifiNetwork"
        x-optionalDataType: "Bool"
      - name: "deviceFreeze"
        in: "formData"
        description: "Whether or not to reset device freeze templates"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeviceFreeze"
        x-optionalDataType: "Bool"
      - name: "deviceNicknames"
        in: "formData"
        description: "Whether or not to reset device nicknames"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeviceNicknames"
        x-optionalDataType: "Bool"
      - name: "managers"
        in: "formData"
        description: "Whether or not to reset managers of the location"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Managers"
        x-optionalDataType: "Bool"
      - name: "wanConfiguration"
        in: "formData"
        description: "Whether or not to reset wanConfiguration"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WanConfiguration"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/configs:
    delete:
      tags:
      - "Customer"
      summary: "Delete specified location settings, while keeping claimed nodes intact"
      description: "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>401</strong>:\
        \ Authorization required </div>\n<div><strong>404</strong>: location id not\
        \ found or nodeId missing from URL\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.deleteConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "persons"
        in: "formData"
        description: "Whether or not to delete person information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Persons"
        x-optionalDataType: "Bool"
      - name: "onboardingCheckpoints"
        in: "formData"
        description: "Whether or not to delete onboarding checkpoints"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "OnboardingCheckpoints"
        x-optionalDataType: "Bool"
      - name: "devices"
        in: "formData"
        description: "Whether or not to delete devices related information"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Devices"
        x-optionalDataType: "Bool"
      - name: "networkConfiguration"
        in: "formData"
        description: "Whether or not to delete network configuration"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "NetworkConfiguration"
        x-optionalDataType: "Bool"
      - name: "wifiNetwork"
        in: "formData"
        description: "Whether or not to delete wifi network"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WifiNetwork"
        x-optionalDataType: "Bool"
      - name: "deviceFreeze"
        in: "formData"
        description: "Whether or not to delete device freeze templates"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeviceFreeze"
        x-optionalDataType: "Bool"
      - name: "deviceNicknames"
        in: "formData"
        description: "Whether or not to delete device nicknames"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeviceNicknames"
        x-optionalDataType: "Bool"
      - name: "managers"
        in: "formData"
        description: "Whether or not to delete managers of the location"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Managers"
        x-optionalDataType: "Bool"
      - name: "wanConfiguration"
        in: "formData"
        description: "Whether or not to delete wanConfiguration"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "WanConfiguration"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/wpsState:
    get:
      tags:
      - "Customer"
      summary: "Get WPS state"
      description: "<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>401</strong>:\
        \ Authorization required </div>\n<div><strong>404</strong>: location id not\
        \ found or nodeId missing from URL\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.wpsState"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/startWps:
    post:
      tags:
      - "Customer"
      summary: "Start a WPS session"
      description: "<div><strong>201</strong>: Success, a WPS session was requested.</div>\n\
        <div><strong>401</strong>: Authorization required </div>\n<div><strong>404</strong>:\
        \ location id not found or nodeId missing from URL\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.startWps"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "NodeId"
      - name: "keyId"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "KeyId"
        x-optionalDataType: "String"
      - name: "networkId"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "NetworkId"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/appTime:
    get:
      tags:
      - "Customer"
      summary: "Get a Location's AppTime config by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getLocationAppTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Update a Location's AppTime config by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchLocationAppTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      - name: "appliesToAllDevices"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "AppliesToAllDevices"
        x-optionalDataType: "Bool"
      - name: "sandboxSizeMb"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "SandboxSizeMb"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/persons/{personId}/appTime:
    patch:
      tags:
      - "Customer"
      summary: "Update a Person's AppTime config by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or person does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchPersonAppTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/appTime:
    patch:
      tags:
      - "Customer"
      summary: "Update a Device's AppTime config by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchDeviceAppTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/appTime/ipFlows:
    get:
      tags:
      - "Customer"
      summary: "Get IP flows config"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getAppTimeIpFlows"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch IP flows config"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or device does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchAppTimeIpFlow"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Enable"
      - name: "expiresAt"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "ExpiresAt"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Data Usage Stats for a Device."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDeviceAppTimeCategoriesDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/devices/{mac}/appTime/categories/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Online Time Stats for a Device."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDeviceAppTimeCategoriesOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Data Usage Stats for a Device."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDeviceAppTimeAppsDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/devices/{mac}/appTime/apps/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Online Time Stats for a Device."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or device does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getDeviceAppTimeAppsOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Data Usage Stats for a Person."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getPersonAppTimeCategoriesDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/persons/{personId}/appTime/categories/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Online Time Stats for a Person."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getPersonAppTimeCategoriesOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Data Usage Stats for a Person."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getPersonAppTimeAppsDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/persons/{personId}/appTime/apps/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Online Time Stats for a Person."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or person does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getPersonAppTimeAppsOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "personId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PersonId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Data Usage Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getGuestNetworkAppTimeCategoriesDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/categories/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Online Time Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getGuestNetworkAppTimeCategoriesOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Data Usage Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getGuestNetworkAppTimeAppsDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortals/{networkId}/appTime/apps/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Online Time Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getGuestNetworkAppTimeAppsOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Data Usage Stats for fronthaul network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getEmployeeNetworkAppTimeCategoriesDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/categories/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Online Time Stats for fronthaul network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getEmployeeNetworkAppTimeCategoriesOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Data Usage Stats for fronthaul network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getEmployeeNetworkAppTimeAppsDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/secondaryNetworks/fronthauls/{networkId}/appTime/apps/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Online Time Stats for fronthaul network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getEmployeeNetworkAppTimeAppsOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/networks/{networkId}/gdprData:
    get:
      tags:
      - "Customer"
      summary: "Fetch the Gdpr Captive Portals data for a guest."
      description: "<div><strong>200</strong>: Success, GDPR Captive Portals data\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: location id or secondary\
        \ networks does not exist.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.getGdprCaptivePortalsData"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "email"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "localEndDate"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "LocalEndDate"
      - name: "localStartDate"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "LocalStartDate"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/secondaryNetworks/captivePortal/{networkId}/gdprForget/guests:
    post:
      tags:
      - "Customer"
      summary: "Delete the Gdpr Captive Portals data for a guest."
      description: "<div><strong>200</strong>: Success, GDPR Captive Portals data\
        \ deleted.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>404</strong>: location id or secondary\
        \ networks does not exist.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.deleteGdprCaptivePortalsData"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Data Usage Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDefaultNetworkAppTimeCategoriesDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/wifiNetwork/appTime/categories/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Categories Online Time Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDefaultNetworkAppTimeCategoriesOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of categories to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'overall'|'perTimeSlot'"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/dataUsage:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Data Usage Stats for captivePortal network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDefaultNetworkAppTimeAppsDataUsage"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/wifiNetwork/appTime/apps/onlineTime:
    get:
      tags:
      - "Customer"
      summary: "Fetch the AppTime Apps Online Time Stats for default network."
      description: "<div><strong>200</strong>: Success, AppTime Stats returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id or secondary networks does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDefaultNetworkAppTimeAppsOnlineTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "timePeriod"
        in: "query"
        description: "Any of \"weekly\",\"dailyToday\",\"dailyYesterday\",\"daily2DaysAgo\"\
          ,\"daily3DaysAgo\",\"daily4DaysAgo\",\"daily5DaysAgo\",\"daily6DaysAgo\"\
          ,\"last30Days\",\"last12Months\""
        required: true
        type: "string"
        x-exportParamName: "TimePeriod"
      - name: "limit"
        in: "query"
        description: "Maximum number of apps to return. Defaults to 20"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "grouping"
        in: "query"
        description: "typing of Grouping for the purposes of applying the limit. Can\
          \ be: 'perTimeSlot' ONLY"
        required: false
        type: "string"
        default: "perTimeSlot"
        x-exportParamName: "Grouping"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/rooms:
    get:
      tags:
      - "Customer"
      summary: "Get a Location's Rooms config by location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getLocationRooms"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Create a Room for a Location ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ Devices and Nodes must be defined and mac addresses must be valid.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postRooms"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "name"
        in: "formData"
        description: "name of this Room"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "devices"
        in: "formData"
        description: "mac addresses of devices assigned to this Room"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
        x-optionalDataType: "String"
      - name: "nodes"
        in: "formData"
        description: "nodeIds assigned to this Room"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Nodes"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Room"
  /Customers/{id}/locations/{locationId}/rooms/{roomId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a Room for a location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or Room id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.deleteRoom"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "roomId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoomId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Patch a Room for a Location ID/Room ID."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>422</strong>:\
        \ Devices and Nodes must be defined and mac addresses must be valid.</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.patchRoom"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "roomId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoomId"
      - name: "name"
        in: "formData"
        description: "name of this Room"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "devices"
        in: "formData"
        description: "mac addresses of devices assigned to this Room"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
        x-optionalDataType: "String"
      - name: "nodes"
        in: "formData"
        description: "nodeIds assigned to this Room"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Nodes"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Room"
  /Customers/{id}/locations/{locationId}/managers:
    get:
      tags:
      - "Customer"
      summary: "Get a list of all managers the are assigned to manage your location."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.getManagersListForLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Assign a manager to your location "
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>422</strong>: Invalid email,\
        \ name, access type or manager is already assigned to this location </div>"
      operationId: "Customer.prototype.postManager"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "accessType"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "AccessType"
        x-optionalDataType: "String"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/LocationAccess"
  /Customers/{id}/entitledAccess:
    get:
      tags:
      - "Customer"
      summary: "Get a list of all locations on which you are assigned as a manager."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>422</strong>: Invalid email,\
        \ name, access type or manager is already assigned to this location </div>"
      operationId: "Customer.prototype.getEntitledAccessList"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/managers/{managerId}/resendInvite:
    post:
      tags:
      - "Customer"
      summary: "Resend invite to a manager that has status \"pending\"."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location or Manager does not exist.</div>\n<div><strong>422</strong>: Manager\
        \ already accepted the invite to manage the location </div>"
      operationId: "Customer.prototype.resendManagerInvite"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "managerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ManagerId"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/entitledAccess/{locationId}/accessTokens:
    post:
      tags:
      - "Customer"
      summary: "Get an access token for a location where you are assigned as a manager"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>422</strong>: Invalid email,\
        \ name, access type or manager is already assigned to this location </div>"
      operationId: "Customer.prototype.getAccessTokenForManagedLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/managers/{managerId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete manager access for location and destroy access tokens for that\
        \ manager\"."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location or Manager does not exist.</div>"
      operationId: "Customer.prototype.deleteManagerAccess"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "managerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ManagerId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Update type of access of manager on location."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.patchLocationManager"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "managerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ManagerId"
      - name: "accessType"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "AccessType"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "notificationOptions"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "NotificationOptions"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/blePairingPin:
    get:
      tags:
      - "Customer"
      summary: "Get BLE pairing pin for a node that is claimed by the selected location"
      description: "<div><strong>200</strong>: Success, pin generated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location or node does not exist.</div>\n<div><strong>422</strong>: Invalid\
        \ token. </div>"
      operationId: "Customer.prototype.getNodeBlePairingPin"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "token"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Token"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/networkAccess/blocked/{mac}:
    delete:
      tags:
      - "Customer"
      summary: "Unblock blocked devices"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.unblockDevice"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/networkAccess/blocked:
    post:
      tags:
      - "Customer"
      summary: "Block devices"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.blockDevices"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "macs"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/x-any"
        x-exportParamName: "Macs"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "string"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved/{mac}:
    delete:
      tags:
      - "Customer"
      summary: "Unapprove approved devices in the network"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>404</strong>: Network does\
        \ not exist.</div>\n<div><strong>404</strong>: Device is not approved.</div>"
      operationId: "Customer.prototype.unapproveDevice"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/approved:
    post:
      tags:
      - "Customer"
      summary: "Approve devices in the network"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>404</strong>: Network does\
        \ not exist.</div>"
      operationId: "Customer.prototype.approveDevices"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - in: "body"
        name: "macs"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/x-any"
        x-exportParamName: "Macs"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "string"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}:
    patch:
      tags:
      - "Customer"
      summary: "Enable or disable purgatory in the network"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>404</strong>: Network does\
        \ not exist.</div>"
      operationId: "Customer.prototype.patchNetworkAccessNetwork"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "purgatory"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Purgatory"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/networkAccess/networks:
    get:
      tags:
      - "Customer"
      summary: "Get information about networkAccess networks"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.getNetworkAccessNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NetworkAccessNetwork"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups:
    get:
      tags:
      - "Customer"
      summary: "Get a list of device groups in a network, along with a list of member\
        \ devices and group shares."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>404</strong>: Network does\
        \ not exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>"
      operationId: "Customer.prototype.getDeviceGroups"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
    post:
      tags:
      - "Customer"
      summary: "Create a named device group within a network and optionally specify\
        \ member devices."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>:\
        \ Schema validation failed.</div>\n<div><strong>404</strong>: Location does\
        \ not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n\
        <div><strong>403</strong>: Not allowed to create groups in unsupported networks.</div>\n\
        <div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>:\
        \ Invalid JSON or missing arguments.</div>"
      operationId: "Customer.prototype.postDeviceGroup"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "devices"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkAccessDeviceGroup"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}:
    delete:
      tags:
      - "Customer"
      summary: "Delete a device group from a network."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>:\
        \ Schema validation failed.</div>\n<div><strong>404</strong>: Location does\
        \ not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n\
        <div><strong>403</strong>: Not allowed to delete standalone groups or groups\
        \ in unsupported networks.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n\
        <div><strong>400</strong>: Invalid JSON or missing arguments.</div>"
      operationId: "Customer.prototype.deleteDeviceGroup"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Change a device group name or device members."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>:\
        \ Schema validation failed.</div>\n<div><strong>404</strong>: Location does\
        \ not exist.</div>\n<div><strong>404</strong>: Network does not exist.</div>\n\
        <div><strong>403</strong>: Not allowed to modify standalone groups or groups\
        \ in unsupported networks.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n\
        <div><strong>400</strong>: Invalid JSON or missing arguments.</div>"
      operationId: "Customer.prototype.patchDeviceGroup"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "devices"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/NetworkAccessDeviceGroup"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/deviceGroups/{groupId}/groupShares:
    put:
      tags:
      - "Customer"
      summary: "Share access for a group or employee."
      description: "<p>This endpoint allows for a device in the first network to have\
        \ access to all of the devices in the other group in the second network and/or\
        \ to individual devices in the second network. In other words, by sharing\
        \ access, we're allowing a single device to communicate with other devices\
        \ across networks, by specifying other groups and/or individual devices.</p>\n\
        <div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema\
        \ validation failed.</div>\n<div><strong>422</strong>: Illegal share.</div>\n\
        <div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>:\
        \ Network does not exist.</div>\n<div><strong>404</strong>: Group does not\
        \ exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>:\
        \ Invalid JSON or missing arguments.</div>"
      operationId: "Customer.prototype.shareDeviceGroup"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "GroupId"
      - name: "groups"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Groups"
      - name: "devices"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/networkAccess/networks/{networkId}/devices/{mac}/groupShares:
    put:
      tags:
      - "Customer"
      summary: "Share access to individual device. "
      description: "<p>This endpoint allows for a device in the first network to have\
        \ access to all of the devices in the other group in the second network and/or\
        \ to individual devices in the second network. In other words, by sharing\
        \ access, we're allowing a single device to communicate with other devices\
        \ across networks, by specifying other groups and/or individual devices.</p>\n\
        <div><strong>200</strong>: Success.</div>\n<div><strong>422</strong>: Schema\
        \ validation failed.</div>\n<div><strong>422</strong>: Illegal share.</div>\n\
        <div><strong>404</strong>: Location does not exist.</div>\n<div><strong>404</strong>:\
        \ Network does not exist.</div>\n<div><strong>404</strong>: Group does not\
        \ exist.</div>\n<div><strong>401</strong>: Unauthorized.</div>\n<div><strong>400</strong>:\
        \ Invalid JSON or missing arguments.</div>"
      operationId: "Customer.prototype.shareDevice"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "networkId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "groups"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Groups"
      - name: "devices"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Devices"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/publishSlowChangingDimensionConfigs:
    post:
      tags:
      - "Customer"
      summary: "Publish all slow changing dimension Kafka messages"
      description: "<div><strong>204</strong>: Success.</div>"
      operationId: "Customer.prototype.publishSlowChangingDimensionConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/appEngagementTimer:
    get:
      tags:
      - "Customer"
      summary: "Get information about app engagement timer details for a location"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.getAppEngagementTimer"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/devices/{mac}/qos:
    post:
      tags:
      - "Customer"
      summary: "Set QoS of a single device"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>422</strong>: Prioritization\
        \ is not a valid value.</div>"
      operationId: "Customer.prototype.postDeviceQos"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "prioritization"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Prioritization"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
    patch:
      tags:
      - "Customer"
      summary: "Update QoS of a single device"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>422</strong>: Prioritization\
        \ is not a valid value.</div>"
      operationId: "Customer.prototype.patchDeviceQos"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "prioritization"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Prioritization"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/devices/{mac}/qos/prioritization:
    delete:
      tags:
      - "Customer"
      summary: "Delete prioritization of a single device"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.deleteDeviceQosPrioritization"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/devices/stitch:
    post:
      tags:
      - "Customer"
      summary: "Delete prioritization of a single device"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Unauthorized.</div>\n<div><strong>400</strong>: Missing oldMac or newMac\
        \ field.</div>\n<div><strong>404</strong>: Location does not exist.</div>\n\
        <div><strong>422</strong>: oldMac or newMac is not valid mac.</div>\n<div><strong>422</strong>:\
        \ If oldMac and newMac are the same.</div>"
      operationId: "Customer.prototype.stitchDevice"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "oldMac"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "OldMac"
      - name: "newMac"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "NewMac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/import:
    post:
      tags:
      - "Customer"
      summary: "Import customer data"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Nothing to import.</div>\n<div><strong>422</strong>: Import data is invalid.</div>"
      operationId: "Customer.importData"
      parameters:
      - name: "data"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Data"
      - name: "migratedFrom"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "MigratedFrom"
      - name: "reason"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Reason"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/dpp:
    get:
      tags:
      - "Customer"
      summary: "Get the current DPP configuration for a Location ID."
      description: "<div><strong>200</strong>: Success, current DPP configuration\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patch the DPP configuration mode for a Location ID."
      description: "<div><strong>202</strong>: Success, DPP updated.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ DPP value is invalid.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.patchDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: "auto || enable || disable"
        required: true
        type: "string"
        x-exportParamName: "Mode"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/wifiNetwork/dpp:
    get:
      tags:
      - "Customer"
      summary: "Get the current DPP configurator for a Location ID."
      description: "<div><strong>200</strong>: Success, current DPP configurator returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getWifiNetworkDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    post:
      tags:
      - "Customer"
      summary: "Create the DPP setting for a Location ID."
      description: "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postWifiNetworkDpp"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "enabled"
        in: "formData"
        description: "should we configure dpp for this network - defaults to true"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      - name: "curve"
        in: "formData"
        description: "one of predefined elliptic curves, - optional,  if missing in\
          \ request default to prime256v1"
        required: false
        type: "string"
        x-exportParamName: "Curve"
        x-optionalDataType: "String"
      - name: "privateKey"
        in: "formData"
        description: "privateKey, must also provide public part if present, optional"
        required: false
        type: "string"
        x-exportParamName: "PrivateKey"
        x-optionalDataType: "String"
      - name: "publicKey"
        in: "formData"
        description: "publicKey"
        required: false
        type: "string"
        x-exportParamName: "PublicKey"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/wifiNetwork/dpp/bootstrapUris:
    post:
      tags:
      - "Customer"
      summary: "Create a bootstrap for DPP setting for a wifi network."
      description: "<div><strong>200</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id or wifi network does not exist.</div>\n\
        <div><strong>422</strong>: Invalid curve.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.postWifiNetworkDppBootstrap"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "curve"
        in: "formData"
        description: "one of predefined elliptic curves, - optional,  if missing in\
          \ requset default to prime256v1"
        required: false
        type: "string"
        x-exportParamName: "Curve"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/wifiNetwork/dpp/enrollments:
    post:
      tags:
      - "Customer"
      summary: "Create an enrollment for DPP setting for a wifi network."
      description: "<div><strong>202</strong>: Success, new DPP configurator generated.</div>\n\
        <div><strong>400</strong>: Required fields missing or field type is incorrect.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id or wifi network does not exist.</div>\n\
        <div><strong>404</strong>: Configurator keys for network not found.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.postWifiNetworkDppEnrollment"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "bootstrapUri"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "BootstrapUri"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/nodes/{nodeId}/ethernetLan:
    put:
      tags:
      - "Customer"
      summary: "Updates location nodes with ethernetLan modes"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>\n<div><strong>404</strong>: Node does not\
        \ exist.</div>\n<div><strong>422</strong>: nodeEthernetLan does not exist.</div>"
      operationId: "Customer.prototype.putEthernetLan"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - in: "body"
        name: "nodeEthernetLan"
        required: true
        schema:
          type: "object"
        x-exportParamName: "NodeEthernetLan"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/sniffing:
    get:
      tags:
      - "Customer"
      summary: "Get DNS, HTTP, UPnP and mDNS sniffing toggles for a Location ID."
      description: "<div><strong>200</strong>: Success, current sniffing toggles returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getSniffing"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "Customer"
      summary: "Updates location sniffing toggle modes"
      description: "<div><strong>202</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>404</strong>:\
        \ Location does not exist.</div>"
      operationId: "Customer.prototype.putSniffing"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "dns"
        in: "formData"
        description: "object with property \"mode\": an enum of values which include:\
          \ auto, enable, disable"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Dns"
      - name: "http"
        in: "formData"
        description: "object with property \"mode\": an enum of values which include:\
          \ auto, enable, disable"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Http"
      - name: "upnp"
        in: "formData"
        description: "object with property \"mode\": an enum of values which include:\
          \ auto, enable, disable"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Upnp"
      - name: "mdns"
        in: "formData"
        description: "object with property \"mode\": an enum of values which include:\
          \ auto, enable, disable"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Mdns"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/flowStats:
    get:
      tags:
      - "Customer"
      summary: "GET the flow stats configuration"
      description: "<div><strong>200</strong>: Success, current flow stats configuration\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required or customer\
        \ id not found.</div>\n<div><strong>404</strong>: location id does not exist.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getFlowStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Customer"
      summary: "Patches the flow stats configuration"
      description: "<div><strong>202</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Input value is invalid.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Customer.prototype.patchFlowStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "iotDeviceConfig"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "IotDeviceConfig"
        x-optionalDataType: "String"
      - name: "screenDeviceConfig"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "ScreenDeviceConfig"
        x-optionalDataType: "String"
      - name: "lanIotDeviceConfig"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "LanIotDeviceConfig"
        x-optionalDataType: "String"
      - name: "interfaceStatsConfig"
        in: "formData"
        description: "auto || enable || disable"
        required: false
        type: "string"
        x-exportParamName: "InterfaceStatsConfig"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/v2/configAndState:
    get:
      tags:
      - "Customer"
      summary: "Gets all the configs from Overlord for a specified location."
      description: "<div><strong>200</strong>: Success, got the data.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.getLocationOverlordConfigs"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/config/appQoe:
    delete:
      tags:
      - "Customer"
      summary: "Resets a appQoe config. AppQoe is to monitor the Quality of Experience\
        \ of these Apps in the house, which is what this PRD covers. This QoE monitoring\
        \ will allow CSPs understand likely issues with applications."
      description: "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.overlordDeleteAppQoeConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Updates a appQoe config. AppQoe is to monitor the Quality of Experience\
        \ of these Apps in the house, which is what this PRD covers. This QoE monitoring\
        \ will allow CSPs understand likely issues with applications."
      description: "<div><strong>202</strong>: Success, accepted and forwarded the\
        \ data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.overlordUpdateAppQoeConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/config/flowCache:
    delete:
      tags:
      - "Customer"
      summary: "Resets a flowCache config. Enable/disable Flow Cache to help support\
        \ devQA to check influence on the first stage of the investigation."
      description: "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.overlordDeleteFlowCacheConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Updates a flowCache config. Enable/disable Flow Cache to help support\
        \ devQA to check influence on the first stage of the investigation."
      description: "<div><strong>202</strong>: Success, accepted and forwarded the\
        \ data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.overlordUpdateFlowCacheConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "enable"
        in: "formData"
        description: " boolean"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/config/samKnows:
    delete:
      tags:
      - "Customer"
      summary: "Resets a samKnows config. SamKnows is a provider of internet performance\
        \ measurement services. They offer the SamKnows Router Agent, which supports\
        \ a range of QoS and QoE performance measurements. These measurements can\
        \ be executed both on an ad-hoc and scheduled basis."
      description: "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.overlordDeleteSamKnowsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Updates a samKnows config. SamKnows is a provider of internet performance\
        \ measurement services. They offer the SamKnows Router Agent, which supports\
        \ a range of QoS and QoE performance measurements. These measurements can\
        \ be executed both on an ad-hoc and scheduled basis."
      description: "<div><strong>202</strong>: Success, accepted and forwarded the\
        \ data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.overlordUpdateSamKnowsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/config/sipAlg:
    delete:
      tags:
      - "Customer"
      summary: "Resets a sipAlg config. sipAlg is an application within many routers.\
        \ It inspects any VoIP traffic to prevent problems caused by firewalls and\
        \ if necessary modifies the VoIP packets."
      description: "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.overlordDeleteSipAlgConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Updates a sipAlg config. sipAlg is an application within many routers.\
        \ It inspects any VoIP traffic to prevent problems caused by firewalls and\
        \ if necessary modifies the VoIP packets."
      description: "<div><strong>202</strong>: Success, accepted and forwarded the\
        \ data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.overlordUpdateSipAlgConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mode"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "Mode"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/config/stats:
    delete:
      tags:
      - "Customer"
      summary: "Resets a stats config. Location Stats configuration, used to toggle\
        \ which stats should be collected."
      description: "<div><strong>202</strong>: Success, reset.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.overlordDeleteStatsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Updates a stats config. Location Stats configuration, used to toggle\
        \ which stats should be collected."
      description: "<div><strong>202</strong>: Success, accepted and forwarded the\
        \ data.</div>\n<div><strong>400</strong>: Required fields missing.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Location id, does not exist.</div>\n<div><strong>422</strong>:\
        \ Invalid data.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.overlordUpdateStatsConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "offChannelScan24"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "OffChannelScan24"
        x-optionalDataType: "String"
      - name: "offChannelScan50"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "OffChannelScan50"
        x-optionalDataType: "String"
      - name: "offChannelScan60"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "OffChannelScan60"
        x-optionalDataType: "String"
      - name: "clientAuthFails"
        in: "formData"
        description: " string enum: [ AUTO, ENABLE, DISABLE ]"
        required: false
        type: "string"
        x-exportParamName: "ClientAuthFails"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/migration:
    get:
      tags:
      - "Customer"
      summary: "Returns cloud migration status for customer"
      description: "<div><strong>200</strong>: Success, return the search result.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Customer does not exist.</div>"
      operationId: "Customer.prototype.migrationStatus"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/command:
    get:
      tags:
      - "Customer"
      summary: "Returns list of linked command accounts for the location"
      description: "<div><strong>200</strong>: Success, return the  list of linked\
        \ command accounts.</div>\n<div><strong>401</strong>: Authorization required</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCommands"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
    put:
      tags:
      - "Customer"
      summary: "Returns cloud migration status for customer"
      description: "<div><strong>204</strong>: Success, no content.</div>\n<div><strong>400</strong>:\
        \ Missing providerId body parameter</div>\n<div><strong>401</strong>: Authorization\
        \ required or customer id not found</div>\n<div><strong>409</strong>: Accounts\
        \ are already linked for providerId</div>\n<div><strong>422</strong>: Invalid\
        \ providerId</div>"
      operationId: "Customer.prototype.putCommand"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "providerId"
        in: "formData"
        description: "enum to identify provider ex. commandAlexa"
        required: true
        type: "string"
        x-exportParamName: "ProviderId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
    patch:
      tags:
      - "Customer"
      summary: "Returns cloud migration status for customer"
      description: "<div><strong>204</strong>: Success, no content.</div>\n<div><strong>400</strong>:\
        \ Missing providerId or providerUserId body parameter</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>409</strong>:\
        \ Accounts are already linked for providerUserId</div>\n<div><strong>422</strong>:\
        \ Unfinished document for providerId does not exist</div>"
      operationId: "Customer.prototype.patchCommand"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "providerId"
        in: "formData"
        description: "enum to identify provider ex. commandAlexa"
        required: true
        type: "string"
        x-exportParamName: "ProviderId"
      - name: "providerUserId"
        in: "formData"
        description: "id of the user in provider's system"
        required: true
        type: "string"
        x-exportParamName: "ProviderUserId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/command/devices/freeze:
    put:
      tags:
      - "Customer"
      summary: "Sets autoExpire or freezeTemplateId suspend for specified mac addresses"
      description: "<div><strong>200</strong>: Succcess, updated</div>\n<div><strong>401</strong>:\
        \ Unathorized</div>\n<div><strong>404</strong>: Mac not found</div>\n<div><strong>422</strong>:\
        \ Invalid freezeTemplateID</div>\n<div><strong>500</strong>: Internal Server\
        \ Error</div>"
      operationId: "Customer.prototype.putDevicesFreezeCommand"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - in: "body"
        name: "devices"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/x-any"
        x-exportParamName: "Devices"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Customers/{id}/locations/{locationId}/primarySecondaryNetworks:
    get:
      tags:
      - "Customer"
      summary: "Get networks for wpa3 transition flow"
      description: "<div><strong>200</strong>: Success, returns the data</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ location id or wifiNetwork does not exist</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getPrimarySecondaryNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    put:
      tags:
      - "Customer"
      summary: "Set networks at wpa3 transition flow"
      description: "<div><strong>202</strong>: Success, accepted the data</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>500</strong>: Internal server\
        \ error</div>"
      operationId: "Customer.prototype.setPrimarySecondaryNetworks"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "wpa3ssid"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Wpa3ssid"
        x-optionalDataType: "String"
      - name: "wpa3encryptionKey"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "Wpa3encryptionKey"
        x-optionalDataType: "String"
      - name: "wpa3enabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Wpa3enabled"
        x-optionalDataType: "Bool"
      - name: "wpa2ssid"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Wpa2ssid"
        x-optionalDataType: "String"
      - name: "wpa2enabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Wpa2enabled"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "202":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/primarySecondaryNetworks/wpa3ssid/invitations:
    post:
      tags:
      - "Customer"
      summary: "Update home devices visible to guests."
      description: "<div><strong>200</strong>: Success, Invitation returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: Customer id, location id</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Customer.prototype.getSecondaryNetworkInvitation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Invitation"
  /Customers/{id}/locations/{locationId}/overlord/resync:
    put:
      tags:
      - "Customer"
      summary: "Push Secondary Network Configurations to Overlord."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putOverlordResync"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/suspend:
    put:
      tags:
      - "Customer"
      summary: "PUT GroupOfUnassignedDevices suspend for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putGroupOfUnassignedDevicesFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete GroupOfUnassignedDevices suspend for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeSuspend"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/forever:
    put:
      tags:
      - "Customer"
      summary: "PUT GroupOfUnassignedDevices forever for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putGroupOfUnassignedDevicesFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete GroupOfUnassignedDevices forever freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeForever"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/{freezeTemplateId}:
    post:
      tags:
      - "Customer"
      summary: "POST GroupOfUnassignedDevices to be frozen for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>404</strong>: Freeze Template\
        \ Id not found.</div>\n<div><strong>409</strong>: Freeze Template Id already\
        \ applied.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.postGroupOfUnassignedDevicesFreezeTemplateId"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are uuids"
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete GroupOfUnassignedDevices uuid freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeTemplateId"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "freezeTemplateId"
        in: "path"
        description: "Valid templates are uuids"
        required: true
        type: "string"
        x-exportParamName: "FreezeTemplateId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezes:
    delete:
      tags:
      - "Customer"
      summary: "Delete All GroupOfUnassignedDevices freeze except autoExpire for a\
        \ Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteGroupOfUnassignedDevicesFreezes"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freeze/autoExpire:
    put:
      tags:
      - "Customer"
      summary: "Put GroupOfUnassignedDevices autoExpire freeze for a Location ID."
      description: "<div><strong>200</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.putGroupOfUnassignedDevicesFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "expiresAt"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "ExpiresAt"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "Customer"
      summary: "Delete GroupOfUnassignedDevices autoExpire freeze for a Location ID."
      description: "<div><strong>204</strong>: Success, updated.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.deleteGroupOfUnassignedDevicesFreezeAutoExpire"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/groupOfUnassignedDevices/freezePolicy:
    get:
      tags:
      - "Customer"
      summary: "Get GroupOfUnassignedDevices freeze policy for a Location ID."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found.</div>\n<div><strong>404</strong>:\
        \ Location id, does not exist.</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Customer.prototype.getGroupOfUnassignedDevicesFreezePolicy"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/disable:
    put:
      tags:
      - "Customer"
      summary: "Disable customer from logging in until their account is reactivated."
      description: "<div><strong>204</strong>: Customer has been disabled.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Customer does not exist.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.disableLogin"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "triggerReset"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "TriggerReset"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/enable:
    put:
      tags:
      - "Customer"
      summary: "Enable customer log in, after it has been disabled."
      description: "<div><strong>204</strong>: Customer has been enabled.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ Customer does not exist.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Customer.prototype.enableLogin"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/auditTrail:
    get:
      tags:
      - "Customer"
      summary: "Get audit trail for a customer."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Customer id, does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Customer.prototype.getAuditTrailForCustomer"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/auditTrail:
    get:
      tags:
      - "Customer"
      summary: "Get audit trail for location."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id, does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Customer.prototype.getAuditTrailForLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/fastInterference:
    get:
      tags:
      - "Customer"
      summary: "Get from Controller Fast interference status."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id, does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Customer.prototype.getFastInterference"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoeMetrics:
    get:
      tags:
      - "Customer"
      summary: "Device or pod QoE 15 minutes data."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceQoeMetrics"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "device mac address"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "granularity"
        in: "query"
        description: "days/hours/minutes"
        required: false
        type: "string"
        default: "days"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "X # of days/hours/minutes"
        required: false
        type: "number"
        default: 7.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "timestampISOFormat"
        in: "query"
        description: "either timestamp utc number or ISO string"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "TimestampISOFormat"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringStats:
    get:
      tags:
      - "Customer"
      summary: "Device client steering stats with all nodes for a particular MAC address."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceClientSteeringStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "location id of devices and nodes"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac id of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "granularity"
        in: "query"
        description: "days/hours/minutes"
        required: false
        type: "string"
        default: "days"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "X # of days/hours/minutes"
        required: false
        type: "number"
        default: 7.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "start"
        in: "query"
        description: "number of milliseconds elapsed since 1 January 1970 00:00:00\
          \ UTC. Defaults to now - (limit * granularity)"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Start"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/bandSteeringStats:
    get:
      tags:
      - "Customer"
      summary: "Device band steering stats with all nodes for a particular MAC address."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceBandSteeringStats"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        description: "location id of devices and nodes"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac id of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "granularity"
        in: "query"
        description: "days/hours/minutes"
        required: false
        type: "string"
        default: "days"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "X # of days/hours/minutes"
        required: false
        type: "number"
        default: 7.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "start"
        in: "query"
        description: "number of milliseconds elapsed since 1 January 1970 00:00:00\
          \ UTC. Defaults to now - (limit * granularity)"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Start"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/clientSteeringTriggers:
    get:
      tags:
      - "Customer"
      summary: "Find all instances of the model."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceSteeringWithAthena"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "order"
        in: "query"
        description: "desc || asc"
        required: false
        type: "string"
        default: "desc"
        x-exportParamName: "Order"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "1000 max for deep:false and 10 max for deep:true"
        required: false
        type: "number"
        default: 10.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "startAt"
        in: "query"
        description: "find objects after this value"
        required: false
        type: "string"
        x-exportParamName: "StartAt"
        x-optionalDataType: "String"
      - name: "endAt"
        in: "query"
        description: "find objects before this value"
        required: false
        type: "string"
        x-exportParamName: "EndAt"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/liveModeStream:
    get:
      tags:
      - "Customer"
      summary: "Device or pod QoE live mode data."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getQoe1Minute"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac address or pod id"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "startTime"
        in: "query"
        description: "start timestamp"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Float64"
      - name: "timestampISOFormat"
        in: "query"
        description: "either timestamp utc number or ISO string"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "TimestampISOFormat"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/qoe/superLiveModeStream:
    get:
      tags:
      - "Customer"
      summary: "Device or pod QoE super live mode data."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getQoeSeconds"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac address or pod id"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "startTime"
        in: "query"
        description: "start timestamp"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Float64"
      - name: "timestampISOFormat"
        in: "query"
        description: "either timestamp utc number or ISO string"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "TimestampISOFormat"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/qoe:
    get:
      tags:
      - "Customer"
      summary: "Get QoE recent 1 minute data for a whole location."
      operationId: "Customer.prototype.getLocationQoe"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/devices/{mac}/alarms:
    get:
      tags:
      - "Customer"
      summary: "Device alarm history graph array for a particular MAC address."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDeviceAlarms"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        description: "mac id of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "coverageAlarmThreshold"
        in: "query"
        description: "a coverage alarm will be returned (value=1) when rssi_alarm_penalty_count\
          \ >= this value"
        required: false
        type: "string"
        default: "1"
        x-exportParamName: "CoverageAlarmThreshold"
        x-optionalDataType: "String"
      - name: "granularity"
        in: "query"
        description: "days/hours/minutes"
        required: false
        type: "string"
        default: "days"
        x-exportParamName: "Granularity"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "X # of days/hours/minutes"
        required: false
        type: "number"
        default: 7.0
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "start"
        in: "query"
        description: "number of milliseconds elapsed since 1 January 1970 00:00:00\
          \ UTC. Defaults to now - (limit * granularity)"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Start"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/flex/dashboard:
    get:
      tags:
      - "Customer"
      summary: "Daily/Weekly/Monthly device usage summary report based on location"
      operationId: "Customer.prototype.getDashboard"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "macs"
        in: "query"
        description: "mac list of all devices in the location"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Macs"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/groups:
    get:
      tags:
      - "Customer"
      operationId: "Customer.prototype.getGroups"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/devices/{mac}/resniff:
    post:
      tags:
      - "Customer"
      summary: "Re-enables deviceType sniffing for a particular device."
      description: "<div><strong>204</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found.</div>\n\
        <div><strong>404</strong>: location id, does not exist.</div>\n<div><strong>404</strong>:\
        \ No device found with provided mac address</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.enableDeviceTypeSniffing"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Customers/{id}/locations/{locationId}/devices/{mac}/tos:
    get:
      tags:
      - "Customer"
      summary: "Describes the current state of TOS for the given client."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id, does\
        \ not exist.</div>\n<div><strong>404</strong>: No device found with provided\
        \ mac address</div>\n<div><strong>422</strong>: Invalid MAC.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.getTos"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/devices/{mac}/tos/reset:
    post:
      tags:
      - "Customer"
      summary: "Resets the back-off and thresholds for the given client."
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id, does\
        \ not exist.</div>\n<div><strong>404</strong>: No device found with provided\
        \ mac address</div>\n<div><strong>422</strong>: Invalid MAC.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Customer.prototype.resetTos"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "LocationId"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/customerSupportConfigurations:
    get:
      tags:
      - "Customer"
      summary: "Returns partner customer support configuration."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getCustomerSupportConfigurations"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/taskStatuses:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all task statuses of nodes from controller"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getTaskStatuses"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/dpp/announcements:
    get:
      tags:
      - "Customer"
      summary: "Returns DPP announcements from controller"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.getDppAnnouncementsFromController"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/kvStates:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all kvStates on a particular Node for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>422</strong>:\
        \ nodeId must be defined.</div>\n<div><strong>425</strong>: nodeId must belong\
        \ to the location.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Customer.prototype.getLocationKvStates"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/vlanServices:
    get:
      tags:
      - "Customer"
      summary: "Returns vlanServices from Customer location state"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "Customer.prototype.vlanServices"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /Customers/{id}/locations/{locationId}/firmware/modules:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all firmaware modules for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getModulesFromController"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Customers/{id}/locations/{locationId}/securityPolicy/realizedState:
    get:
      tags:
      - "Customer"
      summary: "Retrieve all securityStates for a Location ID."
      description: "<div><strong>200</strong>: Success, your new info looks good.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Customer.prototype.getSecurityRealizedStates"
      parameters:
      - name: "id"
        in: "path"
        description: "Customer id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/invitations/{fk}:
    get:
      tags:
      - "Location"
      summary: "Find a related item by id for invitations."
      operationId: "Location.prototype.__findById__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for invitations"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Invitation"
    put:
      tags:
      - "Location"
      summary: "Update a related item by id for invitations."
      operationId: "Location.prototype.__updateById__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for invitations"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/Invitation"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Invitation"
    delete:
      tags:
      - "Location"
      summary: "Delete a related item by id for invitations."
      operationId: "Location.prototype.__destroyById__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for invitations"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/_pendingWhitelistRequests/{fk}:
    get:
      tags:
      - "Location"
      summary: "Find a related item by id for _pendingWhitelistRequests."
      operationId: "Location.prototype.__findById___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for _pendingWhitelistRequests"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PendingWhitelistRequests"
    put:
      tags:
      - "Location"
      summary: "Update a related item by id for _pendingWhitelistRequests."
      operationId: "Location.prototype.__updateById___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for _pendingWhitelistRequests"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PendingWhitelistRequests"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PendingWhitelistRequests"
    delete:
      tags:
      - "Location"
      summary: "Delete a related item by id for _pendingWhitelistRequests."
      operationId: "Location.prototype.__destroyById___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "fk"
        in: "path"
        description: "Foreign key for _pendingWhitelistRequests"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Fk"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/nodes:
    get:
      tags:
      - "Location"
      summary: "Queries nodes of Location."
      operationId: "Location.prototype.__get__nodes"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"
    post:
      tags:
      - "Location"
      summary: "Claim all nodes for a Location ID."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required nodes field is missing.</div>\n<div><strong>422</strong>: Request\
        \ contain wrong value or exceded the max number of 32 pods to claim.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.claimMultipleNodes"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "nodes"
        in: "formData"
        description: "array of serialNumber/ids"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Nodes"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/invitations:
    get:
      tags:
      - "Location"
      summary: "Queries invitations of Location."
      operationId: "Location.prototype.__get__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Invitation"
    post:
      tags:
      - "Location"
      summary: "Creates a new instance in invitations of this model."
      operationId: "Location.prototype.__create__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/Invitation"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Invitation"
    delete:
      tags:
      - "Location"
      summary: "Deletes all invitations of this model."
      operationId: "Location.prototype.__delete__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/invitations/count:
    get:
      tags:
      - "Location"
      summary: "Counts invitations of Location."
      operationId: "Location.prototype.__count__invitations"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Locations/{id}/_pendingWhitelistRequests:
    get:
      tags:
      - "Location"
      summary: "Queries _pendingWhitelistRequests of Location."
      operationId: "Location.prototype.__get___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PendingWhitelistRequests"
    post:
      tags:
      - "Location"
      summary: "Creates a new instance in _pendingWhitelistRequests of this model."
      operationId: "Location.prototype.__create___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PendingWhitelistRequests"
        x-exportParamName: "Data"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PendingWhitelistRequests"
    delete:
      tags:
      - "Location"
      summary: "Deletes all _pendingWhitelistRequests of this model."
      operationId: "Location.prototype.__delete___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/_pendingWhitelistRequests/count:
    get:
      tags:
      - "Location"
      summary: "Counts _pendingWhitelistRequests of Location."
      operationId: "Location.prototype.__count___pendingWhitelistRequests"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Locations/{id}:
    get:
      tags:
      - "Location"
      summary: "Find a model instance by {{id}} from the data source."
      operationId: "Location.findById"
      parameters:
      - name: "id"
        in: "path"
        description: "Model id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        description: "Filter defining fields and include - must be a JSON-encoded\
          \ string ({\"something\":\"value\"})"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Location"
    patch:
      tags:
      - "Location"
      summary: "Update uprise value for the location"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: location id, does\
        \ not exist.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.patchUpriseOrFlex"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "uprise"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Uprise"
        x-optionalDataType: "Bool"
      - name: "flex"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Flex"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations:
    get:
      tags:
      - "Location"
      summary: "Find all instances of the model matched by filter from the data source."
      operationId: "Location.find"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter defining fields, where, include, order, offset, and limit\
          \ - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"\
          }}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
  /Locations/count:
    get:
      tags:
      - "Location"
      summary: "Count instances of the model matched by where from the data source."
      operationId: "Location.count"
      parameters:
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Locations/{id}/backhaul:
    get:
      tags:
      - "Location"
      operationId: "Location.prototype.getBackhaul"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "locationId"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "LocationId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/checkCustomerLoginToTurnOffWifi:
    post:
      tags:
      - "Location"
      summary: "Turn off WIfi Radio if no app login found for a customer"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.checkCustomerLoginToTurnOffWifi"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/mobileAppSignInRequired:
    patch:
      tags:
      - "Location"
      summary: "Patch mobileAppSignInRequired object handling the wifi disabling timer"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ mobileAppSignInRequired is not configured for this location</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>429</strong>:\
        \ This location has already cancelled app engagement timer</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.patchMobileAppSignInRequired"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "state"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "State"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/forceGraph:
    get:
      tags:
      - "Location"
      summary: "Vertices[] and edges[] used to display a Network Topology."
      description: "<div>The data used to initialize and dynamically display and update\
        \ a Topology.</div>\n<div>Can also be used to get a network's list of nodes\
        \ + devices (a.k.a. vertices) and links (a.k.a., edges).</div><div>&nbsp;</div>\n\
        <div><strong>200</strong>: Success, graph structure returned.</div>\n<div><strong>404</strong>:\
        \ customer id or location id does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.getForceGraph"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "allSSIDs"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "AllSSIDs"
        x-optionalDataType: "Bool"
      - name: "showPartnerComponent"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ShowPartnerComponent"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/gatewayAccount:
    get:
      tags:
      - "Location"
      summary: "Get AccountID and GatwewayID of a location"
      description: "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n\
        <div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>:\
        \ Internal Server error</div>"
      operationId: "Location.prototype.getGatewayAccount"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/devices/{mac}:
    get:
      tags:
      - "Location"
      summary: "Get the name and icon of device by mac lookup"
      description: "<div>To be used by notification for fetching device name and icon.</div>\n\
        <div><strong>200</strong>: Success, device details returned.</div>\n<div><strong>404</strong>:\
        \ Location ID or Device mac not found</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Location.prototype.getDevicesByMacName"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/devices/{mac}/detailsWithSsid:
    get:
      tags:
      - "Location"
      summary: "Get device parameters by mac id and the ssid by networkId"
      description: "<div>To be used by notification for fetching device name and icon.</div>\n\
        <div><strong>200</strong>: Success, device details returned.</div>\n<div><strong>404</strong>:\
        \ Location ID, Device mac or Network id not found</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.deviceDetailsWithSsid"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "path"
        description: "mac of device"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "networkId"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/rooms/search/{search}:
    get:
      tags:
      - "Location"
      summary: "Internal integration use only: Search to identify if the node or device\
        \ is assigned to a room."
      description: "<div>To be used by Notification API for fetching Room info.</div>\n\
        <div><strong>200</strong>: Success, room details returned.</div>\n<div><strong>404</strong>:\
        \ Location, device or node not found</div>\n<div><strong>500</strong>: Internal\
        \ server error</div>"
      operationId: "Location.prototype.findRoomByNodeIdNodeMacAndDeviceMac"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "search"
        in: "path"
        description: "Node ID (Serial Number), Node WiFi Radio Mac, or Device Mac"
        required: true
        type: "string"
        x-exportParamName: "Search"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/homeAway:
    get:
      tags:
      - "Location"
      summary: "Get the homeAway configs to use for a location"
      description: "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n\
        <div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>:\
        \ Internal Server error</div>"
      operationId: "Location.prototype.getHomeAwayConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/appTime:
    get:
      tags:
      - "Location"
      summary: "Get the appTime configs to use for a location"
      description: "<div><strong>200</strong>: Success, accountID and gatewayID returned.</div>\n\
        <div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>:\
        \ Internal Server error</div>"
      operationId: "Location.prototype.getAppTime"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist:
    post:
      tags:
      - "Location"
      summary: "Update a Device's Anomaly Security Policy for a location ID to include\
        \ a blacklisted website."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Required fields missing or field type is incorrect.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, or Device does not exist and is not known to Plume</div>\n\
        <div><strong>422</strong>: DNS value is invalid.</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "Location.prototype.postDeviceSecurityPolicyAnomalyBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "deviceType"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "DeviceType"
      - name: "fqdn"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Fqdn"
      - name: "ipv4"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Ipv4"
        x-optionalDataType: "String"
      - name: "ipv6"
        in: "formData"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Ipv6"
        x-optionalDataType: "String"
      - name: "ttl"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Ttl"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/devices/{mac}/securityPolicy/anomaly/websites/blacklist/{fqdn}:
    delete:
      tags:
      - "Location"
      summary: "Update a Location's Anomaly Security Policy for a location ID to remove\
        \ a blacklisted DNS entry."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Location id, WifiNetwork, Device or DNS does not exist and is not known\
        \ to Plume</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Location.prototype.deleteDeviceSecurityPolicyAnomalyBlacklist"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mac"
      - name: "fqdn"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Fqdn"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/homeSecurity:
    get:
      tags:
      - "Location"
      summary: "Fetch the home security configuration for this location"
      description: "<div><strong>200</strong>: Success, HomeSecurity object returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.getHomeSecurity"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
    patch:
      tags:
      - "Location"
      summary: "Enable/disable live motion streaming and/or motion events for this\
        \ location"
      description: "<div><strong>200</strong>: Success, updated HomeSecurity object\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n\
        <div><strong>404</strong>: location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.patchHomeSecurity"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "source"
        in: "formData"
        description: "Source of patch request; must be one of \"user\" or \"geofence\""
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      - name: "liveMotionEnabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "LiveMotionEnabled"
        x-optionalDataType: "Bool"
      - name: "motionEventsEnabled"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "MotionEventsEnabled"
        x-optionalDataType: "Bool"
      - name: "homeAwayActive"
        in: "formData"
        description: "Enable/disable motion events based on location Homeaway state"
        required: false
        type: "boolean"
        x-exportParamName: "HomeAwayActive"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
  /Locations/{id}/homeSecurity/sensitivity:
    patch:
      tags:
      - "Location"
      summary: "Configure motion event configuration for this location"
      description: "<div><strong>200</strong>: Success, updated HomeSecurity object\
        \ returned.</div>\n<div><strong>401</strong>: Authorization required</div>\n\
        <div><strong>404</strong>: location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.patchHomeSecuritySensitivity"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "cooldown"
        in: "formData"
        description: "sets required rest period for motion detected events to end,\
          \ in seconds"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Cooldown"
        x-optionalDataType: "Float64"
      - name: "petMode"
        in: "formData"
        description: "adjusts sensitivity of motion detected events for pets; must\
          \ be one of \"none\", \"under10\", \"10to30\", \"over30\" and can only be\
          \ set if sensitivity = high"
        required: false
        type: "string"
        x-exportParamName: "PetMode"
        x-optionalDataType: "String"
      - name: "sensitivity"
        in: "formData"
        description: "adjusts sensitivity of motion detected events; must be one of\
          \ \"low\", \"medium\", \"high\""
        required: false
        type: "string"
        x-exportParamName: "Sensitivity"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/HomeSecurity"
  /Locations/{id}/homeSecurity/motionHistory:
    get:
      tags:
      - "Location"
      summary: "Fetch the motion density history for this location"
      description: "<div><strong>200</strong>: Success, motion density array returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.getMotionHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "bucket"
        in: "query"
        description: "number of seconds\nin density calculation window; returned data\
          \ points represent % of non-zero intensity values in the window"
        required: false
        type: "number"
        default: 3600.0
        format: "double"
        x-exportParamName: "Bucket"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Locations/{id}/homeSecurity/motionHistory/state:
    get:
      tags:
      - "Location"
      summary: "Fetch the motion state history for this location"
      description: "<div><strong>200</strong>: Success, motion state array returned\
        \ (Each element of the array is in the form [\"val\", \"unix_ts\"], where\
        \ \"val\" is one of: \n<div>0 - Not armed, not tripped</div>\n<div>1 - Not\
        \ armed, tripped</div>\n<div>2 - Armed, not tripped</div>\n<div>3 - Armed,\
        \ tripped</div></div>\n<div><strong>401</strong>: Authorization required</div>\n\
        <div><strong>404</strong>: location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.getMotionStateHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "bucket"
        in: "query"
        description: "number of seconds\nin density calculation window; returned data\
          \ points represent % of non-zero intensity values in the window"
        required: false
        type: "number"
        default: 3600.0
        format: "double"
        x-exportParamName: "Bucket"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Locations/{id}/homeSecurity/events/history:
    get:
      tags:
      - "Location"
      summary: "Fetch the event history for this location"
      description: "<div><strong>200</strong>: Success, event array returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.getEventHistory"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "from"
        in: "query"
        description: "UTC unix ts"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "From"
        x-optionalDataType: "Float64"
      - name: "to"
        in: "query"
        description: "UTC unix ts, defaults to now"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "To"
        x-optionalDataType: "Float64"
      - name: "category"
        in: "query"
        description: "Filter events by category (Motion or Plume [config changes]).\
          \ Multiple categories can be passed as a comma-separated string. Default\
          \ is both."
        required: false
        type: "string"
        x-exportParamName: "Category"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Maximum number of events to return; defaults to 10"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "sort"
        in: "query"
        description: "whether the returned events will be post-sorted by timestamp"
        required: false
        type: "boolean"
        x-exportParamName: "Sort"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              type: "object"
              properties: {}
  /Locations/{id}/homeSecurity/devices/sounding:
    get:
      tags:
      - "Location"
      summary: "Fetch the sounding states for eligible devices in this location"
      description: "<div><strong>200</strong>: Success, device sounding states returned.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Location id does not exist and is not known to\
        \ Plume</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.getDeviceSoundingState"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "mac"
        in: "query"
        description: "Optional mac address for single device lookup (fetches all devices\
          \ by default)"
        required: false
        type: "string"
        x-exportParamName: "Mac"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "Location"
      summary: "Patch the sounding states for the given devices"
      description: "<div><strong>200</strong>: Success, device sounding states returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ Location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.patchDeviceSoundingState"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "soundingStates"
        required: true
        schema:
          type: "object"
        x-exportParamName: "SoundingStates"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/wifiMotion:
    get:
      tags:
      - "Location"
      summary: "Get WifiMotion config for this location"
      description: "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.getWifiMotion"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiMotion"
    patch:
      tags:
      - "Location"
      summary: "Enable/disable WifiMotion feature for this location"
      description: "<div><strong>200</strong>: Success, updated object returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.patchWifiMotion"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "auto"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Auto"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/WifiMotion"
  /Locations/{id}/nasRedirect:
    get:
      tags:
      - "Location"
      summary: "Handle proxy redirects from walled-garden networks requesting network\
        \ access"
      description: "<div><strong>200</strong>: Success, redirect URL returned.</div>\n\
        <div><strong>404</strong>: Location does not exist</div>\n<div><strong>500</strong>:\
        \ Internal Server error</div>"
      operationId: "Location.prototype.nasRedirect"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "proxy"
        in: "query"
        description: "client IP address"
        required: true
        type: "string"
        x-exportParamName: "Proxy"
      - name: "proxyMac"
        in: "query"
        description: "client MAC address"
        required: true
        type: "string"
        x-exportParamName: "ProxyMac"
      - name: "nodeMac"
        in: "query"
        description: "gateway MAC address"
        required: true
        type: "string"
        x-exportParamName: "NodeMac"
      - name: "ssid"
        in: "query"
        description: "guest SSID client is attempting to join"
        required: true
        type: "string"
        x-exportParamName: "Ssid"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/summary:
    get:
      tags:
      - "Location"
      summary: "Get the locationSummary for this location"
      description: "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.getLocationSummary"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/geoIp:
    put:
      tags:
      - "Location"
      summary: "Update raw Geo IP information for the location"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: location id, does\
        \ not exist.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.putGeoIp"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - in: "body"
        name: "geoIp"
        required: false
        schema:
          type: "object"
        x-exportParamName: "GeoIp"
        x-optionalDataType: "Interface{}"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/resyncLocation:
    put:
      tags:
      - "Location"
      summary: "Trigger Controller to refresh all Customer mongo data for a Location\
        \ ID."
      description: "<div><strong>200</strong>: Success, triggered right way.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>404</strong>:\
        \ location id, does not exist.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Location.prototype.putResyncLocation"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_12"
  /Locations/{id}/nodes/{nodeId}:
    delete:
      tags:
      - "Location"
      summary: "Unclaim a particular Node from a Location with the option of preserving\
        \ the original Package ID."
      description: "<div><strong>204</strong>: Success, a job well done.</div>\n<div><strong>400</strong>:\
        \ Pod already unclaimed.</div>\n<div><strong>401</strong>: Authorization required\
        \ </div>\n<div><strong>403</strong>: the node is online, and can not be unclaimed.<br/>\n\
        <div><strong>404</strong>: location id not found, nodeId missing from URL,<br/>\
        \ or location has zero owned pods.</div>\n<div><strong>500</strong>: internal\
        \ server error</div>"
      operationId: "Location.prototype.unclaimNode"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "preservePackId"
        in: "formData"
        description: "Whether or not packId should remain the same"
        required: false
        type: "boolean"
        x-exportParamName: "PreservePackId"
        x-optionalDataType: "Bool"
      - name: "forceUnclaim"
        in: "formData"
        description: "Unclaim regardless of pod connectivity"
        required: false
        type: "boolean"
        x-exportParamName: "ForceUnclaim"
        x-optionalDataType: "Bool"
      - name: "purgeGroupIds"
        in: "formData"
        description: "Whether or not groupIds should be kept on the node"
        required: false
        type: "boolean"
        x-exportParamName: "PurgeGroupIds"
        x-optionalDataType: "Bool"
      - name: "removeAccountId"
        in: "formData"
        description: "delete account id on the inventory node"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "RemoveAccountId"
        x-optionalDataType: "Bool"
      - name: "unclaimReason"
        in: "formData"
        description: "Used by controller to determine what actions to take for nodeClaimChanged"
        required: false
        type: "string"
        x-exportParamName: "UnclaimReason"
        x-optionalDataType: "String"
      - name: "incrementFactoryResetCounter"
        in: "formData"
        description: "Whether or not to increment the factory reset counter"
        required: false
        type: "boolean"
        x-exportParamName: "IncrementFactoryResetCounter"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Locations/{id}/marketingExport:
    get:
      tags:
      - "Location"
      summary: "Get detailed information of location for updating CRMs."
      description: "<div><strong>200</strong>: Success, location data in response.</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "Location.prototype.marketingExport"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/partnerIdProfileInfo:
    get:
      tags:
      - "Location"
      summary: "Get the partner id, location profile and other info for this location"
      description: "<div><strong>200</strong>: Success, wifiMotion object returned.</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ location id does not exist and is not known to Plume</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Location.prototype.getLocationPartnerIdProfileInfo"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/groupProvisioning:
    get:
      tags:
      - "Location"
      summary: "Get Group Provisioning details"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Location does not exist</div>\n<div><strong>500</strong>: Internal Server\
        \ error</div>"
      operationId: "Location.prototype.groupProvisioning"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/command/state:
    get:
      tags:
      - "Location"
      summary: "Get speed test result report state"
      description: "<div><strong>200</strong>: Success, return report state.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>:\
        \ Internal server error.</div>"
      operationId: "Location.prototype.getCommandState"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Locations/{id}/resyncWebconfig:
    post:
      tags:
      - "Location"
      summary: "sync SSID data from location to all its claimed nodes."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>404</strong>:\
        \ Wifi network does not exist.</div>\n<div><strong>404</strong>: location\
        \ id, does not exist.</div>\n<div><strong>422</strong>: Endpoint is not allowed\
        \ in current deployment.</div>\n<div><strong>500</strong>: internal server\
        \ error</div>"
      operationId: "Location.prototype.resyncWebconfig"
      parameters:
      - name: "id"
        in: "path"
        description: "Location id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Nodes/{id}:
    get:
      tags:
      - "Node"
      summary: "Find a model instance by {{id}} from the data source."
      operationId: "Node.findById"
      parameters:
      - name: "id"
        in: "path"
        description: "Model id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "filter"
        in: "query"
        description: "Filter defining fields and include - must be a JSON-encoded\
          \ string ({\"something\":\"value\"})"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Node"
    delete:
      tags:
      - "Node"
      summary: "Unclaim a node by a groupAdmin or admin"
      description: "<div><strong>204</strong>: Success, node changed.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "Node.prototype.unclaim"
      parameters:
      - name: "id"
        in: "path"
        description: "Node id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "forceUnclaim"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ForceUnclaim"
        x-optionalDataType: "Bool"
      - name: "preservePackId"
        in: "formData"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "PreservePackId"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /Nodes:
    get:
      tags:
      - "Node"
      summary: "Find all instances of the model matched by filter from the data source."
      operationId: "Node.find"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter defining fields, where, include, order, offset, and limit\
          \ - must be a JSON-encoded string (`{\"where\":{\"something\":\"value\"\
          }}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"
    post:
      tags:
      - "Node"
      summary: "Import a node into the global/shared inventory (does NOT claim)."
      description: "<div><strong>200</strong>: Success, node imported.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>409</strong>: NodeId already\
        \ exists in shared inventory.</div>\n<div><strong>422</strong>: Input validation\
        \ failed.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "Node.customCreate"
      parameters:
      - name: "id"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "residentialGateway"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "ResidentialGateway"
      - name: "model"
        in: "formData"
        description: "Node model ID value is required unless a Partner ID exemption\
          \ has been configured"
        required: false
        type: "string"
        x-exportParamName: "Model"
        x-optionalDataType: "String"
      - name: "packId"
        in: "formData"
        description: "optional packId to group nodes"
        required: false
        type: "string"
        x-exportParamName: "PackId"
        x-optionalDataType: "String"
      - name: "partnerId"
        in: "formData"
        description: "Partner ID required on Plume production clouds"
        required: false
        type: "string"
        x-exportParamName: "PartnerId"
        x-optionalDataType: "String"
      - name: "radioMac24"
        in: "formData"
        description: "optional radioMac24, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac24"
        x-optionalDataType: "String"
      - name: "radioMac50"
        in: "formData"
        description: "optional radioMac50, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac50"
        x-optionalDataType: "String"
      - name: "radioMac60"
        in: "formData"
        description: "optional radioMac60, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac60"
        x-optionalDataType: "String"
      - name: "ethernetMac"
        in: "formData"
        description: "optional ethernetMac, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "EthernetMac"
        x-optionalDataType: "String"
      - name: "ethernet1Mac"
        in: "formData"
        description: "optional ethernet1Mac, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "Ethernet1Mac"
        x-optionalDataType: "String"
      - name: "claimKeyRequired"
        in: "formData"
        description: "optional claimKeyRequired, default is false"
        required: false
        type: "boolean"
        x-exportParamName: "ClaimKeyRequired"
        x-optionalDataType: "Bool"
      - name: "radioMac50L"
        in: "formData"
        description: "optional radioMac50L, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac50L"
        x-optionalDataType: "String"
      - name: "radioMac50U"
        in: "formData"
        description: "optional radioMac50U, must be a valid mac address"
        required: false
        type: "string"
        x-exportParamName: "RadioMac50U"
        x-optionalDataType: "String"
      - name: "subscriptionRequired"
        in: "formData"
        description: "optional subscriptionRequired, default is false"
        required: false
        type: "boolean"
        x-exportParamName: "SubscriptionRequired"
        x-optionalDataType: "Bool"
      - name: "thread"
        in: "formData"
        description: "optional Thread/Matter MAC addres"
        required: false
        type: "string"
        x-exportParamName: "Thread"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Node"
  /Nodes/count:
    get:
      tags:
      - "Node"
      summary: "Count instances of the model matched by where from the data source."
      operationId: "Node.count"
      parameters:
      - name: "where"
        in: "query"
        description: "Criteria to match model instances"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Where"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /Nodes/{id}/customer:
    get:
      tags:
      - "Node"
      summary: "Get the customer info with the node Id."
      description: "<div><strong>200</strong>: Success, return the customer info.</div>\n\
        <div><strong>403</strong>: Public ip not matched.</div>\n<div><strong>404</strong>:\
        \ NodeId not found.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Node.prototype.getCustomerByNodeId"
      parameters:
      - name: "id"
        in: "path"
        description: "Node id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Nodes/{id}/mqtt:
    get:
      tags:
      - "Node"
      summary: "Get the MQTT broker address of the node."
      description: "<div><strong>200</strong>: Success, return the customer info.</div>\n\
        <div><strong>404</strong>: NodeId not found.</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "Node.prototype.getMqttBroker"
      parameters:
      - name: "id"
        in: "path"
        description: "Node id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /Nodes/{id}/passwordLessToken:
    post:
      tags:
      - "Node"
      summary: "Update the name and email for customer and generate emailToken and\
        \ appToken."
      description: "<div><strong>200</strong>: Success, return the customer info.</div>\n\
        <div><strong>403</strong>: Public ip not matched.</div>\n<div><strong>404</strong>:\
        \ NodeId not found.</div>\n<div><strong>422</strong>: Email must be defined\
        \ and valid.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Node.prototype.verifyEmailPasswordlessToken"
      parameters:
      - name: "id"
        in: "path"
        description: "Node id"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Id"
      - name: "name"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Customer"
  /Nodes/{id}/packId:
    put:
      tags:
      - "Node"
      summary: "Rename an unclaimed node/pod's packId in Plume's global inventory."
      description: "<div><strong>200</strong>: Success, a job well done.</div>\n<div><strong>400</strong>:\
        \ Bad request, packId is undefined or empty string.</div>\n<div><strong>404</strong>:\
        \ NodeId not found.</div>\n<div><strong>422</strong>: PackId is invalid (too\
        \ long).</div>\n<div><strong>423</strong>: PackId cannot be changed for a\
        \ claimed pod.</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "Node.updatePackId"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "packId"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "PackId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Node"
  /inventory/nodes/{nodeId}:
    get:
      tags:
      - "Inventory"
      summary: "Get node by ID from the Inventory service"
      description: "<div><strong>200</strong>: Success, return the node object</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ Node not found.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Inventory.getNodeById"
      parameters:
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /inventory/nodes/{nodeId}/autoProvisioning:
    patch:
      tags:
      - "Inventory"
      summary: "S node by ID from the Inventory service"
      description: "<div><strong>200</strong>: Success, return the node object</div>\n\
        <div><strong>401</strong>: Authorization required</div>\n<div><strong>404</strong>:\
        \ Node not found.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "Inventory.autoProvisioning"
      parameters:
      - name: "nodeId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeId"
      - name: "autoProvisionToThisDeployment"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "AutoProvisionToThisDeployment"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /checkIntegrationHealth:
    get:
      tags:
      - "IntegrationHealthCheck"
      summary: "Integration Health check API 2.0"
      description: "<div><strong>200</strong>: Success, Integration intact.</div>\n\
        <div><strong>401</strong>: Unauthorized</div>"
      operationId: "IntegrationHealthCheck.checkIntegration"
      parameters: []
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/appEngagementTimer:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get a partner config for app engagement timer"
      description: "<div><strong>200</strong>: Success. Retrieved partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>404</strong>: Config does not exist </div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "PartnerConfig.getAppEngagementTimerConfig"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    post:
      tags:
      - "PartnerConfig"
      summary: "Create a partner config for app engagement timer"
      description: "<div><strong>200</strong>: Success. Created partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "PartnerConfig.createAppEngagementTimerConfig"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "timerInSeconds"
        in: "formData"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "TimerInSeconds"
      - name: "numberOfAllowedRetries"
        in: "formData"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "NumberOfAllowedRetries"
      - name: "enable"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "Enable"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Patch a partner config for app engagement timer"
      description: "<div><strong>200</strong>: Success. Patched partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: \"illegal field\"</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "PartnerConfig.patchAppEngagementTimerConfig"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "timerInSeconds"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TimerInSeconds"
        x-optionalDataType: "Float64"
      - name: "numberOfAllowedRetries"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "NumberOfAllowedRetries"
        x-optionalDataType: "Float64"
      - name: "enable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "Enable"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{partnerId}/qos/appPrioritization:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get status for app prioritization."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Partner id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.getAppPrioritizationPartnerConfig"
      parameters:
      - name: "partnerId"
        in: "path"
        description: "partner Id"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Update app prioritization config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>404</strong>:\
        \ Partner id or WifiNetwork does not exist and is not known to Plume</div>\n\
        <div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.patchAppPrioritizationPartnerConfig"
      parameters:
      - name: "partnerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      - name: "enabled"
        in: "formData"
        description: "(deprecated) true if app prioritization is enabled"
        required: false
        type: "boolean"
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      - name: "defaultMode"
        in: "formData"
        description: "App Prioritization mode - any of enable | disable"
        required: false
        type: "string"
        x-exportParamName: "DefaultMode"
        x-optionalDataType: "String"
      - name: "initialLocationEnabled"
        in: "formData"
        description: "true if app prioritization is enabled for all new locations"
        required: false
        type: "boolean"
        x-exportParamName: "InitialLocationEnabled"
        x-optionalDataType: "Bool"
      - name: "customSettingEnabled"
        in: "formData"
        description: "true if custom setting is enabled"
        required: false
        type: "boolean"
        x-exportParamName: "CustomSettingEnabled"
        x-optionalDataType: "Bool"
      - name: "template"
        in: "formData"
        description: "Template for app prioritization"
        required: false
        type: "string"
        x-exportParamName: "Template"
        x-optionalDataType: "String"
      - name: "appPriority"
        in: "formData"
        description: "priority for apps"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "AppPriority"
        x-optionalDataType: "String"
      - name: "customSetting"
        in: "formData"
        description: "Settings for app prioritization"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "CustomSetting"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{partnerId}/qos/appPrioritization/customSetting:
    delete:
      tags:
      - "PartnerConfig"
      summary: "Set custom setting to default for app prioritization."
      operationId: "PartnerConfig.deleteAppPrioritizationPartnerCustomSetting"
      parameters:
      - name: "partnerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partnerConfig/{partnerId}/qos/appPrioritization/appPriority:
    delete:
      tags:
      - "PartnerConfig"
      summary: "Set app priority to default for app prioritization."
      operationId: "PartnerConfig.deleteAppPrioritizationPartnerAppPriority"
      parameters:
      - name: "partnerId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PartnerId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /partnerConfig/{id}/captivePortal:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners captivePortal configs "
      description: "<div><strong>200</strong>: Success. Patched partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.getCaptivePortalConfig"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Patch a partners captivePortal configs"
      description: "<div><strong>200</strong>: Success. Patched partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>422</strong>: Incorrect language type</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "PartnerConfig.updateCaptivePortalConfig"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "defaultLanguage"
        in: "formData"
        required: false
        type: "string"
        x-exportParamName: "DefaultLanguage"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/featureFlags:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners feature flags"
      description: "<div><strong>200</strong>: Success. Patched partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>422</strong>:\
        \ Illegal field</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.getFeatureFlags"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Patch a partners feature flags"
      description: "<div><strong>200</strong>: Success. Patched partner config.</div>\n\
        <div><strong>401</strong>: Authorization required or customer id not found</div>\n\
        <div><strong>403</strong>: Not allowed to update configuration</div>\n<div><strong>422</strong>:\
        \ Illegal field</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.updateFeatureFlags"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/machineToMachine:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners machine to machine information"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: There is not configuration\
        \ for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.getMachineToMachine"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    put:
      tags:
      - "PartnerConfig"
      summary: "Enable machine to machine token generation for partnerId"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>403</strong>: Not allowed to\
        \ update configuration</div>\n<div><strong>404</strong>: Group of partnerId\
        \ not found</div>\n<div><strong>422</strong>: Illegal field</div>\n<div><strong>500</strong>:\
        \ internal server error</div>"
      operationId: "PartnerConfig.enableMachineToMachine"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Disable machine to machine token generation for partner"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>403</strong>: Not allowed to\
        \ update configuration</div>\n<div><strong>404</strong>: Group of partnerId\
        \ not found</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.disableMachineToMachine"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/machineToMachine/tokens:
    post:
      tags:
      - "PartnerConfig"
      summary: "Generate a new Machine to Machine token for PartnerId"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: There is not configuration\
        \ for this partnerId</div>\n<div><strong>422</strong>: Illegal field</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.generateMachineToMachineToken"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "tokenName"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "TokenName"
      - name: "tokenTTLSeconds"
        in: "formData"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TokenTTLSeconds"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/machineToMachine/tokens/{tokenId}:
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete one of the tokens for the PartnerId"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: There is not configuration\
        \ for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.deleteMachineToMachineToken"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "tokenId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TokenId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/securityPolicy:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partner's default securityPolicy"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: There is not configuration\
        \ for this partnerId</div>\n<div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.getSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Set partner's default securityPolicy"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: There is not configuration\
        \ for this partnerId</div>\n<div><strong>422</strong>: Illegal field</div>\n\
        <div><strong>500</strong>: internal server error</div>"
      operationId: "PartnerConfig.patchSecurityPolicy"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "whitelist"
        in: "formData"
        description: "List of whitelisted fqdn values - {type=\"fqdn\", value}\""
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Whitelist"
        x-optionalDataType: "String"
      - name: "blacklist"
        in: "formData"
        description: "List of blacklisted fqdn values - {type=\"fqdn\", value}"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Blacklist"
        x-optionalDataType: "String"
      - name: "blockedDnsRedirect"
        in: "formData"
        description: "Redirect \"address\" and corresponding \"ttl\" redirect in seconds"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "BlockedDnsRedirect"
        x-optionalDataType: "String"
      - name: "contentFilterOverrides"
        in: "formData"
        description: "Array of content filter overrides each with its own whitelist/blacklist"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ContentFilterOverrides"
        x-optionalDataType: "String"
      - name: "remoteConnectionsMode"
        in: "formData"
        description: "Any of \"auto\", \"enabled\", \"disabled\", \"highRiskOnly\""
        required: false
        type: "string"
        x-exportParamName: "RemoteConnectionsMode"
        x-optionalDataType: "String"
      - name: "remoteConnectionsForceDisable"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "RemoteConnectionsForceDisable"
        x-optionalDataType: "Bool"
      - name: "disableSafeSearch"
        in: "formData"
        required: false
        type: "boolean"
        x-exportParamName: "DisableSafeSearch"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/homepass/customerSupportConfigurations:
    get:
      tags:
      - "PartnerConfig"
      summary: "get homepass customer support configurations"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>422</strong>: Input validation\
        \ failed.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "PartnerConfig.getHomepassCustomerSupportConfigurations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/homepassCustomerSupportConfigurations"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Patch customer support configurations"
      description: "<div><strong>200</strong>: Success. Patched customer support configurations.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "PartnerConfig.patchHomepassCustomerSupportConfigurations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/workpass/customerSupportConfigurations:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get workpass customer support configurations"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "PartnerConfig.getWorkpassCustomerSupportConfigurations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/workpassCustomerSupportConfigurations"
    patch:
      tags:
      - "PartnerConfig"
      summary: "Patch customer support configurations"
      description: "<div><strong>200</strong>: Success. Patched customer support configurations.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>422</strong>:\
        \ Input validation failed.</div>\n<div><strong>500</strong>: Internal server\
        \ error.</div>"
      operationId: "PartnerConfig.patchWorkpassCustomerSupportConfigurations"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /partnerConfig/{id}/platform/appQoe:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners appQoe config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getAppQoe"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update partners appQoe Config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.updateAppQoe"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete cohort appQoe config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deleteAppQoe"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform/speedTest:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners speedTest config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getSpeedTest"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update partners speedTest Config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.updateSpeedTest"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete partners speedTest config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deleteSpeedTest"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform/pcs:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get Pre-CAC Scheduler Config"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getPreCacScheduler"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update partners Pre CAC Scheduler config"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.updatePreCacScheduler"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete cohort preCacScheduler config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deletePreCacScheduler"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform/samKnows:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners samKnows config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getSamKnows"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update partners samKnows Config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.updateSamKnows"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete cohort samKnows config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deleteSamKnows"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform/sipAlg:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get partners sipAlg config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getSipAlg"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update partners sipAlg Config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.updateSipAlg"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete cohort sipAlg config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deleteSipAlg"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform/vlanServices:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get cohort vlan service configs."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: PartnerId not found\
        \ or no configurations exist for partner</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getVlanServices"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    put:
      tags:
      - "PartnerConfig"
      summary: "Update cohort vlan service Config."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>422</strong>:\
        \ Invalid schema.</div>\n<div><strong>500</strong>: Internal server error</div>"
      operationId: "PartnerConfig.putVlanServices"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "config"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Config"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "PartnerConfig"
      summary: "Delete cohort vlan service config."
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required or customer id not found</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.deleteVlanService"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "204":
          description: "Request was successful"
  /partnerConfig/{id}/platform:
    get:
      tags:
      - "PartnerConfig"
      summary: "Get all partners cohort configs."
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>401</strong>:\
        \ Authorization required</div>\n<div><strong>404</strong>: PartnerId not found\
        \ or no configurations exist for partner</div>\n<div><strong>500</strong>:\
        \ Internal server error</div>"
      operationId: "PartnerConfig.getCohorts"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
  /command/health:
    get:
      tags:
      - "Command"
      summary: "return a 200 response when your server is healthy, else send a 500\
        \ response"
      description: "<div><strong>200</strong>: Success, return health data.</div>\n\
        <div><strong>401</strong>: Authorization required.</div>\n<div><strong>500</strong>:\
        \ internal server error.</div>"
      operationId: "Command.getHealth"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /command/{providerUserId}:
    get:
      tags:
      - "Command"
      summary: "Get account linking"
      description: "<div><strong>200</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Missing providerUserId body parameter</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Command not found.</div>\n\
        <div><strong>500</strong>: internal server error.</div>"
      operationId: "Command.getCommand"
      parameters:
      - name: "providerUserId"
        in: "path"
        description: "id of the user in provider's system"
        required: true
        type: "string"
        x-exportParamName: "ProviderUserId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
    delete:
      tags:
      - "Command"
      summary: "Delete account linking"
      description: "<div><strong>204</strong>: Success.</div>\n<div><strong>400</strong>:\
        \ Missing providerUserId body parameter</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Command not found.</div>\n\
        <div><strong>500</strong>: internal server error.</div>"
      operationId: "Command.deleteCommand"
      parameters:
      - name: "providerUserId"
        in: "path"
        description: "id of the user in provider's system"
        required: true
        type: "string"
        x-exportParamName: "ProviderUserId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/x-any"
  /AuditTrails/getAuditTrail:
    get:
      tags:
      - "AuditTrail"
      summary: "Get Audit Trail for a customer and/or location"
      description: "<div><strong>200</strong>: Ok.</div>\n<div><strong>401</strong>:\
        \ Authorization required.</div>\n<div><strong>404</strong>: Location id, does\
        \ not exist.</div>\n<div><strong>500</strong>: Internal server error.</div>"
      operationId: "AuditTrail.getAuditTrail"
      parameters:
      - name: "customerId"
        in: "query"
        description: "Customer Id"
        required: true
        type: "string"
        x-exportParamName: "CustomerId"
      - name: "locationId"
        in: "query"
        description: "Location Id"
        required: false
        type: "string"
        x-exportParamName: "LocationId"
        x-optionalDataType: "String"
      - name: "partnerIds"
        in: "query"
        description: "Partner Id"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "PartnerIds"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AuditTrail"
definitions:
  x-any: {}
  CustomerGroup:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
      groupId:
        $ref: "#/definitions/ObjectID"
      customerId:
        $ref: "#/definitions/ObjectID"
    description: "A tag applied to Customers for labeling and administering. These\
      \ APIs are only available for Admin users of the NOC."
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      id: {}
    additionalProperties: false
  Customer:
    type: "object"
    required:
    - "_version"
    - "email"
    - "name"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      accountId:
        type: "string"
      anonymous:
        type: "boolean"
        description: "ISP registered accounts are anonymous and do not include real\
          \ emails and passwords"
        default: false
      autoProvisioned:
        type: "boolean"
        description: "ISP auto registered accounts created using gatewayId instead\
          \ of accountId need to eventually be updated a real accountId"
        default: false
      contact:
        type: "string"
      name:
        type: "string"
      locked:
        type: "boolean"
        description: "The groupAdmin account needs this property to protect it from\
          \ being changed by other groupAdmins unintentionally."
        default: false
      partnerId:
        type: "string"
      acceptLanguage:
        type: "string"
        description: "The acceptable language for this user"
        default: "en-US"
      preferredLanguage:
        type: "string"
        description: "The language set for this user based on API and/or it's language\
          \ header"
      nocSettings:
        type: "object"
        properties: {}
      linkedAccounts:
        type: "array"
        description: "array of the outside/non-plume accounts to be linked"
        items:
          type: "object"
          properties: {}
      source:
        type: "string"
        default: "unknown"
      createdAt:
        type: "string"
        format: "date-time"
      provisioningSsoAuditTrail:
        type: "boolean"
        description: "If true, the user has provisioning SSO audit trail"
        default: false
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      realm:
        type: "string"
      username:
        type: "string"
      email:
        type: "string"
      emailVerified:
        type: "boolean"
      termsAndPrivacy:
        $ref: "#/definitions/TermsAndPrivacy"
      migration:
        $ref: "#/definitions/Migration"
    description: "A Plume Customer is initialized with a default location."
    example:
      preferredLanguage: "preferredLanguage"
      provisioningSsoAuditTrail: false
      source: "unknown"
      accountId: "accountId"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      emailVerified: true
      acceptLanguage: "en-US"
      autoProvisioned: false
      nocSettings: "{}"
      contact: "contact"
      name: "name"
      linkedAccounts:
      - "{}"
      - "{}"
      migration:
        migrationReason: "migrationReason"
        migratedAt: "2000-01-23T04:56:07.000+00:00"
        migratedFrom: "migratedFrom"
        migratedTo: "migratedTo"
      anonymous: false
      termsAndPrivacy:
        privacyDocumentId: 6.027456183070403
        privacyAcceptedAt: "2000-01-23T04:56:07.000+00:00"
        termsDocumentId: 0.8008281904610115
        termsAcceptedAt: "2000-01-23T04:56:07.000+00:00"
      realm: "realm"
      id: {}
      partnerId: "partnerId"
      locked: false
      _version: "1.0.0"
      email: "email"
      username: "username"
    additionalProperties: false
  Group:
    type: "object"
    required:
    - "_version"
    - "description"
    - "name"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      name:
        type: "string"
      description:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    description: "A tag applied to Customers for labeling and administering. These\
      \ APIs are only available for Admin users of the NOC."
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      id: {}
      _version: "1.0.0"
    additionalProperties: false
  TermsAndPrivacy:
    type: "object"
    required:
    - "privacyDocumentId"
    - "termsDocumentId"
    properties:
      termsDocumentId:
        type: "number"
        format: "double"
      termsAcceptedAt:
        type: "string"
        format: "date-time"
      privacyDocumentId:
        type: "number"
        format: "double"
      privacyAcceptedAt:
        type: "string"
        format: "date-time"
    description: "TermsAndPrivacy object"
    example:
      privacyDocumentId: 6.027456183070403
      privacyAcceptedAt: "2000-01-23T04:56:07.000+00:00"
      termsDocumentId: 0.8008281904610115
      termsAcceptedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Migration:
    type: "object"
    required:
    - "migratedAt"
    - "migratedFrom"
    - "migratedTo"
    - "migrationReason"
    properties:
      migratedFrom:
        type: "string"
        description: "From which cloud was this customer migrated"
      migratedTo:
        type: "string"
        description: "To which cloud was this customer migrated"
      migratedAt:
        type: "string"
        format: "date-time"
        description: "Timestamp of the migration occurrence"
      migrationReason:
        type: "string"
        description: "Reason for migration occurrence"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      migrationReason: "migrationReason"
      migratedAt: "2000-01-23T04:56:07.000+00:00"
      migratedFrom: "migratedFrom"
      migratedTo: "migratedTo"
    additionalProperties: false
  AccessToken:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      ttl:
        type: "number"
        format: "double"
        description: "time to live in seconds (2 weeks by default)"
        default: 1209600.0
      scopes:
        type: "array"
        description: "Array of scopes granted to this access token."
        items:
          type: "string"
      created:
        type: "string"
        format: "date-time"
      userId:
        $ref: "#/definitions/ObjectID"
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      scopes:
      - "scopes"
      - "scopes"
      ttl: 0.8008281904610115
      userId: {}
    additionalProperties: false
  Role:
    type: "object"
    required:
    - "name"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      name:
        type: "string"
      description:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      modified:
        type: "string"
        format: "date-time"
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      description: "description"
      modified: "2000-01-23T04:56:07.000+00:00"
      id: {}
    additionalProperties: false
  KvConfig:
    type: "object"
    properties:
      module:
        type: "string"
      key:
        type: "string"
      value:
        type: "string"
      persist:
        type: "boolean"
        default: false
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      module: "module"
      persist: false
      id: {}
      value: "value"
      key: "key"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationCustomSchedule:
    type: "object"
    required:
    - "_version"
    - "id"
    - "name"
    - "type"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      id:
        type: "number"
        format: "double"
        description: "Unique identifier for the shared custom freeze template"
      type:
        type: "string"
      name:
        type: "string"
        description: "Custom freeze schedule template name"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: 0.8008281904610115
      type: "type"
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Schedule:
    type: "object"
    required:
    - "_version"
    - "daysOfWeek"
    - "startTime"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      startTime:
        type: "string"
      endTime:
        type: "string"
      daysOfWeek:
        type: "array"
        items:
          type: "number"
          format: "double"
      id:
        type: "number"
        format: "double"
    additionalProperties: false
  FrontlineStorage:
    type: "object"
    properties:
      keys:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      keys: "keys"
      id: {}
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  HomeSecurity:
    type: "object"
    properties:
      liveMotionEnabled:
        type: "boolean"
      motionEventsEnabled:
        type: "boolean"
      cooldown:
        type: "number"
        format: "double"
      petMode:
        type: "string"
      sensitivity:
        type: "string"
      id:
        type: "number"
        format: "double"
    example:
      motionEventsEnabled: true
      cooldown: 0.8008281904610115
      petMode: "petMode"
      liveMotionEnabled: true
      sensitivity: "sensitivity"
      id: 6.027456183070403
    additionalProperties: false
  WifiMotion:
    type: "object"
    required:
    - "auto"
    properties:
      auto:
        type: "boolean"
        default: false
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      auto: false
      id: {}
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  RegisterResponse:
    type: "object"
    required:
    - "_version"
    properties:
      id:
        type: "string"
      email:
        type: "string"
        description: "Fake email created on behalf of anonymous account."
      accountId:
        type: "string"
      locationId:
        type: "string"
        description: "ID of default location created during registration API call."
      anonymous:
        type: "boolean"
        description: "ISP registered accounts are anonymous and do not include real\
          \ emails and passwords"
        default: false
      name:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
    example:
      accountId: "accountId"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      locationId: "locationId"
      name: "name"
      anonymous: false
      id: "id"
      _version: "1.0.0"
      email: "email"
    additionalProperties: false
  Location:
    type: "object"
    required:
    - "_version"
    - "name"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      ipv6:
        type: "object"
        description: "Configuration data for IPv6"
        properties: {}
      networkMode:
        type: "string"
        description: "the default value is 'auto', users can choose 'router' or 'auto'"
        default: "auto"
      name:
        type: "string"
      accountId:
        type: "string"
        description: "accountId from customer relation; this should be a replica of\
          \ the customer's accountId field"
      partnerId:
        type: "string"
        description: "partnerId from customer relation; this should be a replica of\
          \ the customer's partnerId field"
      groupIds:
        type: "array"
        description: "List of group IDs a location belongs to."
        items:
          type: "string"
      serviceId:
        type: "string"
      profile:
        type: "string"
        default: "auto"
      mDNSUniqueIdentifier:
        type: "string"
      freezeTemplates:
        type: "object"
        properties: {}
      serviceLevel:
        type: "object"
        description: "including 'status'/'created'/'updatedAt', 'status' can be 'noService'/'basicService'/'fullService'"
        properties: {}
      homeAwayActive:
        type: "boolean"
        description: "Home Security wifi motion will be enabled when all persons away\
          \ from home."
      appTime:
        type: "object"
        description: "location's default appTime config"
        properties: {}
      sniffing:
        type: "object"
        description: "location's default sniffing config"
        properties: {}
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      dayOneEmailsSent:
        type: "boolean"
      region:
        type: "string"
      stepFunctionTimers:
        type: "array"
        description: "Array of step function timers used for turning off wifi feature"
        items:
          type: "object"
          properties: {}
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      groupOfUnassignedDevicesFreezeTemplates:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      groupOfUnassignedDevicesFreezeSchedules:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      isUtilizingSharedLocationFreezeSchedules:
        type: "boolean"
        default: false
      uprise:
        type: "boolean"
        default: false
      flex:
        type: "boolean"
        default: false
      customerId:
        $ref: "#/definitions/ObjectID"
      ispSpeedTestConfiguration:
        $ref: "#/definitions/LocationSpeedTest"
      bandSteering:
        $ref: "#/definitions/LocationBandSteering"
      clientSteering:
        $ref: "#/definitions/LocationClientSteering"
      controlMode:
        $ref: "#/definitions/LocationControlMode"
      monitorMode:
        $ref: "#/definitions/LocationMonitorMode"
      backhaul:
        $ref: "#/definitions/LocationBackhaul"
      wanSettings:
        $ref: "#/definitions/LocationWanSettings"
      wifiMotion:
        $ref: "#/definitions/WifiMotion"
      geoIp:
        $ref: "#/definitions/GeoIp"
      networkStatus:
        $ref: "#/definitions/NetworkStatus"
      optimizations:
        $ref: "#/definitions/Optimizations"
      authorizations:
        $ref: "#/definitions/Authorizations"
      locale:
        $ref: "#/definitions/Locale"
      networkAccess:
        $ref: "#/definitions/NetworkAccess"
      dppConfiguration:
        $ref: "#/definitions/DppConfiguration"
      haahsConfiguration:
        $ref: "#/definitions/HaahsConfiguration"
      _secondaryNetworks:
        $ref: "#/definitions/SecondaryNetworks"
    description: "Plume internal-only APIs."
    example:
      wanSettings:
        static:
          ipAddress: "ipAddress"
          subnetMask: "subnetMask"
          defaultGateway: "defaultGateway"
        pppoe:
          password: "password"
          name: "name"
        _version: "1.0.1"
        connectionType: "connectionType"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      geoIp:
        country: "country"
        province: "province"
        city: "city"
        timezone: "timezone"
        ip: "ip"
        latitude: 0.8008281904610115
        ISP: "false"
        state: "state"
        _version: "1.0.0"
        longitude: 6.027456183070403
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      backhaul:
        mode: "auto"
        dynamicBeacon: "auto"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        wpaMode: "auto"
        wds: "auto"
        wpaModeRealized: "wpaModeRealized"
        _version: "1.0.0"
        wpaKey: "wpaKey"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      networkStatus:
        statusChangedAt: "2000-01-23T04:56:07.000+00:00"
        _version: "1.0.0"
        status: "status"
        durationOfPreviousStatus: 1.4658129805029452
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      authorizations:
        numNodesAuthorized:
        - count: 5.637376656633329
          model: "model"
        - count: 5.637376656633329
          model: "model"
        _version: "1.0.0"
        numPodsAuthorized: 5.962133916683182
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      locale:
        dfsMode: "dfsMode"
        region: "region"
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      mDNSUniqueIdentifier: "mDNSUniqueIdentifier"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      isUtilizingSharedLocationFreezeSchedules: false
      networkAccess:
        groupShares:
        - groupIds:
          - null
          - null
        - groupIds:
          - null
          - null
        networks:
        - purgatory: false
          networkId: "networkId"
          heaven:
          - null
          - null
        - purgatory: false
          networkId: "networkId"
          heaven:
          - null
          - null
        hell:
        - null
        - null
        deviceGroups:
        - devices:
          - null
          - null
          groupId: "groupId"
          name: "name"
          networkId: "networkId"
        - devices:
          - null
          - null
          groupId: "groupId"
          name: "name"
          networkId: "networkId"
        personGroups:
        - devices:
          - null
          - null
          groupId: "groupId"
          name: "name"
          networkId: "networkId"
        - devices:
          - null
          - null
          groupId: "groupId"
          name: "name"
          networkId: "networkId"
      ispSpeedTestConfiguration:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        enable: true
        speedCapable: true
        _version: "1.0.1"
        enableAllNodes: true
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      ipv6: "{}"
      flex: false
      _secondaryNetworks:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        locationId: "locationId"
        networkConfigs:
        - "{}"
        - "{}"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      groupIds:
      - "groupIds"
      - "groupIds"
      id: {}
      serviceId: "serviceId"
      freezeTemplates: "{}"
      _version: "1.0.0"
      groupOfUnassignedDevicesFreezeTemplates:
      - {}
      - {}
      haahsConfiguration:
        mode: "auto"
        locationId: "locationId"
        subscription:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          haahsConfiguration: "haahsConfiguration"
          status: "Not supported"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      networkMode: "auto"
      controlMode:
        mode: "full"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      stepFunctionTimers:
      - "{}"
      - "{}"
      uprise: false
      appTime: "{}"
      bandSteering:
        mode: "mode"
        auto: true
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      homeAwayActive: true
      dppConfiguration:
        mode: "auto"
        locationId: "locationId"
        enrollments:
        - sha256: "sha256"
          networkId: "networkId"
          bootstrapUri: "bootstrapUri"
        - sha256: "sha256"
          networkId: "networkId"
          bootstrapUri: "bootstrapUri"
      profile: "auto"
      groupOfUnassignedDevicesFreezeSchedules:
      - null
      - null
      serviceLevel: "{}"
      accountId: "accountId"
      name: "name"
      wifiMotion:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        auto: false
        id: {}
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      sniffing: "{}"
      clientSteering:
        mode: "mode"
        steeringClass: "steeringClass"
        auto: true
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      partnerId: "partnerId"
      region: "region"
      dayOneEmailsSent: true
      monitorMode:
        enable: true
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      optimizations:
        preCACScheduler: "auto"
        auto: true
        dfsMode: "auto"
        prefer160MhzMode: "auto"
        enable: true
        _version: "1.0.0"
        hopPenalty: "auto"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  AppFacadeHomeResponse:
    type: "object"
    properties:
      _version:
        type: "string"
        description: "schema version # of the API response"
        default: "1.0.0"
      customer:
        $ref: "#/definitions/Customer"
      capabilities:
        $ref: "#/definitions/CapabilitiesResponse"
      geoIp:
        $ref: "#/definitions/GeoIp"
      networkStatus:
        $ref: "#/definitions/NetworkStatus"
      optimization:
        $ref: "#/definitions/Optimizations"
      wifiNetwork:
        $ref: "#/definitions/WifiNetwork"
      devices:
        $ref: "#/definitions/Devices"
      nodes:
        $ref: "#/definitions/Node"
      summary:
        $ref: "#/definitions/SummaryResponse"
      alerts:
        type: "object"
        properties: {}
      id:
        type: "number"
        format: "double"
    example:
      summary:
        networkModeRealized: "networkModeRealized"
        topology:
        - connectionState: "connectionState"
          ip: "ip"
          wifiConfig:
          - null
          - null
          channel: "channel"
          backhaulType: "backhaulType"
          "2gChannel": "2gChannel"
          connectedDeviceCount: 3.616076749251911
          nickname: "nickname"
          leafToRoot:
          - "{}"
          - "{}"
          "5gChannel": "5gChannel"
          id: "id"
          firmwareVersion: "firmwareVersion"
          defaultName: "defaultName"
          "6gChannel": "6gChannel"
        - connectionState: "connectionState"
          ip: "ip"
          wifiConfig:
          - null
          - null
          channel: "channel"
          backhaulType: "backhaulType"
          "2gChannel": "2gChannel"
          connectedDeviceCount: 3.616076749251911
          nickname: "nickname"
          leafToRoot:
          - "{}"
          - "{}"
          "5gChannel": "5gChannel"
          id: "id"
          firmwareVersion: "firmwareVersion"
          defaultName: "defaultName"
          "6gChannel": "6gChannel"
        nodeConnectedCount: 2.027123023002322
        networkModeProvisioned: "networkModeProvisioned"
        onboardingStatus: "onboardingStatus"
        nodeClaimedCount: 4.145608029883936
        optimization: "{}"
        connectedDeviceCount: 7.386281948385884
        gatewayConnectionState: "gatewayConnectionState"
        wifiNetworkProvisioned: true
        _version: "1.0.0"
        monitorMode: true
        timestamp: "timestamp"
      alerts: "{}"
      wifiNetwork:
        masterKeyIndex: 0.8008281904610115
        minWifiMode24: "auto"
        keys:
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        privateMode: false
        wpaModeDeferredExpiresAt: "wpaModeDeferredExpiresAt"
        encryptionKey: "encryptionKey"
        radiusServerIp: "radiusServerIp"
        ssid: "ssid"
        enabled: true
        content:
        - "content"
        - "content"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        defaultSecurityPolicy:
          iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        encryption: "OPEN"
        encryptionMode: "1"
        devicesVisibleToGuests:
        - "devicesVisibleToGuests"
        - "devicesVisibleToGuests"
        id: {}
        ssidBroadcast: true
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        devices:
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        uapsd: true
        privateModeUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        disableDefaultServiceNetwork: false
        accessZones:
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          description: "description"
          id: 5.637376656633329
          type: "type"
          accessibleDevices:
          - {}
          - {}
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          description: "description"
          id: 5.637376656633329
          type: "type"
          accessibleDevices:
          - {}
          - {}
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        fastTransition: "auto"
        appliesToAllDevicesSecurityPolicy:
          iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        persons:
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        wpaMode: "psk2"
        radiusServerPort: 6.027456183070403
        groupRekey: "auto"
      capabilities:
        deviceFreeze:
          reason: "reason"
          disabled: true
        capabilitiesChangedAt: "2000-01-23T04:56:07.000+00:00"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        security:
          dnsCategoryBlocking:
            reason: "reason"
            disabled: true
        networkConfiguration:
          networkMode:
            reason: "reason"
            disabled: true
          igmpProxy:
            reason: "reason"
            disabled: true
          portForward:
            reason: "reason"
            disabled: true
          multicastToUnicast:
            reason: "reason"
            disabled: true
          upnp:
            reason: "reason"
            disabled: true
          mldProxy:
            reason: "reason"
            disabled: true
          dnsServers:
            reason: "reason"
            disabled: true
          dhcpReservations:
            reason: "reason"
            disabled: true
          igmpSnooping:
            reason: "reason"
            disabled: true
        ispSpeedTest:
          reason: "reason"
          disabled: true
        wifiMotion:
          reason: "reason"
          disabled: true
        multiPasswordSSID:
          reason: "reason"
          disabled: true
        _version: "1.0.0"
      geoIp:
        country: "country"
        province: "province"
        city: "city"
        timezone: "timezone"
        ip: "ip"
        latitude: 0.8008281904610115
        ISP: "false"
        state: "state"
        _version: "1.0.0"
        longitude: 6.027456183070403
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      nodes:
        productFamily: "productFamily"
        subscriptionRequired: false
        productDescriptor: "productDescriptor"
        connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
        kvConfigs:
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          module: "module"
          persist: false
          id: {}
          value: "value"
          key: "key"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          module: "module"
          persist: false
          id: {}
          value: "value"
          key: "key"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        manufactureWeek: "manufactureWeek"
        radioMac24: "radioMac24"
        manufacturerSerialNumber: "manufacturerSerialNumber"
        radioMac60: "radioMac60"
        boxSerialNumber: "boxSerialNumber"
        countryCode: "countryCode"
        vendor:
          factory: "factory"
          name: "name"
          partNumber: "partNumber"
          mfgDate: "mfgDate"
          manufacturer: "manufacturer"
        platformVersion: "platformVersion"
        nickname: "nickname"
        model: "model"
        id: "id"
        firmwareVersion: "firmwareVersion"
        _version: "1.0.0"
        ethernetMac: "ethernetMac"
        timestamp: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        deployment: "deployment"
        networkMode: "networkMode"
        synchronizedKey: "synchronizedKey"
        serialNumber: "serialNumber"
        ethernetLan: "{}"
        blacklists:
        - null
        - null
        connectionState: "connectionState"
        bluetoothMac: "bluetoothMac"
        manufactureLocation: "manufactureLocation"
        residentialGateway: false
        thread: "thread"
        packId: "packId"
        shardNumber: "shardNumber"
        certificates:
          rootBefore: "rootBefore"
          clientAfter: "clientAfter"
          clientBefore: "clientBefore"
          rootAfter: "rootAfter"
        radioMac50: "radioMac50"
        macs:
        - null
        - null
        backhaulDhcpPoolIdx: 9.301444243932576
        manufactureYear: "manufactureYear"
        status: "status"
      optimization:
        preCACScheduler: "auto"
        auto: true
        dfsMode: "auto"
        prefer160MhzMode: "auto"
        enable: true
        _version: "1.0.0"
        hopPenalty: "auto"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      devices:
        devices:
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
      networkStatus:
        statusChangedAt: "2000-01-23T04:56:07.000+00:00"
        _version: "1.0.0"
        status: "status"
        durationOfPreviousStatus: 1.4658129805029452
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      id: 1.2315135367772556
      _version: "1.0.0"
      customer:
        preferredLanguage: "preferredLanguage"
        provisioningSsoAuditTrail: false
        source: "unknown"
        accountId: "accountId"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        emailVerified: true
        acceptLanguage: "en-US"
        autoProvisioned: false
        nocSettings: "{}"
        contact: "contact"
        name: "name"
        linkedAccounts:
        - "{}"
        - "{}"
        migration:
          migrationReason: "migrationReason"
          migratedAt: "2000-01-23T04:56:07.000+00:00"
          migratedFrom: "migratedFrom"
          migratedTo: "migratedTo"
        anonymous: false
        termsAndPrivacy:
          privacyDocumentId: 6.027456183070403
          privacyAcceptedAt: "2000-01-23T04:56:07.000+00:00"
          termsDocumentId: 0.8008281904610115
          termsAcceptedAt: "2000-01-23T04:56:07.000+00:00"
        realm: "realm"
        id: {}
        partnerId: "partnerId"
        locked: false
        _version: "1.0.0"
        email: "email"
        username: "username"
    additionalProperties: false
  Person:
    type: "object"
    required:
    - "nickname"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      nickname:
        type: "string"
      imageId:
        type: "string"
        description: "unique identifier for referencing a Person's hosted profile\
          \ image"
      primaryDevice:
        type: "string"
        description: "mac address of the Person's primary device"
      homeAwayNotification:
        type: "boolean"
        description: "notification when person is away from home"
        default: false
      appTime:
        type: "object"
        description: "person's appTime config"
        properties: {}
      permission:
        type: "object"
        description: "person's access permissions"
        properties: {}
      profile:
        description: "person specific profile"
        $ref: "#/definitions/PersonProfile"
      serviceLinking:
        type: "object"
        description: "A link to a 3rd party's Person object"
        properties: {}
      networkId:
        type: "string"
        description: "person and their devices behave as a group on this fronthaul\
          \ network as it pertains to sharing access"
      email:
        type: "string"
        description: "email address for creating co-manager access"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      locationId:
        $ref: "#/definitions/ObjectID"
    description: "Person object"
    example:
      imageId: "imageId"
      appTime: "{}"
      profile:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        type: "type"
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      permission: "{}"
      primaryDevice: "primaryDevice"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      nickname: "nickname"
      networkId: "networkId"
      id: {}
      homeAwayNotification: false
      email: "email"
      serviceLinking: "{}"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  DeviceResponse:
    type: "object"
    required:
    - "connectionState"
    - "ip"
    - "leafToRoot"
    - "mac"
    properties:
      id:
        type: "string"
      icon:
        type: "string"
        description: "The mapping is:\n'mediaSTB': ['appletv', 'chromecast', 'tivo',\
          \ 'np-'],\n'camera' : ['cam'],\n'gamingConsole' : ['xbox', 'ps3', 'ps4'],\n\
          'smartPhone' : ['iphone', 'ipod', 'phone', 'android'],\n'tablet' : ['ipad',\
          \ 'kindle'],\n'imac' : ['imac', 'macintosh'],\n'desktop' : ['desktop'],\n\
          'routerbox' : ['linksys', 'netgear', 'asus', 'belkin', 'airport'],\n'laptop'\
          \ : ['mbp', 'air', 'macbook', 'pc', 'thinkpad'],\n'printer' : ['printer',\
          \ 'epson'],\n'tv' : ['tv', 'vizo'],\n'voipPhone' : ['voip'],\n'speaker'\
          \ : ['sonos'],\n'lightbulb' : ['lifx']"
      mac:
        type: "string"
      accessZone:
        type: "string"
        description: "home | guests | internetAccessOnly"
      keyId:
        type: "number"
        format: "double"
        description: "unique id of the WifiNetwork.keys[x] that the device is connected\
          \ to or last connected to"
      medium:
        type: "string"
        description: "wifi or ethernet"
      ip:
        type: "string"
      freqBand:
        type: "string"
        description: "2.4G or 5G or 6G, undefined if medium ethernet"
      channel:
        type: "number"
        format: "double"
        description: "undefined if medium ethernet"
      name:
        type: "string"
        description: "host name else mac"
      connectionState:
        type: "string"
        description: "connected, disconnected, or unavailable"
      connectionStateChangeAt:
        type: "string"
        format: "date-time"
        description: "time at which connectionStateChange last changed"
      health:
        type: "object"
        description: "healthy, poor, or degraded"
        properties: {}
      leafToRoot:
        type: "array"
        description: "the list member is the parentId and freqBand,\n from its pod\
          \ to the root/gateway."
        items:
          type: "object"
          properties: {}
      mobileAppDeviceUuid:
        type: "string"
        description: "Unique identifier for mobile devices that the mobile app generates\
          \ and controls"
    example:
      accessZone: "accessZone"
      freqBand: "freqBand"
      connectionState: "connectionState"
      ip: "ip"
      connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
      icon: "icon"
      channel: 7.061401241503109
      keyId: 2.3021358869347655
      health: "{}"
      medium: "medium"
      mac: "mac"
      mobileAppDeviceUuid: "mobileAppDeviceUuid"
      name: "name"
      leafToRoot:
      - "{}"
      - "{}"
      id: "id"
    additionalProperties: false
  WifiDashboardResponse:
    type: "object"
    required:
    - "ssid"
    properties:
      ssid:
        type: "string"
      accessZones:
        type: "array"
        items:
          $ref: "#/definitions/WifiAccessZoneResponse"
    example:
      ssid: "ssid"
      accessZones:
      - keys:
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: 0.8008281904610115
        type: "type"
        accessibleDevices:
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
      - keys:
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: 0.8008281904610115
        type: "type"
        accessibleDevices:
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
    additionalProperties: false
  CustomDeviceType:
    type: "object"
    required:
    - "_version"
    - "typeIdentified"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      typeIdentified:
        type: "boolean"
      icon:
        type: "string"
      iconV2:
        type: "string"
      category:
        type: "string"
      brand:
        type: "string"
      model:
        type: "string"
      osName:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      id:
        type: "number"
        format: "double"
    example:
      iconV2: "iconV2"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      icon: "icon"
      model: "model"
      id: 0.8008281904610115
      category: "category"
      osName: "osName"
      _version: "1.0.0"
      brand: "brand"
      typeIdentified: true
    additionalProperties: false
  WifiNetwork:
    type: "object"
    required:
    - "_version"
    - "encryptionKey"
    - "masterKeyIndex"
    - "ssid"
    properties:
      encryptionKey:
        type: "string"
      ssid:
        type: "string"
      masterKeyIndex:
        type: "number"
        format: "double"
        description: "keys[] array index of the password to be used as the original\
          \ home password for backwards compatibility for locations that don't use\
          \ home pass (yet)"
        default: 0.0
      encryption:
        type: "string"
        enum:
        - "OPEN"
        - "WEP"
        - "WPA-EAP"
        - "WPA-PSK"
      wpaMode:
        type: "string"
        description: "open || psk-mixed || sae-mixed || psk2 || sae"
        default: "psk2"
      encryptionMode:
        type: "string"
        enum:
        - "1"
        - "2"
        - "mixed"
        - "64"
        - "128"
      radiusServerIp:
        type: "string"
      radiusServerPort:
        type: "number"
        format: "double"
      ssidBroadcast:
        type: "boolean"
      uapsd:
        type: "boolean"
        default: true
      enabled:
        type: "boolean"
        description: "enables the VAPs and radios and backhauls"
        default: true
      disableDefaultServiceNetwork:
        type: "boolean"
        description: "disables the primary network VAP"
        default: false
      groupRekey:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      fastTransition:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      minWifiMode24:
        type: "string"
        description: "auto || 11b || 11g || 11n"
        default: "auto"
      privateMode:
        type: "boolean"
        default: false
      privateModeUpdatedAt:
        type: "string"
        format: "date-time"
        description: "Privacy Mode Visibility with timestamp in Frontline"
      devicesVisibleToGuests:
        type: "array"
        description: "the list of the device mac addresses"
        items:
          type: "string"
      defaultSecurityPolicy:
        description: "location's default security policy"
        $ref: "#/definitions/WifiSecurityPolicy"
      content:
        type: "array"
        description: "content filter of the master key[masterKeyIndex]: kids || teenagers\
          \ || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate"
        items:
          type: "string"
      appliesToAllDevicesSecurityPolicy:
        description: "location's default security policy"
        $ref: "#/definitions/WifiSecurityPolicy"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      wpaModeDeferredExpiresAt:
        type: "string"
        description: "Hold off setting wpaMode on devices for WPA3 onboarding for\
          \ a set amount of time."
      id:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
      keys:
        type: "array"
        items:
          $ref: "#/definitions/WifiNetworkKey"
      persons:
        type: "array"
        items:
          $ref: "#/definitions/WifiSecurityPolicy"
      devices:
        type: "array"
        items:
          $ref: "#/definitions/WifiSecurityPolicy"
      accessZones:
        type: "array"
        items:
          $ref: "#/definitions/WifiAccessZone"
    example:
      masterKeyIndex: 0.8008281904610115
      minWifiMode24: "auto"
      keys:
      - accessZone: "accessZone"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        accessZoneId: 5.962133916683182
        enable: true
        format: "format"
        id: 1.4658129805029452
        encryptionKey: "encryptionKey"
        _version: "1.0.0"
        content:
        - "content"
        - "content"
        expiresAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - accessZone: "accessZone"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        accessZoneId: 5.962133916683182
        enable: true
        format: "format"
        id: 1.4658129805029452
        encryptionKey: "encryptionKey"
        _version: "1.0.0"
        content:
        - "content"
        - "content"
        expiresAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      privateMode: false
      wpaModeDeferredExpiresAt: "wpaModeDeferredExpiresAt"
      encryptionKey: "encryptionKey"
      radiusServerIp: "radiusServerIp"
      ssid: "ssid"
      enabled: true
      content:
      - "content"
      - "content"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      defaultSecurityPolicy:
        iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      encryption: "OPEN"
      encryptionMode: "1"
      devicesVisibleToGuests:
      - "devicesVisibleToGuests"
      - "devicesVisibleToGuests"
      id: {}
      ssidBroadcast: true
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      devices:
      - iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      uapsd: true
      privateModeUpdatedAt: "2000-01-23T04:56:07.000+00:00"
      disableDefaultServiceNetwork: false
      accessZones:
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: 5.637376656633329
        type: "type"
        accessibleDevices:
        - {}
        - {}
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        description: "description"
        id: 5.637376656633329
        type: "type"
        accessibleDevices:
        - {}
        - {}
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      fastTransition: "auto"
      appliesToAllDevicesSecurityPolicy:
        iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      persons:
      - iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - iotProtect: true
        createdAt: "2000-01-23T04:56:07.000+00:00"
        iotProtectReason: "iotProtectReason"
        secureWebsites: "{}"
        websites: "{}"
        id: "id"
        content:
        - "content"
        - "content"
        iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      wpaMode: "psk2"
      radiusServerPort: 6.027456183070403
      groupRekey: "auto"
    additionalProperties: false
  WifiNetworkKey:
    type: "object"
    required:
    - "_version"
    - "accessZone"
    - "encryptionKey"
    - "format"
    - "id"
    properties:
      id:
        type: "number"
        format: "double"
      encryptionKey:
        type: "string"
        description: "a password for parent WifiNetwork.ssid"
      accessZone:
        type: "string"
        description: "home | guests | internetAccessOnly"
      accessZoneId:
        type: "number"
        format: "double"
        description: "home:0 | internetAccessOnly:1 | guests:2 | guests:3 | guests:4"
      format:
        type: "string"
        description: "encryptionKey | phoneNumber"
      enable:
        type: "boolean"
        description: "devices can connect using this encryptionKey"
      content:
        type: "array"
        description: "content filter IDs: kids || teenagers || adBlocking || spamPhishMalware\
          \ || adultAndSensitive || workAppropriate"
        items:
          type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      expiresAt:
        type: "string"
        format: "date-time"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
    example:
      accessZone: "accessZone"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      accessZoneId: 5.962133916683182
      enable: true
      format: "format"
      id: 1.4658129805029452
      encryptionKey: "encryptionKey"
      _version: "1.0.0"
      content:
      - "content"
      - "content"
      expiresAt: "2000-01-23T04:56:07.000+00:00"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  WifiAccessZone:
    type: "object"
    required:
    - "_version"
    - "description"
    - "id"
    - "type"
    properties:
      id:
        type: "number"
        format: "double"
      type:
        type: "string"
        description: "home | guests | internetAccessOnly"
      description:
        type: "string"
        description: "name of accessZone"
      accessibleDevices:
        type: "array"
        description: "macs of home devices visible to guests"
        items:
          $ref: "#/definitions/x-any"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      id: 5.637376656633329
      type: "type"
      accessibleDevices:
      - {}
      - {}
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Invitation:
    type: "object"
    required:
    - "expiresAt"
    - "id"
    properties:
      id:
        type: "string"
      keyId:
        type: "number"
        format: "double"
      url:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      expiresAt:
        type: "string"
        format: "date-time"
        description: "used by Mongo to auto delete the document"
      wifiNetworkId:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      keyId: 0.8008281904610115
      id: "id"
      wifiNetworkId: {}
      url: "url"
      expiresAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationSpeedTest:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.1"
      enable:
        type: "boolean"
        description: "if network is idle, ISP speedtests will be run on a gateway\
          \ node every 3 hours"
      speedCapable:
        type: "boolean"
        description: "The first ISP Speed Test on a gateway node had speed results\
          \ above a minimum threshold"
      enableAllNodes:
        type: "boolean"
        description: "if network is idle, ISP speedtests will be run on every node\
          \ twice a day"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      enable: true
      speedCapable: true
      _version: "1.0.1"
      enableAllNodes: true
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  CapabilitiesResponse:
    type: "object"
    required:
    - "_version"
    - "capabilitiesChangedAt"
    - "deviceFreeze"
    - "ispSpeedTest"
    - "multiPasswordSSID"
    - "networkConfiguration"
    - "security"
    - "wifiMotion"
    properties:
      networkConfiguration:
        $ref: "#/definitions/NetworkConfigurationCapabilitiesResponse"
      security:
        description: "Firmware capabilities for security features."
        $ref: "#/definitions/SecurityCapabilitiesResponse"
      ispSpeedTest:
        description: "ISP speed test availability for a location"
        $ref: "#/definitions/Capability"
      deviceFreeze:
        description: "support for device freeze templates"
        $ref: "#/definitions/Capability"
      multiPasswordSSID:
        description: "support for non-host access (a.k.a., Single SSID, Multi Password\
          \ onboarding)"
        $ref: "#/definitions/Capability"
      wifiMotion:
        description: "support for wifi motion features"
        $ref: "#/definitions/Capability"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      capabilitiesChangedAt:
        type: "string"
        format: "date-time"
      createdAt:
        type: "string"
        format: "date-time"
    example:
      deviceFreeze:
        reason: "reason"
        disabled: true
      capabilitiesChangedAt: "2000-01-23T04:56:07.000+00:00"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      security:
        dnsCategoryBlocking:
          reason: "reason"
          disabled: true
      networkConfiguration:
        networkMode:
          reason: "reason"
          disabled: true
        igmpProxy:
          reason: "reason"
          disabled: true
        portForward:
          reason: "reason"
          disabled: true
        multicastToUnicast:
          reason: "reason"
          disabled: true
        upnp:
          reason: "reason"
          disabled: true
        mldProxy:
          reason: "reason"
          disabled: true
        dnsServers:
          reason: "reason"
          disabled: true
        dhcpReservations:
          reason: "reason"
          disabled: true
        igmpSnooping:
          reason: "reason"
          disabled: true
      ispSpeedTest:
        reason: "reason"
        disabled: true
      wifiMotion:
        reason: "reason"
        disabled: true
      multiPasswordSSID:
        reason: "reason"
        disabled: true
      _version: "1.0.0"
    additionalProperties: false
  ClientSteeringConfiguration:
    type: "object"
    required:
    - "auto"
    - "updatedAt"
    properties:
      auto:
        type: "boolean"
        default: true
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      auto: true
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  SecurityConfiguration:
    type: "object"
    required:
    - "_version"
    - "dpiContentFiltering"
    - "inlineDpi"
    - "ipThreatIntelligence"
    - "ipThreatProtect"
    - "ipThreatProvider"
    - "preferredIntelligence"
    - "updatedAt"
    - "wcHealthTelemetry"
    - "wcHeroTelemetry"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      preferredIntelligence:
        type: "string"
        description: "auto || BrightCloud || Webpulse || Gatekeeper"
        default: "auto"
      ipThreatIntelligence:
        type: "string"
        description: "auto || BrightCloud || Webpulse || Gatekeeper"
      wcHealthTelemetry:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      wcHeroTelemetry:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      ipThreatProtect:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      dpiContentFiltering:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      inlineDpi:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      dosProtection:
        type: "object"
        properties: {}
      ipThreatProvider:
        type: "string"
        description: "auto || plume || norton"
        default: "auto"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      ipThreatIntelligence: "ipThreatIntelligence"
      dosProtection: "{}"
      wcHealthTelemetry: "auto"
      inlineDpi: "auto"
      dpiContentFiltering: "auto"
      wcHeroTelemetry: "auto"
      ipThreatProtect: "auto"
      ipThreatProvider: "auto"
      _version: "1.0.0"
      preferredIntelligence: "auto"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationBandSteering:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      auto:
        type: "boolean"
        description: "deprecated"
        default: true
      mode:
        type: "string"
        description: "auto | enable | disable"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      mode: "mode"
      auto: true
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationBackhaul:
    type: "object"
    required:
    - "_version"
    - "mode"
    - "wpaKey"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      mode:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      wpaKey:
        type: "string"
        description: "63 characters, all CAPS, Hexadecimal"
      dynamicBeacon:
        type: "string"
        description: "Represents whether or not dynamic beaconing is available for\
          \ this location.\nCan be either auto, enable, or disable"
        default: "auto"
      wds:
        type: "string"
        description: "auto || enable || disable"
        default: "auto"
      wpaMode:
        type: "string"
        description: "auto || psk2 || sae-mixed"
        default: "auto"
      wpaModeRealized:
        type: "string"
        description: "psk2 || sae-mixed"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      mode: "auto"
      dynamicBeacon: "auto"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      wpaMode: "auto"
      wds: "auto"
      wpaModeRealized: "wpaModeRealized"
      _version: "1.0.0"
      wpaKey: "wpaKey"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationControlMode:
    type: "object"
    required:
    - "updatedAt"
    properties:
      mode:
        type: "string"
        description: "full | monitor | reduced | battery"
        default: "full"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      mode: "full"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationMonitorMode:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      enable:
        type: "boolean"
        default: true
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      enable: true
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Optimizations:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      auto:
        type: "boolean"
        default: true
      enable:
        type: "boolean"
      dfsMode:
        type: "string"
        default: "auto"
      prefer160MhzMode:
        type: "string"
        default: "auto"
      hopPenalty:
        type: "string"
        default: "auto"
      preCACScheduler:
        type: "string"
        default: "auto"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      preCACScheduler: "auto"
      auto: true
      dfsMode: "auto"
      prefer160MhzMode: "auto"
      enable: true
      _version: "1.0.0"
      hopPenalty: "auto"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Locale:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      region:
        type: "string"
        description: "during optimizations, used to determine allowed WiFi channels.\
          \ Possible values: US, SINGAPORE, UK, EU, CANADA, JP."
      dfsMode:
        type: "string"
        description: "enum of values include: auto, enable, disable, demo, HomeNonDFSChannels,\
          \ usDfs"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      dfsMode: "dfsMode"
      region: "region"
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Authorizations:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      numPodsAuthorized:
        type: "number"
        format: "double"
        description: "number of leaf pods that are authorized to be claimed and be\
          \ a part of the Plume network"
        default: 32.0
      numNodesAuthorized:
        type: "array"
        items:
          $ref: "#/definitions/NodeAuthorization"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      numNodesAuthorized:
      - count: 5.637376656633329
        model: "model"
      - count: 5.637376656633329
        model: "model"
      _version: "1.0.0"
      numPodsAuthorized: 5.962133916683182
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NodeAuthorization:
    type: "object"
    required:
    - "count"
    - "model"
    properties:
      model:
        type: "string"
        description: "Plume pod model id"
      count:
        type: "number"
        format: "double"
        description: "number of pods that are authorized to be claimed for the associated\
          \ model"
    example:
      count: 5.637376656633329
      model: "model"
    additionalProperties: false
  LocationWanSettings:
    type: "object"
    required:
    - "_version"
    - "connectionType"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.1"
      connectionType:
        type: "string"
        description: "static, pppoe, or dynamic"
      updatedAt:
        type: "string"
        format: "date-time"
      static:
        $ref: "#/definitions/WanSettingsStatic"
      pppoe:
        $ref: "#/definitions/WanSettingsPppoe"
    example:
      static:
        ipAddress: "ipAddress"
        subnetMask: "subnetMask"
        defaultGateway: "defaultGateway"
      pppoe:
        password: "password"
        name: "name"
      _version: "1.0.1"
      connectionType: "connectionType"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  DhcpReservation:
    type: "object"
    required:
    - "ip"
    - "mac"
    properties:
      mac:
        type: "string"
      hostname:
        type: "string"
      ip:
        type: "string"
    example:
      hostname: "hostname"
      ip: "ip"
      mac: "mac"
    additionalProperties: false
  Multicast:
    type: "object"
    properties:
      igmpSnooping:
        $ref: "#/definitions/IgmpSnooping"
      igmpProxy:
        $ref: "#/definitions/IgmpProxy"
      mldProxy:
        $ref: "#/definitions/MldProxy"
      multicastToUnicast:
        $ref: "#/definitions/MulticastToUnicast"
    example:
      igmpProxy:
        mode: "auto"
      multicastToUnicast:
        mode: "auto"
      mldProxy:
        mode: "auto"
      igmpSnooping:
        mode: "auto"
    additionalProperties: false
  EthernetLan:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
    example:
      mode: "auto"
    additionalProperties: false
  Upnp:
    type: "object"
    required:
    - "enabled"
    properties:
      enabled:
        type: "boolean"
        default: false
      mode:
        type: "string"
      modeRealized:
        type: "boolean"
    example:
      mode: "mode"
      modeRealized: true
      enabled: false
    additionalProperties: false
  DnsServers:
    type: "object"
    required:
    - "enabled"
    properties:
      primaryDns:
        type: "string"
      enabled:
        type: "boolean"
        default: true
      secondaryDns:
        type: "string"
    example:
      primaryDns: "primaryDns"
      secondaryDns: "secondaryDns"
      enabled: true
    additionalProperties: false
  NetworkConfigurationHome:
    type: "object"
    required:
    - "networkMode"
    properties:
      networkMode:
        type: "string"
      dnsServers:
        $ref: "#/definitions/DnsServers"
      upnp:
        $ref: "#/definitions/Upnp"
      igmpSnooping:
        $ref: "#/definitions/IgmpSnooping"
    example:
      networkMode: "networkMode"
      upnp:
        mode: "mode"
        modeRealized: true
        enabled: false
      dnsServers:
        primaryDns: "primaryDns"
        secondaryDns: "secondaryDns"
        enabled: true
      igmpSnooping:
        mode: "auto"
    additionalProperties: false
  PortForward:
    type: "object"
    required:
    - "externalPort"
    - "internalPort"
    - "protocol"
    properties:
      externalPort:
        type: "number"
        format: "double"
      internalPort:
        type: "number"
        format: "double"
      protocol:
        type: "string"
      name:
        type: "string"
    example:
      protocol: "protocol"
      internalPort: 6.027456183070403
      name: "name"
      externalPort: 0.8008281904610115
    additionalProperties: false
  OnboardingCheckpointResponse:
    type: "object"
    required:
    - "checkpoint"
    properties:
      checkpoint:
        description: "the last recorded checkpoint."
        $ref: "#/definitions/OnboardingCheckpoint"
    example:
      checkpoint:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        id: {}
        value: "value"
        timestamp: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  SummaryResponse:
    type: "object"
    required:
    - "_version"
    - "connectedDeviceCount"
    - "gatewayConnectionState"
    - "networkModeRealized"
    - "nodeClaimedCount"
    - "nodeConnectedCount"
    - "topology"
    - "wifiNetworkProvisioned"
    properties:
      _version:
        type: "string"
        description: "schema version # of the API response"
        default: "1.0.0"
      wifiNetworkProvisioned:
        type: "boolean"
        description: "The customer has submitted a valid SSID and password or not"
      onboardingStatus:
        type: "string"
        description: "unknown, OnboardingComplete, NotificationAccepted, or PodsAdded"
      networkModeProvisioned:
        type: "string"
        description: "'auto', 'bridge', 'router' for users to choose from NOC"
      optimization:
        type: "object"
        description: "'contains fields: state, stateChangedAt, and trigger"
        properties: {}
      monitorMode:
        type: "boolean"
      timestamp:
        type: "string"
        description: "ISO Date of returned topology, optional if in included in client\
          \ API call"
      topology:
        type: "array"
        description: "List of Nodes"
        items:
          $ref: "#/definitions/NodeResponse"
      gatewayConnectionState:
        type: "string"
        description: "connected or disconnected"
      nodeConnectedCount:
        type: "number"
        format: "double"
        description: "count total nodes with 'connected' connectionState"
      nodeClaimedCount:
        type: "number"
        format: "double"
        description: "nodeArray length"
      connectedDeviceCount:
        type: "number"
        format: "double"
        description: "count total devices with 'connected' connectionState"
      networkModeRealized:
        type: "string"
        description: "default value is 'unknow', 'bridge' if there is no router for\
          \ all connected pods, 'router' if there is a connected pod with 'router'"
    example:
      networkModeRealized: "networkModeRealized"
      topology:
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
      nodeConnectedCount: 2.027123023002322
      networkModeProvisioned: "networkModeProvisioned"
      onboardingStatus: "onboardingStatus"
      nodeClaimedCount: 4.145608029883936
      optimization: "{}"
      connectedDeviceCount: 7.386281948385884
      gatewayConnectionState: "gatewayConnectionState"
      wifiNetworkProvisioned: true
      _version: "1.0.0"
      monitorMode: true
      timestamp: "timestamp"
    additionalProperties: false
  TopologyResponse:
    type: "object"
    required:
    - "_version"
    - "connectedDeviceCount"
    - "gatewayConnectionState"
    - "networkModeRealized"
    - "nodeClaimedCount"
    - "nodeConnectedCount"
    - "topology"
    properties:
      _version:
        type: "string"
        description: "schema version # of the API response"
        default: "1.0.0"
      timestamp:
        type: "string"
        description: "ISO Date of returned topology, optional if in included in client\
          \ API call"
      topology:
        type: "array"
        description: "List of Nodes"
        items:
          $ref: "#/definitions/NodeResponse"
      gatewayConnectionState:
        type: "string"
        description: "connected or disconnected"
      nodeConnectedCount:
        type: "number"
        format: "double"
        description: "count total nodes with 'connected' connectionState"
      nodeClaimedCount:
        type: "number"
        format: "double"
        description: "nodeArray length"
      connectedDeviceCount:
        type: "number"
        format: "double"
        description: "count total devices with 'connected' connectionState"
      networkModeRealized:
        type: "string"
        description: "default value is 'unknow', 'bridge' if there is no router for\
          \ all connected pods, 'router' if there is a connected pod with 'router'"
    example:
      networkModeRealized: "networkModeRealized"
      nodeClaimedCount: 6.027456183070403
      connectedDeviceCount: 1.4658129805029452
      topology:
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
      nodeConnectedCount: 0.8008281904610115
      gatewayConnectionState: "gatewayConnectionState"
      _version: "1.0.0"
      timestamp: "timestamp"
    additionalProperties: false
  Node:
    type: "object"
    required:
    - "_version"
    - "serialNumber"
    properties:
      serialNumber:
        type: "string"
      id:
        type: "string"
        description: "always returns the value of 'serialNumber'"
      manufacturerSerialNumber:
        type: "string"
        description: "value from the firmware's OVS AWLAN_Node.serial_number column"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      subscriptionRequired:
        type: "boolean"
        description: "if true, Plume mobile app customers will need to activate a\
          \ subscription to use our service"
        default: false
      residentialGateway:
        type: "boolean"
        description: "residential gateways (mostly auto imported) require special\
          \ treatment and searchability"
        default: false
      firmwareVersion:
        type: "string"
      platformVersion:
        type: "string"
      model:
        type: "string"
        description: "reported by OVS schema"
      backhaulDhcpPoolIdx:
        type: "number"
        format: "double"
      radioMac24:
        type: "string"
      radioMac50:
        type: "string"
      radioMac60:
        type: "string"
      ethernetMac:
        type: "string"
      bluetoothMac:
        type: "string"
      thread:
        type: "string"
      blacklists:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      connectionState:
        type: "string"
      countryCode:
        type: "string"
      networkMode:
        type: "string"
        description: "the default value is 'auto', users can choose 'router' or 'auto'"
      macs:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      nickname:
        type: "string"
      boxSerialNumber:
        type: "string"
      packId:
        type: "string"
      status:
        type: "string"
      timestamp:
        type: "string"
        format: "date-time"
        description: "date/time node was claimed"
      updatedAt:
        type: "string"
        format: "date-time"
      productFamily:
        type: "string"
        description: "Manufacturer Product Family (Alpha)"
      productDescriptor:
        type: "string"
        description: "1 = Pod, 2x2 DBDC, 1xGbE Ethernet, BLE, All Plug Types"
      manufactureLocation:
        type: "string"
        description: "1 = Arcadyan Kunshan"
      manufactureYear:
        type: "string"
        description: "6 (2016), 7 (2017)"
      manufactureWeek:
        type: "string"
        description: "48 (week 48), 01,02,03,- 52"
      deployment:
        type: "string"
        description: "used by redirector to route pods"
      shardNumber:
        type: "string"
        description: "used by redirector to route pods"
      synchronizedKey:
        type: "string"
      connectionStateChangeAt:
        type: "string"
        format: "date-time"
        description: "time at which connectionStateChange last changed"
      ethernetLan:
        type: "object"
        description: "gives the ability to enable or disable individual pods ethernetLan"
        properties: {}
      customerId:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
      vendor:
        $ref: "#/definitions/NodeVendor"
      certificates:
        $ref: "#/definitions/NodeCertificates"
      kvConfigs:
        type: "array"
        items:
          $ref: "#/definitions/KvConfig"
    description: "Plume internal-only APIs."
    example:
      productFamily: "productFamily"
      subscriptionRequired: false
      productDescriptor: "productDescriptor"
      connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
      kvConfigs:
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        module: "module"
        persist: false
        id: {}
        value: "value"
        key: "key"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        module: "module"
        persist: false
        id: {}
        value: "value"
        key: "key"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      manufactureWeek: "manufactureWeek"
      radioMac24: "radioMac24"
      manufacturerSerialNumber: "manufacturerSerialNumber"
      radioMac60: "radioMac60"
      boxSerialNumber: "boxSerialNumber"
      countryCode: "countryCode"
      vendor:
        factory: "factory"
        name: "name"
        partNumber: "partNumber"
        mfgDate: "mfgDate"
        manufacturer: "manufacturer"
      platformVersion: "platformVersion"
      nickname: "nickname"
      model: "model"
      id: "id"
      firmwareVersion: "firmwareVersion"
      _version: "1.0.0"
      ethernetMac: "ethernetMac"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      deployment: "deployment"
      networkMode: "networkMode"
      synchronizedKey: "synchronizedKey"
      serialNumber: "serialNumber"
      ethernetLan: "{}"
      blacklists:
      - null
      - null
      connectionState: "connectionState"
      bluetoothMac: "bluetoothMac"
      manufactureLocation: "manufactureLocation"
      residentialGateway: false
      thread: "thread"
      packId: "packId"
      shardNumber: "shardNumber"
      certificates:
        rootBefore: "rootBefore"
        clientAfter: "clientAfter"
        clientBefore: "clientBefore"
        rootAfter: "rootAfter"
      radioMac50: "radioMac50"
      macs:
      - null
      - null
      backhaulDhcpPoolIdx: 9.301444243932576
      manufactureYear: "manufactureYear"
      status: "status"
    additionalProperties: false
  Device:
    type: "object"
    required:
    - "_version"
    - "mac"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      mac:
        type: "string"
      keyId:
        type: "number"
        format: "double"
        description: "unique id of the WifiNetwork.keys[x] that the device is connected\
          \ to or last connected to"
      hostName:
        type: "string"
        description: "host name from the device/user settings"
      model:
        type: "string"
        description: "device model"
      medium:
        type: "string"
        description: "wifi, ethernet, or moca"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.2"
      createdAt:
        type: "string"
        format: "date-time"
      onlineSince:
        type: "string"
        format: "date-time"
      offlineSince:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      connectionState:
        type: "string"
      connectionStateChangeAt:
        type: "string"
        format: "date-time"
        description: "time at which connectionStateChange last changed"
      vapType:
        type: "string"
        enum:
        - "backhaul"
        - "onboarding"
        - "home"
        - "guest"
        - "auxiliary1"
        - "auxiliary2"
        - "fronthaul"
        - "captivePortal"
      networkId:
        type: "string"
      favorite:
        type: "boolean"
        default: false
      hiddenAt:
        type: "string"
        format: "date-time"
        description: "Time at which user removed device from device list"
      appTime:
        type: "object"
        description: "device's appTime config"
        properties: {}
      mobileAppDeviceUuid:
        type: "string"
        description: "Unique identifier for mobile devices that the mobile app generates\
          \ and controls"
      locationId:
        $ref: "#/definitions/ObjectID"
      bandSteering:
        $ref: "#/definitions/DeviceBandSteering"
      clientSteering:
        $ref: "#/definitions/DeviceClientSteering"
      qos:
        $ref: "#/definitions/Qos"
    example:
      hiddenAt: "2000-01-23T04:56:07.000+00:00"
      hostName: "hostName"
      appTime: "{}"
      bandSteering:
        auto: true
        enable: false
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      connectionState: "connectionState"
      connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
      vapType: "backhaul"
      keyId: 0.8008281904610115
      medium: "medium"
      mac: "mac"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      qos:
        prioritization:
          mode: "auto"
      mobileAppDeviceUuid: "mobileAppDeviceUuid"
      model: "model"
      offlineSince: "2000-01-23T04:56:07.000+00:00"
      networkId: "networkId"
      clientSteering:
        auto: true
        enable: false
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      id: {}
      onlineSince: "2000-01-23T04:56:07.000+00:00"
      _version: "1.0.2"
      favorite: false
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NodeResponse:
    type: "object"
    required:
    - "2gChannel"
    - "5gChannel"
    - "backhaulType"
    - "connectedDeviceCount"
    - "connectionState"
    - "ip"
    - "leafToRoot"
    properties:
      id:
        type: "string"
      ip:
        type: "string"
      nickname:
        type: "string"
      defaultName:
        type: "string"
      firmwareVersion:
        type: "string"
      wifiConfig:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      channel:
        type: "string"
      connectionState:
        type: "string"
        description: "connected, disconnected, or unavailable"
      "2gChannel":
        type: "string"
      "5gChannel":
        type: "string"
      "6gChannel":
        type: "string"
      backhaulType:
        type: "string"
        description: "ethernet, wifi, or unknown"
      connectedDeviceCount:
        type: "number"
        format: "double"
        description: "count total devices with 'connected' connectionState"
      leafToRoot:
        type: "array"
        description: "the list member is the parentId and freqBand, from itself to\
          \ the root/gateway."
        items:
          type: "object"
          properties: {}
    example:
      connectionState: "connectionState"
      ip: "ip"
      wifiConfig:
      - null
      - null
      channel: "channel"
      backhaulType: "backhaulType"
      "2gChannel": "2gChannel"
      connectedDeviceCount: 3.616076749251911
      nickname: "nickname"
      leafToRoot:
      - "{}"
      - "{}"
      "5gChannel": "5gChannel"
      id: "id"
      firmwareVersion: "firmwareVersion"
      defaultName: "defaultName"
      "6gChannel": "6gChannel"
    additionalProperties: false
  NodeResponses:
    type: "object"
    required:
    - "nodes"
    properties:
      nodes:
        type: "array"
        description: "list of nodes associated to this Location."
        items:
          $ref: "#/definitions/NodeResponse"
    example:
      nodes:
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
      - connectionState: "connectionState"
        ip: "ip"
        wifiConfig:
        - null
        - null
        channel: "channel"
        backhaulType: "backhaulType"
        "2gChannel": "2gChannel"
        connectedDeviceCount: 3.616076749251911
        nickname: "nickname"
        leafToRoot:
        - "{}"
        - "{}"
        "5gChannel": "5gChannel"
        id: "id"
        firmwareVersion: "firmwareVersion"
        defaultName: "defaultName"
        "6gChannel": "6gChannel"
    additionalProperties: false
  Devices:
    type: "object"
    required:
    - "devices"
    properties:
      devices:
        type: "array"
        items:
          $ref: "#/definitions/DeviceResponse"
    example:
      devices:
      - accessZone: "accessZone"
        freqBand: "freqBand"
        connectionState: "connectionState"
        ip: "ip"
        connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
        icon: "icon"
        channel: 7.061401241503109
        keyId: 2.3021358869347655
        health: "{}"
        medium: "medium"
        mac: "mac"
        mobileAppDeviceUuid: "mobileAppDeviceUuid"
        name: "name"
        leafToRoot:
        - "{}"
        - "{}"
        id: "id"
      - accessZone: "accessZone"
        freqBand: "freqBand"
        connectionState: "connectionState"
        ip: "ip"
        connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
        icon: "icon"
        channel: 7.061401241503109
        keyId: 2.3021358869347655
        health: "{}"
        medium: "medium"
        mac: "mac"
        mobileAppDeviceUuid: "mobileAppDeviceUuid"
        name: "name"
        leafToRoot:
        - "{}"
        - "{}"
        id: "id"
    additionalProperties: false
  NodeClaimingResponse:
    type: "object"
    required:
    - "claimed"
    properties:
      claimed:
        type: "array"
        description: "list of claimed nodes that are ready to be plugged in."
        items:
          $ref: "#/definitions/ClaimedNode"
      id:
        type: "number"
        format: "double"
    example:
      claimed:
      - serialNumber: "serialNumber"
        nickname: "nickname"
        id: "id"
        defaultName: "defaultName"
        status: "status"
      - serialNumber: "serialNumber"
        nickname: "nickname"
        id: "id"
        defaultName: "defaultName"
        status: "status"
      id: 0.8008281904610115
    additionalProperties: false
  Room:
    type: "object"
    required:
    - "name"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      name:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      locationId:
        $ref: "#/definitions/ObjectID"
    description: "Room object"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: {}
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  LocationAccess:
    type: "object"
    required:
    - "createdAt"
    - "locationId"
    - "managerId"
    - "ownerId"
    - "updatedAt"
    properties:
      ownerId:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
      personId:
        type: "string"
      managerId:
        $ref: "#/definitions/ObjectID"
      accessType:
        type: "string"
        default: "admin"
      status:
        type: "string"
        default: "pending"
      id:
        $ref: "#/definitions/ObjectID"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      accessType: "admin"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      personId: "personId"
      ownerId: {}
      status: "pending"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NetworkAccessNetwork:
    type: "object"
    required:
    - "networkId"
    properties:
      networkId:
        type: "string"
      purgatory:
        type: "boolean"
        default: false
      heaven:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
    example:
      purgatory: false
      networkId: "networkId"
      heaven:
      - null
      - null
    additionalProperties: false
  NetworkAccessDeviceGroup:
    type: "object"
    required:
    - "groupId"
    properties:
      groupId:
        type: "string"
      networkId:
        type: "string"
      name:
        type: "string"
      devices:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
    example:
      devices:
      - null
      - null
      groupId: "groupId"
      name: "name"
      networkId: "networkId"
    additionalProperties: false
  PendingWhitelistRequests:
    type: "object"
    required:
    - "createdAt"
    - "locationId"
    - "updatedAt"
    properties:
      requestId:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
      personId:
        type: "string"
        description: "PersonId of the requester"
      requesterCustomerId:
        type: "string"
        description: "CustomerId of the requester"
      type:
        type: "string"
        description: "mac address of the Person's primary device"
      value:
        type: "string"
        description: "notification when person is away from home"
        default: "false"
      status:
        type: "string"
        description: "person's appTime config"
        default: "pending"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    description: "Requests for whitelisting of access"
    example:
      requesterCustomerId: "requesterCustomerId"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      requestId: {}
      personId: "personId"
      type: "type"
      value: "false"
      status: "pending"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  homepassCustomerSupportConfigurations:
    type: "object"
    properties:
      faqEnabled:
        type: "boolean"
        default: false
      addPodEnabled:
        type: "boolean"
        default: false
      removePodEnabled:
        type: "boolean"
        default: false
      contactUsEnabled:
        type: "boolean"
        default: false
      callUsEnabled:
        type: "boolean"
        default: false
      multilocationEnabled:
        type: "boolean"
        default: false
      buyPodEnabled:
        type: "boolean"
        default: false
      partnerBuyPodUrlEnabled:
        type: "boolean"
        default: false
      privacyEnabled:
        type: "boolean"
        default: false
      termsEnabled:
        type: "boolean"
        default: false
      removeGatewayEnabled:
        type: "boolean"
        default: false
      manageYourDataEnabled:
        type: "boolean"
        default: false
      autorunSpeedtestToggleEnabled:
        type: "boolean"
        default: false
      manageAccountEnabled:
        type: "boolean"
        default: false
      partnerAccountEnabled:
        type: "boolean"
        default: false
      chatSupportEnabled:
        type: "boolean"
        default: false
      hideIspNameEnabled:
        type: "boolean"
        default: false
      displayCustomLogoEnabled:
        type: "boolean"
        default: false
      mobileCustomDeeplinkEnabled:
        type: "boolean"
        default: false
      privacyUrl:
        type: "string"
      termsUrl:
        type: "string"
      faqUrl:
        type: "string"
      plumeBuyPodUrl:
        type: "string"
      partnerBuyPodUrl:
        type: "string"
      contactUsEmail:
        type: "string"
      callUsPhoneNumber:
        type: "string"
      callUsDisplayPhoneNumber:
        type: "string"
      manageYourDataUrl:
        type: "string"
      plumeAccountUrl:
        type: "string"
      partnerAccountUrl:
        type: "string"
      chatSupportUrl:
        type: "string"
      mobileCustomDeeplinkUrl:
        type: "string"
      androidStoreApplicationUrl:
        type: "string"
      iosStoreApplicationUrl:
        type: "string"
      logoResource:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      addPodEnabled: false
      privacyUrl: "privacyUrl"
      iosStoreApplicationUrl: "iosStoreApplicationUrl"
      logoResource: "logoResource"
      removeGatewayEnabled: false
      plumeAccountUrl: "plumeAccountUrl"
      displayCustomLogoEnabled: false
      manageYourDataUrl: "manageYourDataUrl"
      contactUsEmail: "contactUsEmail"
      mobileCustomDeeplinkUrl: "mobileCustomDeeplinkUrl"
      faqEnabled: false
      mobileCustomDeeplinkEnabled: false
      autorunSpeedtestToggleEnabled: false
      partnerBuyPodUrlEnabled: false
      id: {}
      removePodEnabled: false
      androidStoreApplicationUrl: "androidStoreApplicationUrl"
      callUsEnabled: false
      partnerAccountUrl: "partnerAccountUrl"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      hideIspNameEnabled: false
      faqUrl: "faqUrl"
      partnerBuyPodUrl: "partnerBuyPodUrl"
      contactUsEnabled: false
      manageYourDataEnabled: false
      partnerAccountEnabled: false
      buyPodEnabled: false
      callUsPhoneNumber: "callUsPhoneNumber"
      privacyEnabled: false
      chatSupportUrl: "chatSupportUrl"
      termsUrl: "termsUrl"
      plumeBuyPodUrl: "plumeBuyPodUrl"
      multilocationEnabled: false
      termsEnabled: false
      chatSupportEnabled: false
      callUsDisplayPhoneNumber: "callUsDisplayPhoneNumber"
      manageAccountEnabled: false
    additionalProperties: false
  workpassCustomerSupportConfigurations:
    type: "object"
    properties:
      faqEnabled:
        type: "boolean"
        default: false
      addPodEnabled:
        type: "boolean"
        default: false
      captivePortalGuestEmailDownloadDisabled:
        type: "boolean"
        default: false
      workPassWebappDisabled:
        type: "boolean"
        default: false
      removePodEnabled:
        type: "boolean"
        default: false
      contactUsEnabled:
        type: "boolean"
        default: false
      callUsEnabled:
        type: "boolean"
        default: false
      multilocationEnabled:
        type: "boolean"
        default: false
      buyPodEnabled:
        type: "boolean"
        default: false
      partnerBuyPodUrlEnabled:
        type: "boolean"
        default: false
      privacyEnabled:
        type: "boolean"
        default: false
      termsEnabled:
        type: "boolean"
        default: false
      removeGatewayEnabled:
        type: "boolean"
        default: false
      manageYourDataEnabled:
        type: "boolean"
        default: false
      autorunSpeedtestToggleEnabled:
        type: "boolean"
        default: false
      manageAccountEnabled:
        type: "boolean"
        default: false
      partnerAccountEnabled:
        type: "boolean"
        default: false
      chatSupportEnabled:
        type: "boolean"
        default: false
      hideIspNameEnabled:
        type: "boolean"
        default: false
      displayCustomLogoEnabled:
        type: "boolean"
        default: false
      mobileCustomDeeplinkEnabled:
        type: "boolean"
        default: false
      privacyUrl:
        type: "string"
      termsUrl:
        type: "string"
      faqUrl:
        type: "string"
      plumeBuyPodUrl:
        type: "string"
      partnerBuyPodUrl:
        type: "string"
      contactUsEmail:
        type: "string"
      callUsPhoneNumber:
        type: "string"
      callUsDisplayPhoneNumber:
        type: "string"
      manageYourDataUrl:
        type: "string"
      plumeAccountUrl:
        type: "string"
      partnerAccountUrl:
        type: "string"
      chatSupportUrl:
        type: "string"
      mobileCustomDeeplinkUrl:
        type: "string"
      androidStoreApplicationUrl:
        type: "string"
      iosStoreApplicationUrl:
        type: "string"
      webappUrl:
        type: "string"
        default: "https://web.workpass.plume.com"
      logoResource:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      addPodEnabled: false
      privacyUrl: "privacyUrl"
      iosStoreApplicationUrl: "iosStoreApplicationUrl"
      logoResource: "logoResource"
      removeGatewayEnabled: false
      plumeAccountUrl: "plumeAccountUrl"
      displayCustomLogoEnabled: false
      webappUrl: "https://web.workpass.plume.com"
      manageYourDataUrl: "manageYourDataUrl"
      contactUsEmail: "contactUsEmail"
      mobileCustomDeeplinkUrl: "mobileCustomDeeplinkUrl"
      faqEnabled: false
      workPassWebappDisabled: false
      mobileCustomDeeplinkEnabled: false
      autorunSpeedtestToggleEnabled: false
      partnerBuyPodUrlEnabled: false
      id: {}
      removePodEnabled: false
      androidStoreApplicationUrl: "androidStoreApplicationUrl"
      callUsEnabled: false
      partnerAccountUrl: "partnerAccountUrl"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      hideIspNameEnabled: false
      faqUrl: "faqUrl"
      partnerBuyPodUrl: "partnerBuyPodUrl"
      contactUsEnabled: false
      captivePortalGuestEmailDownloadDisabled: false
      manageYourDataEnabled: false
      partnerAccountEnabled: false
      buyPodEnabled: false
      callUsPhoneNumber: "callUsPhoneNumber"
      privacyEnabled: false
      chatSupportUrl: "chatSupportUrl"
      termsUrl: "termsUrl"
      plumeBuyPodUrl: "plumeBuyPodUrl"
      multilocationEnabled: false
      termsEnabled: false
      chatSupportEnabled: false
      callUsDisplayPhoneNumber: "callUsDisplayPhoneNumber"
      manageAccountEnabled: false
    additionalProperties: false
  AuditTrail:
    type: "object"
    required:
    - "author"
    - "createdAt"
    - "customerId"
    - "details"
    - "event"
    - "expiresAt"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      customerId:
        type: "string"
        description: "The customer id"
      locationId:
        type: "string"
        description: "The location id"
      partnerId:
        type: "string"
        description: "The partner id"
      author:
        type: "string"
        description: "The user who made the change"
      createdAt:
        type: "string"
        format: "date-time"
        description: "The date and time the change was made"
      expiresAt:
        type: "string"
        format: "date-time"
        description: "The date and time the change will expire"
      event:
        type: "string"
        description: "The type of event that occurred"
        enum:
        - "CustomerCreated"
        - "CustomerDeleted"
        - "CustomerConfigChanged"
        - "LocationCreated"
        - "LocationDeleted"
        - "LocationConfigChanged"
        - "NodeClaimed"
        - "NodeUnclaimed"
        - "MultiNodeClaimed"
        - "NodeSwapped"
        - "WifiConfigChanged"
        - "SecurityPolicyChanged"
      details:
        type: "object"
        description: "The details of the event"
        properties: {}
      xRequestId:
        type: "string"
        description: "The request id"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      locationId: "locationId"
      author: "author"
      customerId: "customerId"
      xRequestId: "xRequestId"
      details: "{}"
      id: {}
      partnerId: "partnerId"
      event: "CustomerCreated"
      expiresAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  ObjectID:
    type: "string"
    pattern: "^[a-fA-F\\d]{24}$"
  LocationClientSteering:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      auto:
        type: "boolean"
        description: "deprecated"
        default: true
      mode:
        type: "string"
        description: "auto | enable | disable"
      steeringClass:
        type: "string"
        description: "override deviceTypeId for testing purposes"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      mode: "mode"
      steeringClass: "steeringClass"
      auto: true
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  GeoIp:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      ip:
        type: "string"
      country:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      province:
        type: "string"
      latitude:
        type: "number"
        format: "double"
        description: "latitude of location based from IP."
      longitude:
        type: "number"
        format: "double"
        description: "longitude of location based from IP."
      timezone:
        type: "string"
        description: "timezone of location based from IP."
      ISP:
        type: "string"
        description: "ISP of location based from IP."
        default: "false"
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      updatedAt:
        type: "string"
        format: "date-time"
    description: "Location information recevied from geo IP service maxmind.com"
    example:
      country: "country"
      province: "province"
      city: "city"
      timezone: "timezone"
      ip: "ip"
      latitude: 0.8008281904610115
      ISP: "false"
      state: "state"
      _version: "1.0.0"
      longitude: 6.027456183070403
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NetworkStatus:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      status:
        type: "string"
        description: "Network status: [online | offline]"
      statusChangedAt:
        type: "string"
        format: "date-time"
        description: "Date time when status chenged."
      durationOfPreviousStatus:
        type: "number"
        format: "double"
        description: "Duration in seconds of previous status."
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      updatedAt:
        type: "string"
        format: "date-time"
    description: "Location's network status information recevied from awlan.location.networkStatusChanged\
      \ event"
    example:
      statusChangedAt: "2000-01-23T04:56:07.000+00:00"
      _version: "1.0.0"
      status: "status"
      durationOfPreviousStatus: 1.4658129805029452
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NetworkAccess:
    type: "object"
    properties:
      hell:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      networks:
        type: "array"
        items:
          $ref: "#/definitions/NetworkAccessNetwork"
      personGroups:
        type: "array"
        items:
          $ref: "#/definitions/NetworkAccessDeviceGroup"
      deviceGroups:
        type: "array"
        items:
          $ref: "#/definitions/NetworkAccessDeviceGroup"
      groupShares:
        type: "array"
        items:
          $ref: "#/definitions/NetworkAccessGroupShare"
    example:
      groupShares:
      - groupIds:
        - null
        - null
      - groupIds:
        - null
        - null
      networks:
      - purgatory: false
        networkId: "networkId"
        heaven:
        - null
        - null
      - purgatory: false
        networkId: "networkId"
        heaven:
        - null
        - null
      hell:
      - null
      - null
      deviceGroups:
      - devices:
        - null
        - null
        groupId: "groupId"
        name: "name"
        networkId: "networkId"
      - devices:
        - null
        - null
        groupId: "groupId"
        name: "name"
        networkId: "networkId"
      personGroups:
      - devices:
        - null
        - null
        groupId: "groupId"
        name: "name"
        networkId: "networkId"
      - devices:
        - null
        - null
        groupId: "groupId"
        name: "name"
        networkId: "networkId"
    additionalProperties: false
  DppConfiguration:
    type: "object"
    required:
    - "locationId"
    properties:
      locationId:
        type: "string"
      mode:
        type: "string"
        default: "auto"
      enrollments:
        type: "array"
        items:
          $ref: "#/definitions/DppConfigurationEnrollment"
    example:
      mode: "auto"
      locationId: "locationId"
      enrollments:
      - sha256: "sha256"
        networkId: "networkId"
        bootstrapUri: "bootstrapUri"
      - sha256: "sha256"
        networkId: "networkId"
        bootstrapUri: "bootstrapUri"
    additionalProperties: false
  HaahsConfiguration:
    type: "object"
    required:
    - "locationId"
    properties:
      locationId:
        type: "string"
      mode:
        type: "string"
        default: "auto"
      subscription:
        $ref: "#/definitions/HaahsConfigurationSubscription"
    example:
      mode: "auto"
      locationId: "locationId"
      subscription:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        haahsConfiguration: "haahsConfiguration"
        status: "Not supported"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  SecondaryNetworks:
    type: "object"
    required:
    - "locationId"
    properties:
      locationId:
        type: "string"
      networkConfigs:
        type: "array"
        description: "Array of secondary network configurations"
        items:
          type: "object"
          properties: {}
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      locationId: "locationId"
      networkConfigs:
      - "{}"
      - "{}"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  PersonProfile:
    type: "object"
    required:
    - "_version"
    - "type"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      type:
        type: "string"
        description: "employee only for now"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      type: "type"
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  WifiAccessZoneResponse:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "number"
        format: "double"
        description: "accessZoneId"
      type:
        type: "string"
        description: "home | guests | internetAccessOnly"
      description:
        type: "string"
        description: "name of accessZone"
      accessibleDevices:
        type: "array"
        items:
          $ref: "#/definitions/DeviceResponse"
      keys:
        type: "array"
        items:
          $ref: "#/definitions/WifiNetworkKey"
    example:
      keys:
      - accessZone: "accessZone"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        accessZoneId: 5.962133916683182
        enable: true
        format: "format"
        id: 1.4658129805029452
        encryptionKey: "encryptionKey"
        _version: "1.0.0"
        content:
        - "content"
        - "content"
        expiresAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - accessZone: "accessZone"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        accessZoneId: 5.962133916683182
        enable: true
        format: "format"
        id: 1.4658129805029452
        encryptionKey: "encryptionKey"
        _version: "1.0.0"
        content:
        - "content"
        - "content"
        expiresAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      id: 0.8008281904610115
      type: "type"
      accessibleDevices:
      - accessZone: "accessZone"
        freqBand: "freqBand"
        connectionState: "connectionState"
        ip: "ip"
        connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
        icon: "icon"
        channel: 7.061401241503109
        keyId: 2.3021358869347655
        health: "{}"
        medium: "medium"
        mac: "mac"
        mobileAppDeviceUuid: "mobileAppDeviceUuid"
        name: "name"
        leafToRoot:
        - "{}"
        - "{}"
        id: "id"
      - accessZone: "accessZone"
        freqBand: "freqBand"
        connectionState: "connectionState"
        ip: "ip"
        connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
        icon: "icon"
        channel: 7.061401241503109
        keyId: 2.3021358869347655
        health: "{}"
        medium: "medium"
        mac: "mac"
        mobileAppDeviceUuid: "mobileAppDeviceUuid"
        name: "name"
        leafToRoot:
        - "{}"
        - "{}"
        id: "id"
    additionalProperties: false
  WifiSecurityPolicy:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        description: "Person Mongo ID || device mac"
      content:
        type: "array"
        description: "content filter IDs: kids || teenagers || adBlocking || spamPhishMalware\
          \ || adultAndSensitive || workAppropriate"
        items:
          type: "string"
      iotProtect:
        type: "boolean"
        description: "iotProtect enable/disable (enable requires secureAndProtect\
          \ already enabled)"
      iotProtectUpdatedAt:
        type: "string"
        format: "date-time"
      iotProtectReason:
        type: "string"
        description: "optional reason used to identify why it is being disabled (device\
          \ level only)"
      websites:
        type: "object"
        description: "has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]"
        properties: {}
      secureWebsites:
        type: "object"
        description: "has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]"
        properties: {}
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      iotProtect: true
      createdAt: "2000-01-23T04:56:07.000+00:00"
      iotProtectReason: "iotProtectReason"
      secureWebsites: "{}"
      websites: "{}"
      id: "id"
      content:
      - "content"
      - "content"
      iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NetworkConfigurationCapabilitiesResponse:
    type: "object"
    required:
    - "dhcpReservations"
    - "dnsServers"
    - "igmpProxy"
    - "igmpSnooping"
    - "mldProxy"
    - "multicastToUnicast"
    - "networkMode"
    - "portForward"
    - "upnp"
    properties:
      networkMode:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      upnp:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      igmpSnooping:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      igmpProxy:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      mldProxy:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      multicastToUnicast:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      dnsServers:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      dhcpReservations:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
      portForward:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
    example:
      networkMode:
        reason: "reason"
        disabled: true
      igmpProxy:
        reason: "reason"
        disabled: true
      portForward:
        reason: "reason"
        disabled: true
      multicastToUnicast:
        reason: "reason"
        disabled: true
      upnp:
        reason: "reason"
        disabled: true
      mldProxy:
        reason: "reason"
        disabled: true
      dnsServers:
        reason: "reason"
        disabled: true
      dhcpReservations:
        reason: "reason"
        disabled: true
      igmpSnooping:
        reason: "reason"
        disabled: true
    additionalProperties: false
  SecurityCapabilitiesResponse:
    type: "object"
    required:
    - "dnsCategoryBlocking"
    properties:
      dnsCategoryBlocking:
        description: "feature's availability for a location"
        $ref: "#/definitions/Capability"
    example:
      dnsCategoryBlocking:
        reason: "reason"
        disabled: true
    additionalProperties: false
  Capability:
    type: "object"
    required:
    - "disabled"
    properties:
      disabled:
        type: "boolean"
        default: true
      reason:
        type: "string"
    example:
      reason: "reason"
      disabled: true
    additionalProperties: false
  WanSettingsStatic:
    type: "object"
    required:
    - "defaultGateway"
    - "ipAddress"
    - "subnetMask"
    properties:
      ipAddress:
        type: "string"
      subnetMask:
        type: "string"
      defaultGateway:
        type: "string"
    example:
      ipAddress: "ipAddress"
      subnetMask: "subnetMask"
      defaultGateway: "defaultGateway"
    additionalProperties: false
  WanSettingsPppoe:
    type: "object"
    required:
    - "name"
    - "password"
    properties:
      name:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      name: "name"
    additionalProperties: false
  IgmpSnooping:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
    example:
      mode: "auto"
    additionalProperties: false
  IgmpProxy:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
    example:
      mode: "auto"
    additionalProperties: false
  MldProxy:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
    example:
      mode: "auto"
    additionalProperties: false
  MulticastToUnicast:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
    example:
      mode: "auto"
    additionalProperties: false
  OnboardingCheckpoint:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
      timestamp:
        type: "string"
        format: "date-time"
      createdAt:
        type: "string"
        format: "date-time"
      id:
        $ref: "#/definitions/ObjectID"
      locationId:
        $ref: "#/definitions/ObjectID"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      id: {}
      value: "value"
      timestamp: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  NodeVendor:
    type: "object"
    properties:
      name:
        type: "string"
      partNumber:
        type: "string"
      manufacturer:
        type: "string"
      factory:
        type: "string"
      mfgDate:
        type: "string"
    example:
      factory: "factory"
      name: "name"
      partNumber: "partNumber"
      mfgDate: "mfgDate"
      manufacturer: "manufacturer"
    additionalProperties: false
  NodeCertificates:
    type: "object"
    properties:
      clientAfter:
        type: "string"
      clientBefore:
        type: "string"
      rootAfter:
        type: "string"
      rootBefore:
        type: "string"
    example:
      rootBefore: "rootBefore"
      clientAfter: "clientAfter"
      clientBefore: "clientBefore"
      rootAfter: "rootAfter"
    additionalProperties: false
  DeviceBandSteering:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      enable:
        type: "boolean"
        default: false
      auto:
        type: "boolean"
        default: true
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      auto: true
      enable: false
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  DeviceClientSteering:
    type: "object"
    required:
    - "_version"
    - "updatedAt"
    properties:
      _version:
        type: "string"
        description: "schema version # of a Mongo document"
        default: "1.0.0"
      enable:
        type: "boolean"
        default: false
      auto:
        type: "boolean"
        default: true
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      auto: true
      enable: false
      _version: "1.0.0"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Qos:
    type: "object"
    properties:
      id:
        $ref: "#/definitions/ObjectID"
      prioritization:
        $ref: "#/definitions/Prioritization"
    example:
      prioritization:
        mode: "auto"
    additionalProperties: false
  ClaimedNode:
    type: "object"
    required:
    - "defaultName"
    - "nickname"
    - "serialNumber"
    - "status"
    properties:
      serialNumber:
        type: "string"
        description: "unique serialNumber"
      id:
        type: "string"
        description: "always returns the value of 'serialNumber'"
      nickname:
        type: "string"
        description: "a cool nickname"
      defaultName:
        type: "string"
        description: "defaultName is for code, display if empty nickname"
      status:
        type: "string"
        description: "connectionState"
    example:
      serialNumber: "serialNumber"
      nickname: "nickname"
      id: "id"
      defaultName: "defaultName"
      status: "status"
    additionalProperties: false
  NetworkAccessGroupShare:
    type: "object"
    required:
    - "groupIds"
    properties:
      groupIds:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
    example:
      groupIds:
      - null
      - null
    additionalProperties: false
  DppConfigurationEnrollment:
    type: "object"
    required:
    - "bootstrapUri"
    - "networkId"
    - "sha256"
    properties:
      bootstrapUri:
        type: "string"
      sha256:
        type: "string"
      networkId:
        type: "string"
    example:
      sha256: "sha256"
      networkId: "networkId"
      bootstrapUri: "bootstrapUri"
    additionalProperties: false
  HaahsConfigurationSubscription:
    type: "object"
    required:
    - "haahsConfiguration"
    properties:
      haahsConfiguration:
        type: "string"
      status:
        type: "string"
        default: "Not supported"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      haahsConfiguration: "haahsConfiguration"
      status: "Not supported"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
    additionalProperties: false
  Prioritization:
    type: "object"
    required:
    - "mode"
    properties:
      mode:
        type: "string"
        default: "auto"
      id:
        $ref: "#/definitions/ObjectID"
    example:
      mode: "auto"
    additionalProperties: false
  inline_response_200:
    type: "object"
    properties:
      undefined:
        type: "object"
        properties: {}
    example:
      undefined: "{}"
  inline_response_200_1:
    type: "object"
    properties:
      count:
        type: "number"
        format: "double"
    example:
      count: 0.8008281904610115
  inline_response_200_2:
    type: "object"
    properties:
      wifiNetwork:
        $ref: "#/definitions/WifiNetwork"
    example:
      wifiNetwork:
        masterKeyIndex: 0.8008281904610115
        minWifiMode24: "auto"
        keys:
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - accessZone: "accessZone"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          accessZoneId: 5.962133916683182
          enable: true
          format: "format"
          id: 1.4658129805029452
          encryptionKey: "encryptionKey"
          _version: "1.0.0"
          content:
          - "content"
          - "content"
          expiresAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        privateMode: false
        wpaModeDeferredExpiresAt: "wpaModeDeferredExpiresAt"
        encryptionKey: "encryptionKey"
        radiusServerIp: "radiusServerIp"
        ssid: "ssid"
        enabled: true
        content:
        - "content"
        - "content"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        defaultSecurityPolicy:
          iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        encryption: "OPEN"
        encryptionMode: "1"
        devicesVisibleToGuests:
        - "devicesVisibleToGuests"
        - "devicesVisibleToGuests"
        id: {}
        ssidBroadcast: true
        _version: "1.0.0"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        devices:
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        uapsd: true
        privateModeUpdatedAt: "2000-01-23T04:56:07.000+00:00"
        disableDefaultServiceNetwork: false
        accessZones:
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          description: "description"
          id: 5.637376656633329
          type: "type"
          accessibleDevices:
          - {}
          - {}
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          description: "description"
          id: 5.637376656633329
          type: "type"
          accessibleDevices:
          - {}
          - {}
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        fastTransition: "auto"
        appliesToAllDevicesSecurityPolicy:
          iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        persons:
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        - iotProtect: true
          createdAt: "2000-01-23T04:56:07.000+00:00"
          iotProtectReason: "iotProtectReason"
          secureWebsites: "{}"
          websites: "{}"
          id: "id"
          content:
          - "content"
          - "content"
          iotProtectUpdatedAt: "2000-01-23T04:56:07.000+00:00"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        wpaMode: "psk2"
        radiusServerPort: 6.027456183070403
        groupRekey: "auto"
  inline_response_200_3:
    type: "object"
    properties:
      mode:
        type: "string"
    example:
      mode: "mode"
  inline_response_200_4:
    type: "object"
    properties:
      ispSpeedTestConfiguration:
        $ref: "#/definitions/LocationSpeedTest"
    example:
      ispSpeedTestConfiguration:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        enable: true
        speedCapable: true
        _version: "1.0.1"
        enableAllNodes: true
        updatedAt: "2000-01-23T04:56:07.000+00:00"
  inline_response_200_5:
    type: "object"
    properties:
      networkMode:
        type: "string"
    example:
      networkMode: "networkMode"
  inline_response_200_6:
    type: "object"
    properties:
      location:
        $ref: "#/definitions/Location"
    example:
      location:
        wanSettings:
          static:
            ipAddress: "ipAddress"
            subnetMask: "subnetMask"
            defaultGateway: "defaultGateway"
          pppoe:
            password: "password"
            name: "name"
          _version: "1.0.1"
          connectionType: "connectionType"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        geoIp:
          country: "country"
          province: "province"
          city: "city"
          timezone: "timezone"
          ip: "ip"
          latitude: 0.8008281904610115
          ISP: "false"
          state: "state"
          _version: "1.0.0"
          longitude: 6.027456183070403
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        backhaul:
          mode: "auto"
          dynamicBeacon: "auto"
          createdAt: "2000-01-23T04:56:07.000+00:00"
          wpaMode: "auto"
          wds: "auto"
          wpaModeRealized: "wpaModeRealized"
          _version: "1.0.0"
          wpaKey: "wpaKey"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        networkStatus:
          statusChangedAt: "2000-01-23T04:56:07.000+00:00"
          _version: "1.0.0"
          status: "status"
          durationOfPreviousStatus: 1.4658129805029452
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        authorizations:
          numNodesAuthorized:
          - count: 5.637376656633329
            model: "model"
          - count: 5.637376656633329
            model: "model"
          _version: "1.0.0"
          numPodsAuthorized: 5.962133916683182
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        locale:
          dfsMode: "dfsMode"
          region: "region"
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        mDNSUniqueIdentifier: "mDNSUniqueIdentifier"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        isUtilizingSharedLocationFreezeSchedules: false
        networkAccess:
          groupShares:
          - groupIds:
            - null
            - null
          - groupIds:
            - null
            - null
          networks:
          - purgatory: false
            networkId: "networkId"
            heaven:
            - null
            - null
          - purgatory: false
            networkId: "networkId"
            heaven:
            - null
            - null
          hell:
          - null
          - null
          deviceGroups:
          - devices:
            - null
            - null
            groupId: "groupId"
            name: "name"
            networkId: "networkId"
          - devices:
            - null
            - null
            groupId: "groupId"
            name: "name"
            networkId: "networkId"
          personGroups:
          - devices:
            - null
            - null
            groupId: "groupId"
            name: "name"
            networkId: "networkId"
          - devices:
            - null
            - null
            groupId: "groupId"
            name: "name"
            networkId: "networkId"
        ispSpeedTestConfiguration:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          enable: true
          speedCapable: true
          _version: "1.0.1"
          enableAllNodes: true
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        ipv6: "{}"
        flex: false
        _secondaryNetworks:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          locationId: "locationId"
          networkConfigs:
          - "{}"
          - "{}"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        groupIds:
        - "groupIds"
        - "groupIds"
        id: {}
        serviceId: "serviceId"
        freezeTemplates: "{}"
        _version: "1.0.0"
        groupOfUnassignedDevicesFreezeTemplates:
        - {}
        - {}
        haahsConfiguration:
          mode: "auto"
          locationId: "locationId"
          subscription:
            createdAt: "2000-01-23T04:56:07.000+00:00"
            haahsConfiguration: "haahsConfiguration"
            status: "Not supported"
            updatedAt: "2000-01-23T04:56:07.000+00:00"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        networkMode: "auto"
        controlMode:
          mode: "full"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        stepFunctionTimers:
        - "{}"
        - "{}"
        uprise: false
        appTime: "{}"
        bandSteering:
          mode: "mode"
          auto: true
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        homeAwayActive: true
        dppConfiguration:
          mode: "auto"
          locationId: "locationId"
          enrollments:
          - sha256: "sha256"
            networkId: "networkId"
            bootstrapUri: "bootstrapUri"
          - sha256: "sha256"
            networkId: "networkId"
            bootstrapUri: "bootstrapUri"
        profile: "auto"
        groupOfUnassignedDevicesFreezeSchedules:
        - null
        - null
        serviceLevel: "{}"
        accountId: "accountId"
        name: "name"
        wifiMotion:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          auto: false
          id: {}
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        sniffing: "{}"
        clientSteering:
          mode: "mode"
          steeringClass: "steeringClass"
          auto: true
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        partnerId: "partnerId"
        region: "region"
        dayOneEmailsSent: true
        monitorMode:
          enable: true
          _version: "1.0.0"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
        optimizations:
          preCACScheduler: "auto"
          auto: true
          dfsMode: "auto"
          prefer160MhzMode: "auto"
          enable: true
          _version: "1.0.0"
          hopPenalty: "auto"
          updatedAt: "2000-01-23T04:56:07.000+00:00"
  inline_response_200_7:
    type: "object"
    properties:
      ssid:
        type: "string"
    example:
      ssid: "ssid"
  inline_response_200_8:
    type: "object"
    properties:
      emailCount:
        type: "number"
        format: "double"
      emailCollectionEnabled:
        type: "boolean"
      emailLoginEnabled:
        type: "boolean"
      consentEnabledOrNotRequired:
        type: "boolean"
    example:
      emailCollectionEnabled: true
      consentEnabledOrNotRequired: true
      emailLoginEnabled: true
      emailCount: 0.8008281904610115
  inline_response_200_9:
    type: "object"
    properties:
      checkpoint:
        $ref: "#/definitions/OnboardingCheckpointResponse"
    example:
      checkpoint:
        checkpoint:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          id: {}
          value: "value"
          timestamp: "2000-01-23T04:56:07.000+00:00"
  inline_response_200_10:
    type: "object"
    properties:
      nodes:
        $ref: "#/definitions/NodeResponses"
    example:
      nodes:
        nodes:
        - connectionState: "connectionState"
          ip: "ip"
          wifiConfig:
          - null
          - null
          channel: "channel"
          backhaulType: "backhaulType"
          "2gChannel": "2gChannel"
          connectedDeviceCount: 3.616076749251911
          nickname: "nickname"
          leafToRoot:
          - "{}"
          - "{}"
          "5gChannel": "5gChannel"
          id: "id"
          firmwareVersion: "firmwareVersion"
          defaultName: "defaultName"
          "6gChannel": "6gChannel"
        - connectionState: "connectionState"
          ip: "ip"
          wifiConfig:
          - null
          - null
          channel: "channel"
          backhaulType: "backhaulType"
          "2gChannel": "2gChannel"
          connectedDeviceCount: 3.616076749251911
          nickname: "nickname"
          leafToRoot:
          - "{}"
          - "{}"
          "5gChannel": "5gChannel"
          id: "id"
          firmwareVersion: "firmwareVersion"
          defaultName: "defaultName"
          "6gChannel": "6gChannel"
  inline_response_200_11:
    type: "object"
    properties:
      devices:
        $ref: "#/definitions/Devices"
    example:
      devices:
        devices:
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
        - accessZone: "accessZone"
          freqBand: "freqBand"
          connectionState: "connectionState"
          ip: "ip"
          connectionStateChangeAt: "2000-01-23T04:56:07.000+00:00"
          icon: "icon"
          channel: 7.061401241503109
          keyId: 2.3021358869347655
          health: "{}"
          medium: "medium"
          mac: "mac"
          mobileAppDeviceUuid: "mobileAppDeviceUuid"
          name: "name"
          leafToRoot:
          - "{}"
          - "{}"
          id: "id"
  inline_response_200_12:
    type: "object"
    properties:
      event:
        type: "object"
        properties: {}
    example:
      event: "{}"
