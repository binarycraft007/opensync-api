// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HaahsConfiguration haahs configuration
//
// swagger:model HaahsConfiguration
type HaahsConfiguration struct {

	// location Id
	// Required: true
	LocationID *string `json:"locationId"`

	// mode
	Mode *string `json:"mode,omitempty"`

	// subscription
	Subscription *HaahsConfigurationSubscription `json:"subscription,omitempty"`
}

// Validate validates this haahs configuration
func (m *HaahsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HaahsConfiguration) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("locationId", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *HaahsConfiguration) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this haahs configuration based on the context it is used
func (m *HaahsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HaahsConfiguration) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {
		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HaahsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HaahsConfiguration) UnmarshalBinary(b []byte) error {
	var res HaahsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
