// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityEvent security event
//
// swagger:model SecurityEvent
type SecurityEvent struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// event data
	EventData *SecurityEventEventData `json:"eventData,omitempty"`

	// event type
	EventType string `json:"eventType,omitempty"`
}

// Validate validates this security event
func (m *SecurityEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityEvent) validateEventData(formats strfmt.Registry) error {
	if swag.IsZero(m.EventData) { // not required
		return nil
	}

	if m.EventData != nil {
		if err := m.EventData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security event based on the context it is used
func (m *SecurityEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityEvent) contextValidateEventData(ctx context.Context, formats strfmt.Registry) error {

	if m.EventData != nil {
		if err := m.EventData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityEvent) UnmarshalBinary(b []byte) error {
	var res SecurityEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SecurityEventEventData security event event data
//
// swagger:model SecurityEventEventData
type SecurityEventEventData struct {

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// mac
	Mac string `json:"mac,omitempty"`

	// protection type
	ProtectionType string `json:"protectionType,omitempty"`
}

// Validate validates this security event event data
func (m *SecurityEventEventData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this security event event data based on context it is used
func (m *SecurityEventEventData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityEventEventData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityEventEventData) UnmarshalBinary(b []byte) error {
	var res SecurityEventEventData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
