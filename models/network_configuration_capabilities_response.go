// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkConfigurationCapabilitiesResponse network configuration capabilities response
//
// swagger:model NetworkConfigurationCapabilitiesResponse
type NetworkConfigurationCapabilitiesResponse struct {

	// feature's availability for a location
	// Required: true
	DhcpReservations *Capability `json:"dhcpReservations"`

	// feature's availability for a location
	// Required: true
	DNSServers *Capability `json:"dnsServers"`

	// feature's availability for a location
	// Required: true
	IgmpProxy *Capability `json:"igmpProxy"`

	// feature's availability for a location
	// Required: true
	IgmpSnooping *Capability `json:"igmpSnooping"`

	// feature's availability for a location
	// Required: true
	MldProxy *Capability `json:"mldProxy"`

	// feature's availability for a location
	// Required: true
	MulticastToUnicast *Capability `json:"multicastToUnicast"`

	// feature's availability for a location
	// Required: true
	NetworkMode *Capability `json:"networkMode"`

	// feature's availability for a location
	// Required: true
	PortForward *Capability `json:"portForward"`

	// feature's availability for a location
	// Required: true
	Upnp *Capability `json:"upnp"`
}

// Validate validates this network configuration capabilities response
func (m *NetworkConfigurationCapabilitiesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDhcpReservations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgmpProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgmpSnooping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMldProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMulticastToUnicast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortForward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpnp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateDhcpReservations(formats strfmt.Registry) error {

	if err := validate.Required("dhcpReservations", "body", m.DhcpReservations); err != nil {
		return err
	}

	if m.DhcpReservations != nil {
		if err := m.DhcpReservations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcpReservations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcpReservations")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dnsServers", "body", m.DNSServers); err != nil {
		return err
	}

	if m.DNSServers != nil {
		if err := m.DNSServers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServers")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateIgmpProxy(formats strfmt.Registry) error {

	if err := validate.Required("igmpProxy", "body", m.IgmpProxy); err != nil {
		return err
	}

	if m.IgmpProxy != nil {
		if err := m.IgmpProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpProxy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateIgmpSnooping(formats strfmt.Registry) error {

	if err := validate.Required("igmpSnooping", "body", m.IgmpSnooping); err != nil {
		return err
	}

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateMldProxy(formats strfmt.Registry) error {

	if err := validate.Required("mldProxy", "body", m.MldProxy); err != nil {
		return err
	}

	if m.MldProxy != nil {
		if err := m.MldProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mldProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mldProxy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateMulticastToUnicast(formats strfmt.Registry) error {

	if err := validate.Required("multicastToUnicast", "body", m.MulticastToUnicast); err != nil {
		return err
	}

	if m.MulticastToUnicast != nil {
		if err := m.MulticastToUnicast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multicastToUnicast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multicastToUnicast")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateNetworkMode(formats strfmt.Registry) error {

	if err := validate.Required("networkMode", "body", m.NetworkMode); err != nil {
		return err
	}

	if m.NetworkMode != nil {
		if err := m.NetworkMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkMode")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validatePortForward(formats strfmt.Registry) error {

	if err := validate.Required("portForward", "body", m.PortForward); err != nil {
		return err
	}

	if m.PortForward != nil {
		if err := m.PortForward.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portForward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portForward")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) validateUpnp(formats strfmt.Registry) error {

	if err := validate.Required("upnp", "body", m.Upnp); err != nil {
		return err
	}

	if m.Upnp != nil {
		if err := m.Upnp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upnp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upnp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network configuration capabilities response based on the context it is used
func (m *NetworkConfigurationCapabilitiesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDhcpReservations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgmpProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgmpSnooping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMldProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMulticastToUnicast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortForward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpnp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateDhcpReservations(ctx context.Context, formats strfmt.Registry) error {

	if m.DhcpReservations != nil {
		if err := m.DhcpReservations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dhcpReservations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dhcpReservations")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSServers != nil {
		if err := m.DNSServers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServers")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateIgmpProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.IgmpProxy != nil {
		if err := m.IgmpProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpProxy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateIgmpSnooping(ctx context.Context, formats strfmt.Registry) error {

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateMldProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.MldProxy != nil {
		if err := m.MldProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mldProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mldProxy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateMulticastToUnicast(ctx context.Context, formats strfmt.Registry) error {

	if m.MulticastToUnicast != nil {
		if err := m.MulticastToUnicast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multicastToUnicast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multicastToUnicast")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateNetworkMode(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkMode != nil {
		if err := m.NetworkMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkMode")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidatePortForward(ctx context.Context, formats strfmt.Registry) error {

	if m.PortForward != nil {
		if err := m.PortForward.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portForward")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("portForward")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationCapabilitiesResponse) contextValidateUpnp(ctx context.Context, formats strfmt.Registry) error {

	if m.Upnp != nil {
		if err := m.Upnp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upnp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upnp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfigurationCapabilitiesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfigurationCapabilitiesResponse) UnmarshalBinary(b []byte) error {
	var res NetworkConfigurationCapabilitiesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
