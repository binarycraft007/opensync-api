// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomDeviceType custom device type
//
// swagger:model CustomDeviceType
type CustomDeviceType struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// brand
	Brand string `json:"brand,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// icon v2
	IconV2 string `json:"iconV2,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// model
	Model string `json:"model,omitempty"`

	// os name
	OsName string `json:"osName,omitempty"`

	// type identified
	// Required: true
	TypeIdentified *bool `json:"typeIdentified"`
}

// Validate validates this custom device type
func (m *CustomDeviceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIdentified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomDeviceType) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *CustomDeviceType) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomDeviceType) validateTypeIdentified(formats strfmt.Registry) error {

	if err := validate.Required("typeIdentified", "body", m.TypeIdentified); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom device type based on context it is used
func (m *CustomDeviceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomDeviceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomDeviceType) UnmarshalBinary(b []byte) error {
	var res CustomDeviceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
