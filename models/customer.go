// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer A Plume Customer is initialized with a default location.
//
// swagger:model Customer
type Customer struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// The acceptable language for this user
	AcceptLanguage *string `json:"acceptLanguage,omitempty"`

	// account Id
	AccountID string `json:"accountId,omitempty"`

	// ISP registered accounts are anonymous and do not include real emails and passwords
	Anonymous *bool `json:"anonymous,omitempty"`

	// ISP auto registered accounts created using gatewayId instead of accountId need to eventually be updated a real accountId
	AutoProvisioned *bool `json:"autoProvisioned,omitempty"`

	// contact
	Contact string `json:"contact,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// email
	// Required: true
	Email *string `json:"email"`

	// email verified
	EmailVerified bool `json:"emailVerified,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// array of the outside/non-plume accounts to be linked
	LinkedAccounts []interface{} `json:"linkedAccounts"`

	// The groupAdmin account needs this property to protect it from being changed by other groupAdmins unintentionally.
	Locked *bool `json:"locked,omitempty"`

	// migration
	Migration *Migration `json:"migration,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// noc settings
	NocSettings interface{} `json:"nocSettings,omitempty"`

	// partner Id
	PartnerID string `json:"partnerId,omitempty"`

	// The language set for this user based on API and/or it's language header
	PreferredLanguage string `json:"preferredLanguage,omitempty"`

	// If true, the user has provisioning SSO audit trail
	ProvisioningSsoAuditTrail *bool `json:"provisioningSsoAuditTrail,omitempty"`

	// realm
	Realm string `json:"realm,omitempty"`

	// source
	Source *string `json:"source,omitempty"`

	// terms and privacy
	TermsAndPrivacy *TermsAndPrivacy `json:"termsAndPrivacy,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMigration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsAndPrivacy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Customer) validateMigration(formats strfmt.Registry) error {
	if swag.IsZero(m.Migration) { // not required
		return nil
	}

	if m.Migration != nil {
		if err := m.Migration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("migration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("migration")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateTermsAndPrivacy(formats strfmt.Registry) error {
	if swag.IsZero(m.TermsAndPrivacy) { // not required
		return nil
	}

	if m.TermsAndPrivacy != nil {
		if err := m.TermsAndPrivacy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termsAndPrivacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("termsAndPrivacy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this customer based on the context it is used
func (m *Customer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMigration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTermsAndPrivacy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Customer) contextValidateMigration(ctx context.Context, formats strfmt.Registry) error {

	if m.Migration != nil {
		if err := m.Migration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("migration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("migration")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) contextValidateTermsAndPrivacy(ctx context.Context, formats strfmt.Registry) error {

	if m.TermsAndPrivacy != nil {
		if err := m.TermsAndPrivacy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termsAndPrivacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("termsAndPrivacy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
