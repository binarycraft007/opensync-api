// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeResponse node response
//
// swagger:model NodeResponse
type NodeResponse struct {

	// 2g channel
	// Required: true
	Nr2gChannel *string `json:"2gChannel"`

	// 5g channel
	// Required: true
	Nr5gChannel *string `json:"5gChannel"`

	// 6g channel
	Nr6gChannel string `json:"6gChannel,omitempty"`

	// ethernet, wifi, or unknown
	// Required: true
	BackhaulType *string `json:"backhaulType"`

	// channel
	Channel string `json:"channel,omitempty"`

	// count total devices with 'connected' connectionState
	// Required: true
	ConnectedDeviceCount *float64 `json:"connectedDeviceCount"`

	// connected, disconnected, or unavailable
	// Required: true
	ConnectionState *string `json:"connectionState"`

	// default name
	DefaultName string `json:"defaultName,omitempty"`

	// firmware version
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// the list member is the parentId and freqBand, from itself to the root/gateway.
	// Required: true
	LeafToRoot []interface{} `json:"leafToRoot"`

	// nickname
	Nickname string `json:"nickname,omitempty"`

	// wifi config
	WifiConfig []XAny `json:"wifiConfig"`
}

// Validate validates this node response
func (m *NodeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNr2gChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNr5gChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackhaulType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedDeviceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeafToRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeResponse) validateNr2gChannel(formats strfmt.Registry) error {

	if err := validate.Required("2gChannel", "body", m.Nr2gChannel); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateNr5gChannel(formats strfmt.Registry) error {

	if err := validate.Required("5gChannel", "body", m.Nr5gChannel); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateBackhaulType(formats strfmt.Registry) error {

	if err := validate.Required("backhaulType", "body", m.BackhaulType); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateConnectedDeviceCount(formats strfmt.Registry) error {

	if err := validate.Required("connectedDeviceCount", "body", m.ConnectedDeviceCount); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateConnectionState(formats strfmt.Registry) error {

	if err := validate.Required("connectionState", "body", m.ConnectionState); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *NodeResponse) validateLeafToRoot(formats strfmt.Registry) error {

	if err := validate.Required("leafToRoot", "body", m.LeafToRoot); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node response based on context it is used
func (m *NodeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeResponse) UnmarshalBinary(b []byte) error {
	var res NodeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
