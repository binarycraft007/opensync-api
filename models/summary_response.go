// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryResponse summary response
//
// swagger:model SummaryResponse
type SummaryResponse struct {

	// schema version # of the API response
	// Required: true
	Version *string `json:"_version"`

	// count total devices with 'connected' connectionState
	// Required: true
	ConnectedDeviceCount *float64 `json:"connectedDeviceCount"`

	// connected or disconnected
	// Required: true
	GatewayConnectionState *string `json:"gatewayConnectionState"`

	// monitor mode
	MonitorMode bool `json:"monitorMode,omitempty"`

	// 'auto', 'bridge', 'router' for users to choose from NOC
	NetworkModeProvisioned string `json:"networkModeProvisioned,omitempty"`

	// default value is 'unknow', 'bridge' if there is no router for all connected pods, 'router' if there is a connected pod with 'router'
	// Required: true
	NetworkModeRealized *string `json:"networkModeRealized"`

	// nodeArray length
	// Required: true
	NodeClaimedCount *float64 `json:"nodeClaimedCount"`

	// count total nodes with 'connected' connectionState
	// Required: true
	NodeConnectedCount *float64 `json:"nodeConnectedCount"`

	// unknown, OnboardingComplete, NotificationAccepted, or PodsAdded
	OnboardingStatus string `json:"onboardingStatus,omitempty"`

	// 'contains fields: state, stateChangedAt, and trigger
	Optimization interface{} `json:"optimization,omitempty"`

	// ISO Date of returned topology, optional if in included in client API call
	Timestamp string `json:"timestamp,omitempty"`

	// List of Nodes
	// Required: true
	Topology []*NodeResponse `json:"topology"`

	// The customer has submitted a valid SSID and password or not
	// Required: true
	WifiNetworkProvisioned *bool `json:"wifiNetworkProvisioned"`
}

// Validate validates this summary response
func (m *SummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedDeviceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkModeRealized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeClaimedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeConnectedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiNetworkProvisioned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateConnectedDeviceCount(formats strfmt.Registry) error {

	if err := validate.Required("connectedDeviceCount", "body", m.ConnectedDeviceCount); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateGatewayConnectionState(formats strfmt.Registry) error {

	if err := validate.Required("gatewayConnectionState", "body", m.GatewayConnectionState); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateNetworkModeRealized(formats strfmt.Registry) error {

	if err := validate.Required("networkModeRealized", "body", m.NetworkModeRealized); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateNodeClaimedCount(formats strfmt.Registry) error {

	if err := validate.Required("nodeClaimedCount", "body", m.NodeClaimedCount); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateNodeConnectedCount(formats strfmt.Registry) error {

	if err := validate.Required("nodeConnectedCount", "body", m.NodeConnectedCount); err != nil {
		return err
	}

	return nil
}

func (m *SummaryResponse) validateTopology(formats strfmt.Registry) error {

	if err := validate.Required("topology", "body", m.Topology); err != nil {
		return err
	}

	for i := 0; i < len(m.Topology); i++ {
		if swag.IsZero(m.Topology[i]) { // not required
			continue
		}

		if m.Topology[i] != nil {
			if err := m.Topology[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topology" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topology" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SummaryResponse) validateWifiNetworkProvisioned(formats strfmt.Registry) error {

	if err := validate.Required("wifiNetworkProvisioned", "body", m.WifiNetworkProvisioned); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this summary response based on the context it is used
func (m *SummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryResponse) contextValidateTopology(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Topology); i++ {

		if m.Topology[i] != nil {
			if err := m.Topology[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topology" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("topology" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryResponse) UnmarshalBinary(b []byte) error {
	var res SummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
