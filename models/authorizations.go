// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Authorizations authorizations
//
// swagger:model Authorizations
type Authorizations struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// num nodes authorized
	NumNodesAuthorized []*NodeAuthorization `json:"numNodesAuthorized"`

	// number of leaf pods that are authorized to be claimed and be a part of the Plume network
	NumPodsAuthorized *float64 `json:"numPodsAuthorized,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this authorizations
func (m *Authorizations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumNodesAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authorizations) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Authorizations) validateNumNodesAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.NumNodesAuthorized) { // not required
		return nil
	}

	for i := 0; i < len(m.NumNodesAuthorized); i++ {
		if swag.IsZero(m.NumNodesAuthorized[i]) { // not required
			continue
		}

		if m.NumNodesAuthorized[i] != nil {
			if err := m.NumNodesAuthorized[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("numNodesAuthorized" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("numNodesAuthorized" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Authorizations) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this authorizations based on the context it is used
func (m *Authorizations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumNodesAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authorizations) contextValidateNumNodesAuthorized(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NumNodesAuthorized); i++ {

		if m.NumNodesAuthorized[i] != nil {
			if err := m.NumNodesAuthorized[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("numNodesAuthorized" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("numNodesAuthorized" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Authorizations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Authorizations) UnmarshalBinary(b []byte) error {
	var res Authorizations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
