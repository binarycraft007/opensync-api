// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationWanSettings location wan settings
//
// swagger:model LocationWanSettings
type LocationWanSettings struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// static, pppoe, or dynamic
	// Required: true
	ConnectionType *string `json:"connectionType"`

	// pppoe
	Pppoe *WanSettingsPppoe `json:"pppoe,omitempty"`

	// static
	Static *WanSettingsStatic `json:"static,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this location wan settings
func (m *LocationWanSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePppoe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationWanSettings) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *LocationWanSettings) validateConnectionType(formats strfmt.Registry) error {

	if err := validate.Required("connectionType", "body", m.ConnectionType); err != nil {
		return err
	}

	return nil
}

func (m *LocationWanSettings) validatePppoe(formats strfmt.Registry) error {
	if swag.IsZero(m.Pppoe) { // not required
		return nil
	}

	if m.Pppoe != nil {
		if err := m.Pppoe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pppoe")
			}
			return err
		}
	}

	return nil
}

func (m *LocationWanSettings) validateStatic(formats strfmt.Registry) error {
	if swag.IsZero(m.Static) { // not required
		return nil
	}

	if m.Static != nil {
		if err := m.Static.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static")
			}
			return err
		}
	}

	return nil
}

func (m *LocationWanSettings) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this location wan settings based on the context it is used
func (m *LocationWanSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePppoe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationWanSettings) contextValidatePppoe(ctx context.Context, formats strfmt.Registry) error {

	if m.Pppoe != nil {
		if err := m.Pppoe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pppoe")
			}
			return err
		}
	}

	return nil
}

func (m *LocationWanSettings) contextValidateStatic(ctx context.Context, formats strfmt.Registry) error {

	if m.Static != nil {
		if err := m.Static.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("static")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("static")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocationWanSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationWanSettings) UnmarshalBinary(b []byte) error {
	var res LocationWanSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
