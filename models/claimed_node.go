// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClaimedNode claimed node
//
// swagger:model ClaimedNode
type ClaimedNode struct {

	// defaultName is for code, display if empty nickname
	// Required: true
	DefaultName *string `json:"defaultName"`

	// always returns the value of 'serialNumber'
	ID string `json:"id,omitempty"`

	// a cool nickname
	// Required: true
	Nickname *string `json:"nickname"`

	// unique serialNumber
	// Required: true
	SerialNumber *string `json:"serialNumber"`

	// connectionState
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this claimed node
func (m *ClaimedNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClaimedNode) validateDefaultName(formats strfmt.Registry) error {

	if err := validate.Required("defaultName", "body", m.DefaultName); err != nil {
		return err
	}

	return nil
}

func (m *ClaimedNode) validateNickname(formats strfmt.Registry) error {

	if err := validate.Required("nickname", "body", m.Nickname); err != nil {
		return err
	}

	return nil
}

func (m *ClaimedNode) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("serialNumber", "body", m.SerialNumber); err != nil {
		return err
	}

	return nil
}

func (m *ClaimedNode) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this claimed node based on context it is used
func (m *ClaimedNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClaimedNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClaimedNode) UnmarshalBinary(b []byte) error {
	var res ClaimedNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
