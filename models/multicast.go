// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Multicast multicast
//
// swagger:model Multicast
type Multicast struct {

	// igmp proxy
	IgmpProxy *IgmpProxy `json:"igmpProxy,omitempty"`

	// igmp snooping
	IgmpSnooping *IgmpSnooping `json:"igmpSnooping,omitempty"`

	// mld proxy
	MldProxy *MldProxy `json:"mldProxy,omitempty"`

	// multicast to unicast
	MulticastToUnicast *MulticastToUnicast `json:"multicastToUnicast,omitempty"`
}

// Validate validates this multicast
func (m *Multicast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgmpProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgmpSnooping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMldProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMulticastToUnicast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Multicast) validateIgmpProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.IgmpProxy) { // not required
		return nil
	}

	if m.IgmpProxy != nil {
		if err := m.IgmpProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpProxy")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) validateIgmpSnooping(formats strfmt.Registry) error {
	if swag.IsZero(m.IgmpSnooping) { // not required
		return nil
	}

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) validateMldProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.MldProxy) { // not required
		return nil
	}

	if m.MldProxy != nil {
		if err := m.MldProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mldProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mldProxy")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) validateMulticastToUnicast(formats strfmt.Registry) error {
	if swag.IsZero(m.MulticastToUnicast) { // not required
		return nil
	}

	if m.MulticastToUnicast != nil {
		if err := m.MulticastToUnicast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multicastToUnicast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multicastToUnicast")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this multicast based on the context it is used
func (m *Multicast) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIgmpProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgmpSnooping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMldProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMulticastToUnicast(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Multicast) contextValidateIgmpProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.IgmpProxy != nil {
		if err := m.IgmpProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpProxy")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) contextValidateIgmpSnooping(ctx context.Context, formats strfmt.Registry) error {

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) contextValidateMldProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.MldProxy != nil {
		if err := m.MldProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mldProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mldProxy")
			}
			return err
		}
	}

	return nil
}

func (m *Multicast) contextValidateMulticastToUnicast(ctx context.Context, formats strfmt.Registry) error {

	if m.MulticastToUnicast != nil {
		if err := m.MulticastToUnicast.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multicastToUnicast")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multicastToUnicast")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Multicast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Multicast) UnmarshalBinary(b []byte) error {
	var res Multicast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
