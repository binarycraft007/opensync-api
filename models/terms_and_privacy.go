// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TermsAndPrivacy TermsAndPrivacy object
//
// swagger:model TermsAndPrivacy
type TermsAndPrivacy struct {

	// privacy accepted at
	// Format: date-time
	PrivacyAcceptedAt strfmt.DateTime `json:"privacyAcceptedAt,omitempty"`

	// privacy document Id
	// Required: true
	PrivacyDocumentID *float64 `json:"privacyDocumentId"`

	// terms accepted at
	// Format: date-time
	TermsAcceptedAt strfmt.DateTime `json:"termsAcceptedAt,omitempty"`

	// terms document Id
	// Required: true
	TermsDocumentID *float64 `json:"termsDocumentId"`
}

// Validate validates this terms and privacy
func (m *TermsAndPrivacy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivacyAcceptedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsAcceptedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TermsAndPrivacy) validatePrivacyAcceptedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivacyAcceptedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("privacyAcceptedAt", "body", "date-time", m.PrivacyAcceptedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TermsAndPrivacy) validatePrivacyDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("privacyDocumentId", "body", m.PrivacyDocumentID); err != nil {
		return err
	}

	return nil
}

func (m *TermsAndPrivacy) validateTermsAcceptedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.TermsAcceptedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("termsAcceptedAt", "body", "date-time", m.TermsAcceptedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TermsAndPrivacy) validateTermsDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("termsDocumentId", "body", m.TermsDocumentID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this terms and privacy based on context it is used
func (m *TermsAndPrivacy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TermsAndPrivacy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TermsAndPrivacy) UnmarshalBinary(b []byte) error {
	var res TermsAndPrivacy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
