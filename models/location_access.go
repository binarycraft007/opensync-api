// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationAccess location access
//
// swagger:model LocationAccess
type LocationAccess struct {

	// access type
	AccessType *string `json:"accessType,omitempty"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// location Id
	// Required: true
	LocationID *ObjectID `json:"locationId"`

	// manager Id
	// Required: true
	ManagerID *ObjectID `json:"managerId"`

	// owner Id
	// Required: true
	OwnerID *ObjectID `json:"ownerId"`

	// person Id
	PersonID string `json:"personId,omitempty"`

	// status
	Status *string `json:"status,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this location access
func (m *LocationAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationAccess) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocationAccess) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *LocationAccess) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("locationId", "body", m.LocationID); err != nil {
		return err
	}

	if err := validate.Required("locationId", "body", m.LocationID); err != nil {
		return err
	}

	if m.LocationID != nil {
		if err := m.LocationID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locationId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locationId")
			}
			return err
		}
	}

	return nil
}

func (m *LocationAccess) validateManagerID(formats strfmt.Registry) error {

	if err := validate.Required("managerId", "body", m.ManagerID); err != nil {
		return err
	}

	if err := validate.Required("managerId", "body", m.ManagerID); err != nil {
		return err
	}

	if m.ManagerID != nil {
		if err := m.ManagerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managerId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managerId")
			}
			return err
		}
	}

	return nil
}

func (m *LocationAccess) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("ownerId", "body", m.OwnerID); err != nil {
		return err
	}

	if err := validate.Required("ownerId", "body", m.OwnerID); err != nil {
		return err
	}

	if m.OwnerID != nil {
		if err := m.OwnerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerId")
			}
			return err
		}
	}

	return nil
}

func (m *LocationAccess) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this location access based on the context it is used
func (m *LocationAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationAccess) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *LocationAccess) contextValidateLocationID(ctx context.Context, formats strfmt.Registry) error {

	if m.LocationID != nil {
		if err := m.LocationID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locationId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locationId")
			}
			return err
		}
	}

	return nil
}

func (m *LocationAccess) contextValidateManagerID(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagerID != nil {
		if err := m.ManagerID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managerId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("managerId")
			}
			return err
		}
	}

	return nil
}

func (m *LocationAccess) contextValidateOwnerID(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerID != nil {
		if err := m.OwnerID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocationAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationAccess) UnmarshalBinary(b []byte) error {
	var res LocationAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
