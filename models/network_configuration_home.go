// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkConfigurationHome network configuration home
//
// swagger:model NetworkConfigurationHome
type NetworkConfigurationHome struct {

	// dns servers
	DNSServers *DNSServers `json:"dnsServers,omitempty"`

	// igmp snooping
	IgmpSnooping *IgmpSnooping `json:"igmpSnooping,omitempty"`

	// network mode
	// Required: true
	NetworkMode *string `json:"networkMode"`

	// upnp
	Upnp *Upnp `json:"upnp,omitempty"`
}

// Validate validates this network configuration home
func (m *NetworkConfigurationHome) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgmpSnooping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpnp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfigurationHome) validateDNSServers(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	if m.DNSServers != nil {
		if err := m.DNSServers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServers")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationHome) validateIgmpSnooping(formats strfmt.Registry) error {
	if swag.IsZero(m.IgmpSnooping) { // not required
		return nil
	}

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationHome) validateNetworkMode(formats strfmt.Registry) error {

	if err := validate.Required("networkMode", "body", m.NetworkMode); err != nil {
		return err
	}

	return nil
}

func (m *NetworkConfigurationHome) validateUpnp(formats strfmt.Registry) error {
	if swag.IsZero(m.Upnp) { // not required
		return nil
	}

	if m.Upnp != nil {
		if err := m.Upnp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upnp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upnp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network configuration home based on the context it is used
func (m *NetworkConfigurationHome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDNSServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgmpSnooping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpnp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfigurationHome) contextValidateDNSServers(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSServers != nil {
		if err := m.DNSServers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServers")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationHome) contextValidateIgmpSnooping(ctx context.Context, formats strfmt.Registry) error {

	if m.IgmpSnooping != nil {
		if err := m.IgmpSnooping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("igmpSnooping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("igmpSnooping")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkConfigurationHome) contextValidateUpnp(ctx context.Context, formats strfmt.Registry) error {

	if m.Upnp != nil {
		if err := m.Upnp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upnp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upnp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfigurationHome) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfigurationHome) UnmarshalBinary(b []byte) error {
	var res NetworkConfigurationHome
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
