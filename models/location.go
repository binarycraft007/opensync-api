// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Location Plume internal-only APIs.
//
// swagger:model Location
type Location struct {

	// secondary networks
	SecondaryNetworks *SecondaryNetworks `json:"_secondaryNetworks,omitempty"`

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// accountId from customer relation; this should be a replica of the customer's accountId field
	AccountID string `json:"accountId,omitempty"`

	// location's default appTime config
	AppTime interface{} `json:"appTime,omitempty"`

	// authorizations
	Authorizations *Authorizations `json:"authorizations,omitempty"`

	// backhaul
	Backhaul *LocationBackhaul `json:"backhaul,omitempty"`

	// band steering
	BandSteering *LocationBandSteering `json:"bandSteering,omitempty"`

	// client steering
	ClientSteering *LocationClientSteering `json:"clientSteering,omitempty"`

	// control mode
	ControlMode *LocationControlMode `json:"controlMode,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// customer Id
	CustomerID ObjectID `json:"customerId,omitempty"`

	// day one emails sent
	DayOneEmailsSent bool `json:"dayOneEmailsSent,omitempty"`

	// dpp configuration
	DppConfiguration *DppConfiguration `json:"dppConfiguration,omitempty"`

	// flex
	Flex *bool `json:"flex,omitempty"`

	// freeze templates
	FreezeTemplates interface{} `json:"freezeTemplates,omitempty"`

	// geo Ip
	GeoIP *GeoIP `json:"geoIp,omitempty"`

	// List of group IDs a location belongs to.
	GroupIds []string `json:"groupIds"`

	// group of unassigned devices freeze schedules
	GroupOfUnassignedDevicesFreezeSchedules []XAny `json:"groupOfUnassignedDevicesFreezeSchedules"`

	// group of unassigned devices freeze templates
	GroupOfUnassignedDevicesFreezeTemplates []XAny `json:"groupOfUnassignedDevicesFreezeTemplates"`

	// haahs configuration
	HaahsConfiguration *HaahsConfiguration `json:"haahsConfiguration,omitempty"`

	// Home Security wifi motion will be enabled when all persons away from home.
	HomeAwayActive bool `json:"homeAwayActive,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// Configuration data for IPv6
	IPV6 interface{} `json:"ipv6,omitempty"`

	// is utilizing shared location freeze schedules
	IsUtilizingSharedLocationFreezeSchedules *bool `json:"isUtilizingSharedLocationFreezeSchedules,omitempty"`

	// isp speed test configuration
	IspSpeedTestConfiguration *LocationSpeedTest `json:"ispSpeedTestConfiguration,omitempty"`

	// locale
	Locale *Locale `json:"locale,omitempty"`

	// m DNS unique identifier
	MDNSUniqueIdentifier string `json:"mDNSUniqueIdentifier,omitempty"`

	// monitor mode
	MonitorMode *LocationMonitorMode `json:"monitorMode,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// network access
	NetworkAccess *NetworkAccess `json:"networkAccess,omitempty"`

	// the default value is 'auto', users can choose 'router' or 'auto'
	NetworkMode *string `json:"networkMode,omitempty"`

	// network status
	NetworkStatus *NetworkStatus `json:"networkStatus,omitempty"`

	// optimizations
	Optimizations *Optimizations `json:"optimizations,omitempty"`

	// partnerId from customer relation; this should be a replica of the customer's partnerId field
	PartnerID string `json:"partnerId,omitempty"`

	// profile
	Profile *string `json:"profile,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// service Id
	ServiceID string `json:"serviceId,omitempty"`

	// including 'status'/'created'/'updatedAt', 'status' can be 'noService'/'basicService'/'fullService'
	ServiceLevel interface{} `json:"serviceLevel,omitempty"`

	// location's default sniffing config
	Sniffing interface{} `json:"sniffing,omitempty"`

	// Array of step function timers used for turning off wifi feature
	StepFunctionTimers []interface{} `json:"stepFunctionTimers"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// uprise
	Uprise *bool `json:"uprise,omitempty"`

	// wan settings
	WanSettings *LocationWanSettings `json:"wanSettings,omitempty"`

	// wifi motion
	WifiMotion *WifiMotion `json:"wifiMotion,omitempty"`
}

// Validate validates this location
func (m *Location) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSecondaryNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackhaul(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandSteering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSteering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDppConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaahsConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIspSpeedTestConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWanSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiMotion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) validateSecondaryNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryNetworks) { // not required
		return nil
	}

	if m.SecondaryNetworks != nil {
		if err := m.SecondaryNetworks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_secondaryNetworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_secondaryNetworks")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateAuthorizations(formats strfmt.Registry) error {
	if swag.IsZero(m.Authorizations) { // not required
		return nil
	}

	if m.Authorizations != nil {
		if err := m.Authorizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorizations")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateBackhaul(formats strfmt.Registry) error {
	if swag.IsZero(m.Backhaul) { // not required
		return nil
	}

	if m.Backhaul != nil {
		if err := m.Backhaul.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backhaul")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backhaul")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateBandSteering(formats strfmt.Registry) error {
	if swag.IsZero(m.BandSteering) { // not required
		return nil
	}

	if m.BandSteering != nil {
		if err := m.BandSteering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateClientSteering(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSteering) { // not required
		return nil
	}

	if m.ClientSteering != nil {
		if err := m.ClientSteering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateControlMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlMode) { // not required
		return nil
	}

	if m.ControlMode != nil {
		if err := m.ControlMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlMode")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateCustomerID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := m.CustomerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customerId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customerId")
		}
		return err
	}

	return nil
}

func (m *Location) validateDppConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.DppConfiguration) { // not required
		return nil
	}

	if m.DppConfiguration != nil {
		if err := m.DppConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dppConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dppConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateGeoIP(formats strfmt.Registry) error {
	if swag.IsZero(m.GeoIP) { // not required
		return nil
	}

	if m.GeoIP != nil {
		if err := m.GeoIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoIp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geoIp")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateHaahsConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.HaahsConfiguration) { // not required
		return nil
	}

	if m.HaahsConfiguration != nil {
		if err := m.HaahsConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haahsConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("haahsConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Location) validateIspSpeedTestConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.IspSpeedTestConfiguration) { // not required
		return nil
	}

	if m.IspSpeedTestConfiguration != nil {
		if err := m.IspSpeedTestConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ispSpeedTestConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ispSpeedTestConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateMonitorMode(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitorMode) { // not required
		return nil
	}

	if m.MonitorMode != nil {
		if err := m.MonitorMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitorMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitorMode")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateNetworkAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkAccess) { // not required
		return nil
	}

	if m.NetworkAccess != nil {
		if err := m.NetworkAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkAccess")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateNetworkStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkStatus) { // not required
		return nil
	}

	if m.NetworkStatus != nil {
		if err := m.NetworkStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateOptimizations(formats strfmt.Registry) error {
	if swag.IsZero(m.Optimizations) { // not required
		return nil
	}

	if m.Optimizations != nil {
		if err := m.Optimizations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimizations")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Location) validateWanSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.WanSettings) { // not required
		return nil
	}

	if m.WanSettings != nil {
		if err := m.WanSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wanSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wanSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateWifiMotion(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiMotion) { // not required
		return nil
	}

	if m.WifiMotion != nil {
		if err := m.WifiMotion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiMotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiMotion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this location based on the context it is used
func (m *Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecondaryNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackhaul(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBandSteering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientSteering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControlMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDppConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeoIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHaahsConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIspSpeedTestConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitorMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptimizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWanSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiMotion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) contextValidateSecondaryNetworks(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondaryNetworks != nil {
		if err := m.SecondaryNetworks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_secondaryNetworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_secondaryNetworks")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	if m.Authorizations != nil {
		if err := m.Authorizations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorizations")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateBackhaul(ctx context.Context, formats strfmt.Registry) error {

	if m.Backhaul != nil {
		if err := m.Backhaul.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backhaul")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backhaul")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateBandSteering(ctx context.Context, formats strfmt.Registry) error {

	if m.BandSteering != nil {
		if err := m.BandSteering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateClientSteering(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientSteering != nil {
		if err := m.ClientSteering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateControlMode(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlMode != nil {
		if err := m.ControlMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlMode")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateCustomerID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CustomerID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("customerId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("customerId")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidateDppConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.DppConfiguration != nil {
		if err := m.DppConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dppConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dppConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateGeoIP(ctx context.Context, formats strfmt.Registry) error {

	if m.GeoIP != nil {
		if err := m.GeoIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoIp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geoIp")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateHaahsConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.HaahsConfiguration != nil {
		if err := m.HaahsConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haahsConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("haahsConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidateIspSpeedTestConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.IspSpeedTestConfiguration != nil {
		if err := m.IspSpeedTestConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ispSpeedTestConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ispSpeedTestConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if m.Locale != nil {
		if err := m.Locale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateMonitorMode(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitorMode != nil {
		if err := m.MonitorMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitorMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitorMode")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateNetworkAccess(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkAccess != nil {
		if err := m.NetworkAccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkAccess")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateNetworkStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkStatus != nil {
		if err := m.NetworkStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateOptimizations(ctx context.Context, formats strfmt.Registry) error {

	if m.Optimizations != nil {
		if err := m.Optimizations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimizations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimizations")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateWanSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.WanSettings != nil {
		if err := m.WanSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wanSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wanSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateWifiMotion(ctx context.Context, formats strfmt.Registry) error {

	if m.WifiMotion != nil {
		if err := m.WifiMotion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiMotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiMotion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Location) UnmarshalBinary(b []byte) error {
	var res Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
