// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceResponse device response
//
// swagger:model DeviceResponse
type DeviceResponse struct {

	// home | guests | internetAccessOnly
	AccessZone string `json:"accessZone,omitempty"`

	// undefined if medium ethernet
	Channel float64 `json:"channel,omitempty"`

	// connected, disconnected, or unavailable
	// Required: true
	ConnectionState *string `json:"connectionState"`

	// time at which connectionStateChange last changed
	// Format: date-time
	ConnectionStateChangeAt strfmt.DateTime `json:"connectionStateChangeAt,omitempty"`

	// 2.4G or 5G or 6G, undefined if medium ethernet
	FreqBand string `json:"freqBand,omitempty"`

	// healthy, poor, or degraded
	Health interface{} `json:"health,omitempty"`

	// The mapping is:
	// 'mediaSTB': ['appletv', 'chromecast', 'tivo', 'np-'],
	// 'camera' : ['cam'],
	// 'gamingConsole' : ['xbox', 'ps3', 'ps4'],
	// 'smartPhone' : ['iphone', 'ipod', 'phone', 'android'],
	// 'tablet' : ['ipad', 'kindle'],
	// 'imac' : ['imac', 'macintosh'],
	// 'desktop' : ['desktop'],
	// 'routerbox' : ['linksys', 'netgear', 'asus', 'belkin', 'airport'],
	// 'laptop' : ['mbp', 'air', 'macbook', 'pc', 'thinkpad'],
	// 'printer' : ['printer', 'epson'],
	// 'tv' : ['tv', 'vizo'],
	// 'voipPhone' : ['voip'],
	// 'speaker' : ['sonos'],
	// 'lightbulb' : ['lifx']
	Icon string `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// unique id of the WifiNetwork.keys[x] that the device is connected to or last connected to
	KeyID float64 `json:"keyId,omitempty"`

	// the list member is the parentId and freqBand,
	//  from its pod to the root/gateway.
	// Required: true
	LeafToRoot []interface{} `json:"leafToRoot"`

	// mac
	// Required: true
	Mac *string `json:"mac"`

	// wifi or ethernet
	Medium string `json:"medium,omitempty"`

	// Unique identifier for mobile devices that the mobile app generates and controls
	MobileAppDeviceUUID string `json:"mobileAppDeviceUuid,omitempty"`

	// host name else mac
	Name string `json:"name,omitempty"`
}

// Validate validates this device response
func (m *DeviceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStateChangeAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeafToRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceResponse) validateConnectionState(formats strfmt.Registry) error {

	if err := validate.Required("connectionState", "body", m.ConnectionState); err != nil {
		return err
	}

	return nil
}

func (m *DeviceResponse) validateConnectionStateChangeAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStateChangeAt) { // not required
		return nil
	}

	if err := validate.FormatOf("connectionStateChangeAt", "body", "date-time", m.ConnectionStateChangeAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceResponse) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *DeviceResponse) validateLeafToRoot(formats strfmt.Registry) error {

	if err := validate.Required("leafToRoot", "body", m.LeafToRoot); err != nil {
		return err
	}

	return nil
}

func (m *DeviceResponse) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device response based on context it is used
func (m *DeviceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceResponse) UnmarshalBinary(b []byte) error {
	var res DeviceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
