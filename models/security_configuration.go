// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfiguration security configuration
//
// swagger:model SecurityConfiguration
type SecurityConfiguration struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// dos protection
	DosProtection interface{} `json:"dosProtection,omitempty"`

	// auto || enable || disable
	// Required: true
	DpiContentFiltering *string `json:"dpiContentFiltering"`

	// auto || enable || disable
	// Required: true
	InlineDpi *string `json:"inlineDpi"`

	// auto || BrightCloud || Webpulse || Gatekeeper
	// Required: true
	IPThreatIntelligence *string `json:"ipThreatIntelligence"`

	// auto || enable || disable
	// Required: true
	IPThreatProtect *string `json:"ipThreatProtect"`

	// auto || plume || norton
	// Required: true
	IPThreatProvider *string `json:"ipThreatProvider"`

	// auto || BrightCloud || Webpulse || Gatekeeper
	// Required: true
	PreferredIntelligence *string `json:"preferredIntelligence"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`

	// auto || enable || disable
	// Required: true
	WcHealthTelemetry *string `json:"wcHealthTelemetry"`

	// auto || enable || disable
	// Required: true
	WcHeroTelemetry *string `json:"wcHeroTelemetry"`
}

// Validate validates this security configuration
func (m *SecurityConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDpiContentFiltering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInlineDpi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPThreatIntelligence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPThreatProtect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPThreatProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredIntelligence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWcHealthTelemetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWcHeroTelemetry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfiguration) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateDpiContentFiltering(formats strfmt.Registry) error {

	if err := validate.Required("dpiContentFiltering", "body", m.DpiContentFiltering); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateInlineDpi(formats strfmt.Registry) error {

	if err := validate.Required("inlineDpi", "body", m.InlineDpi); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateIPThreatIntelligence(formats strfmt.Registry) error {

	if err := validate.Required("ipThreatIntelligence", "body", m.IPThreatIntelligence); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateIPThreatProtect(formats strfmt.Registry) error {

	if err := validate.Required("ipThreatProtect", "body", m.IPThreatProtect); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateIPThreatProvider(formats strfmt.Registry) error {

	if err := validate.Required("ipThreatProvider", "body", m.IPThreatProvider); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validatePreferredIntelligence(formats strfmt.Registry) error {

	if err := validate.Required("preferredIntelligence", "body", m.PreferredIntelligence); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateWcHealthTelemetry(formats strfmt.Registry) error {

	if err := validate.Required("wcHealthTelemetry", "body", m.WcHealthTelemetry); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfiguration) validateWcHeroTelemetry(formats strfmt.Registry) error {

	if err := validate.Required("wcHeroTelemetry", "body", m.WcHeroTelemetry); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security configuration based on context it is used
func (m *SecurityConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfiguration) UnmarshalBinary(b []byte) error {
	var res SecurityConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
