// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Optimizations optimizations
//
// swagger:model Optimizations
type Optimizations struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// auto
	Auto *bool `json:"auto,omitempty"`

	// dfs mode
	DfsMode *string `json:"dfsMode,omitempty"`

	// enable
	Enable bool `json:"enable,omitempty"`

	// hop penalty
	HopPenalty *string `json:"hopPenalty,omitempty"`

	// pre c a c scheduler
	PreCACScheduler *string `json:"preCACScheduler,omitempty"`

	// prefer160 mhz mode
	Prefer160MhzMode *string `json:"prefer160MhzMode,omitempty"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`
}

// Validate validates this optimizations
func (m *Optimizations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Optimizations) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Optimizations) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this optimizations based on context it is used
func (m *Optimizations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Optimizations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Optimizations) UnmarshalBinary(b []byte) error {
	var res Optimizations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
