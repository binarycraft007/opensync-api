// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppFacadeHomeResponse app facade home response
//
// swagger:model AppFacadeHomeResponse
type AppFacadeHomeResponse struct {

	// schema version # of the API response
	Version *string `json:"_version,omitempty"`

	// alerts
	Alerts interface{} `json:"alerts,omitempty"`

	// capabilities
	Capabilities *CapabilitiesResponse `json:"capabilities,omitempty"`

	// customer
	Customer *Customer `json:"customer,omitempty"`

	// devices
	Devices *Devices `json:"devices,omitempty"`

	// geo Ip
	GeoIP *GeoIP `json:"geoIp,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// network status
	NetworkStatus *NetworkStatus `json:"networkStatus,omitempty"`

	// nodes
	Nodes *Node `json:"nodes,omitempty"`

	// optimization
	Optimization *Optimizations `json:"optimization,omitempty"`

	// summary
	Summary *SummaryResponse `json:"summary,omitempty"`

	// wifi network
	WifiNetwork *WifiNetwork `json:"wifiNetwork,omitempty"`
}

// Validate validates this app facade home response
func (m *AppFacadeHomeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppFacadeHomeResponse) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if m.Capabilities != nil {
		if err := m.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	if m.Devices != nil {
		if err := m.Devices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateGeoIP(formats strfmt.Registry) error {
	if swag.IsZero(m.GeoIP) { // not required
		return nil
	}

	if m.GeoIP != nil {
		if err := m.GeoIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoIp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geoIp")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateNetworkStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkStatus) { // not required
		return nil
	}

	if m.NetworkStatus != nil {
		if err := m.NetworkStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	if m.Nodes != nil {
		if err := m.Nodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodes")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateOptimization(formats strfmt.Registry) error {
	if swag.IsZero(m.Optimization) { // not required
		return nil
	}

	if m.Optimization != nil {
		if err := m.Optimization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimization")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) validateWifiNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiNetwork) { // not required
		return nil
	}

	if m.WifiNetwork != nil {
		if err := m.WifiNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiNetwork")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app facade home response based on the context it is used
func (m *AppFacadeHomeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeoIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptimization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppFacadeHomeResponse) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.Capabilities != nil {
		if err := m.Capabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {
		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	if m.Devices != nil {
		if err := m.Devices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devices")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateGeoIP(ctx context.Context, formats strfmt.Registry) error {

	if m.GeoIP != nil {
		if err := m.GeoIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoIp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geoIp")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateNetworkStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkStatus != nil {
		if err := m.NetworkStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	if m.Nodes != nil {
		if err := m.Nodes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodes")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateOptimization(ctx context.Context, formats strfmt.Registry) error {

	if m.Optimization != nil {
		if err := m.Optimization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optimization")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *AppFacadeHomeResponse) contextValidateWifiNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.WifiNetwork != nil {
		if err := m.WifiNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiNetwork")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppFacadeHomeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppFacadeHomeResponse) UnmarshalBinary(b []byte) error {
	var res AppFacadeHomeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
