// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
//
// swagger:model Device
type Device struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// device's appTime config
	AppTime interface{} `json:"appTime,omitempty"`

	// band steering
	BandSteering *DeviceBandSteering `json:"bandSteering,omitempty"`

	// client steering
	ClientSteering *DeviceClientSteering `json:"clientSteering,omitempty"`

	// connection state
	ConnectionState string `json:"connectionState,omitempty"`

	// time at which connectionStateChange last changed
	// Format: date-time
	ConnectionStateChangeAt strfmt.DateTime `json:"connectionStateChangeAt,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// favorite
	Favorite *bool `json:"favorite,omitempty"`

	// Time at which user removed device from device list
	// Format: date-time
	HiddenAt strfmt.DateTime `json:"hiddenAt,omitempty"`

	// host name from the device/user settings
	HostName string `json:"hostName,omitempty"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// unique id of the WifiNetwork.keys[x] that the device is connected to or last connected to
	KeyID float64 `json:"keyId,omitempty"`

	// location Id
	LocationID ObjectID `json:"locationId,omitempty"`

	// mac
	// Required: true
	Mac *string `json:"mac"`

	// wifi, ethernet, or moca
	Medium string `json:"medium,omitempty"`

	// Unique identifier for mobile devices that the mobile app generates and controls
	MobileAppDeviceUUID string `json:"mobileAppDeviceUuid,omitempty"`

	// device model
	Model string `json:"model,omitempty"`

	// network Id
	NetworkID string `json:"networkId,omitempty"`

	// offline since
	// Format: date-time
	OfflineSince strfmt.DateTime `json:"offlineSince,omitempty"`

	// online since
	// Format: date-time
	OnlineSince strfmt.DateTime `json:"onlineSince,omitempty"`

	// qos
	Qos *Qos `json:"qos,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// vap type
	// Enum: [backhaul onboarding home guest auxiliary1 auxiliary2 fronthaul captivePortal]
	VapType string `json:"vapType,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBandSteering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSteering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStateChangeAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiddenAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfflineSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnlineSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVapType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateBandSteering(formats strfmt.Registry) error {
	if swag.IsZero(m.BandSteering) { // not required
		return nil
	}

	if m.BandSteering != nil {
		if err := m.BandSteering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateClientSteering(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSteering) { // not required
		return nil
	}

	if m.ClientSteering != nil {
		if err := m.ClientSteering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateConnectionStateChangeAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStateChangeAt) { // not required
		return nil
	}

	if err := validate.FormatOf("connectionStateChangeAt", "body", "date-time", m.ConnectionStateChangeAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateHiddenAt(formats strfmt.Registry) error {
	if swag.IsZero(m.HiddenAt) { // not required
		return nil
	}

	if err := validate.FormatOf("hiddenAt", "body", "date-time", m.HiddenAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Device) validateLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := m.LocationID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locationId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locationId")
		}
		return err
	}

	return nil
}

func (m *Device) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateOfflineSince(formats strfmt.Registry) error {
	if swag.IsZero(m.OfflineSince) { // not required
		return nil
	}

	if err := validate.FormatOf("offlineSince", "body", "date-time", m.OfflineSince.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateOnlineSince(formats strfmt.Registry) error {
	if swag.IsZero(m.OnlineSince) { // not required
		return nil
	}

	if err := validate.FormatOf("onlineSince", "body", "date-time", m.OnlineSince.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateQos(formats strfmt.Registry) error {
	if swag.IsZero(m.Qos) { // not required
		return nil
	}

	if m.Qos != nil {
		if err := m.Qos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceTypeVapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["backhaul","onboarding","home","guest","auxiliary1","auxiliary2","fronthaul","captivePortal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceTypeVapTypePropEnum = append(deviceTypeVapTypePropEnum, v)
	}
}

const (

	// DeviceVapTypeBackhaul captures enum value "backhaul"
	DeviceVapTypeBackhaul string = "backhaul"

	// DeviceVapTypeOnboarding captures enum value "onboarding"
	DeviceVapTypeOnboarding string = "onboarding"

	// DeviceVapTypeHome captures enum value "home"
	DeviceVapTypeHome string = "home"

	// DeviceVapTypeGuest captures enum value "guest"
	DeviceVapTypeGuest string = "guest"

	// DeviceVapTypeAuxiliary1 captures enum value "auxiliary1"
	DeviceVapTypeAuxiliary1 string = "auxiliary1"

	// DeviceVapTypeAuxiliary2 captures enum value "auxiliary2"
	DeviceVapTypeAuxiliary2 string = "auxiliary2"

	// DeviceVapTypeFronthaul captures enum value "fronthaul"
	DeviceVapTypeFronthaul string = "fronthaul"

	// DeviceVapTypeCaptivePortal captures enum value "captivePortal"
	DeviceVapTypeCaptivePortal string = "captivePortal"
)

// prop value enum
func (m *Device) validateVapTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceTypeVapTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Device) validateVapType(formats strfmt.Registry) error {
	if swag.IsZero(m.VapType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVapTypeEnum("vapType", "body", m.VapType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device based on the context it is used
func (m *Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBandSteering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientSteering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) contextValidateBandSteering(ctx context.Context, formats strfmt.Registry) error {

	if m.BandSteering != nil {
		if err := m.BandSteering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bandSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bandSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Device) contextValidateClientSteering(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientSteering != nil {
		if err := m.ClientSteering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientSteering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientSteering")
			}
			return err
		}
	}

	return nil
}

func (m *Device) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Device) contextValidateLocationID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LocationID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locationId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("locationId")
		}
		return err
	}

	return nil
}

func (m *Device) contextValidateQos(ctx context.Context, formats strfmt.Registry) error {

	if m.Qos != nil {
		if err := m.Qos.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qos")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qos")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
