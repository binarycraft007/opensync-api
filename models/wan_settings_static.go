// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WanSettingsStatic wan settings static
//
// swagger:model WanSettingsStatic
type WanSettingsStatic struct {

	// default gateway
	// Required: true
	DefaultGateway *string `json:"defaultGateway"`

	// ip address
	// Required: true
	IPAddress *string `json:"ipAddress"`

	// subnet mask
	// Required: true
	SubnetMask *string `json:"subnetMask"`
}

// Validate validates this wan settings static
func (m *WanSettingsStatic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WanSettingsStatic) validateDefaultGateway(formats strfmt.Registry) error {

	if err := validate.Required("defaultGateway", "body", m.DefaultGateway); err != nil {
		return err
	}

	return nil
}

func (m *WanSettingsStatic) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *WanSettingsStatic) validateSubnetMask(formats strfmt.Registry) error {

	if err := validate.Required("subnetMask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wan settings static based on context it is used
func (m *WanSettingsStatic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WanSettingsStatic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WanSettingsStatic) UnmarshalBinary(b []byte) error {
	var res WanSettingsStatic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
