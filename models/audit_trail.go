// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditTrail audit trail
//
// swagger:model AuditTrail
type AuditTrail struct {

	// The user who made the change
	// Required: true
	Author *string `json:"author"`

	// The date and time the change was made
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// The customer id
	// Required: true
	CustomerID *string `json:"customerId"`

	// The details of the event
	// Required: true
	Details interface{} `json:"details"`

	// The type of event that occurred
	// Required: true
	// Enum: [CustomerCreated CustomerDeleted CustomerConfigChanged LocationCreated LocationDeleted LocationConfigChanged NodeClaimed NodeUnclaimed MultiNodeClaimed NodeSwapped WifiConfigChanged SecurityPolicyChanged]
	Event *string `json:"event"`

	// The date and time the change will expire
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expiresAt"`

	// id
	ID ObjectID `json:"id,omitempty"`

	// The location id
	LocationID string `json:"locationId,omitempty"`

	// The partner id
	PartnerID string `json:"partnerId,omitempty"`

	// The request id
	XRequestID string `json:"xRequestId,omitempty"`
}

// Validate validates this audit trail
func (m *AuditTrail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditTrail) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *AuditTrail) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditTrail) validateCustomerID(formats strfmt.Registry) error {

	if err := validate.Required("customerId", "body", m.CustomerID); err != nil {
		return err
	}

	return nil
}

func (m *AuditTrail) validateDetails(formats strfmt.Registry) error {

	if m.Details == nil {
		return errors.Required("details", "body", nil)
	}

	return nil
}

var auditTrailTypeEventPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CustomerCreated","CustomerDeleted","CustomerConfigChanged","LocationCreated","LocationDeleted","LocationConfigChanged","NodeClaimed","NodeUnclaimed","MultiNodeClaimed","NodeSwapped","WifiConfigChanged","SecurityPolicyChanged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditTrailTypeEventPropEnum = append(auditTrailTypeEventPropEnum, v)
	}
}

const (

	// AuditTrailEventCustomerCreated captures enum value "CustomerCreated"
	AuditTrailEventCustomerCreated string = "CustomerCreated"

	// AuditTrailEventCustomerDeleted captures enum value "CustomerDeleted"
	AuditTrailEventCustomerDeleted string = "CustomerDeleted"

	// AuditTrailEventCustomerConfigChanged captures enum value "CustomerConfigChanged"
	AuditTrailEventCustomerConfigChanged string = "CustomerConfigChanged"

	// AuditTrailEventLocationCreated captures enum value "LocationCreated"
	AuditTrailEventLocationCreated string = "LocationCreated"

	// AuditTrailEventLocationDeleted captures enum value "LocationDeleted"
	AuditTrailEventLocationDeleted string = "LocationDeleted"

	// AuditTrailEventLocationConfigChanged captures enum value "LocationConfigChanged"
	AuditTrailEventLocationConfigChanged string = "LocationConfigChanged"

	// AuditTrailEventNodeClaimed captures enum value "NodeClaimed"
	AuditTrailEventNodeClaimed string = "NodeClaimed"

	// AuditTrailEventNodeUnclaimed captures enum value "NodeUnclaimed"
	AuditTrailEventNodeUnclaimed string = "NodeUnclaimed"

	// AuditTrailEventMultiNodeClaimed captures enum value "MultiNodeClaimed"
	AuditTrailEventMultiNodeClaimed string = "MultiNodeClaimed"

	// AuditTrailEventNodeSwapped captures enum value "NodeSwapped"
	AuditTrailEventNodeSwapped string = "NodeSwapped"

	// AuditTrailEventWifiConfigChanged captures enum value "WifiConfigChanged"
	AuditTrailEventWifiConfigChanged string = "WifiConfigChanged"

	// AuditTrailEventSecurityPolicyChanged captures enum value "SecurityPolicyChanged"
	AuditTrailEventSecurityPolicyChanged string = "SecurityPolicyChanged"
)

// prop value enum
func (m *AuditTrail) validateEventEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, auditTrailTypeEventPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuditTrail) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event); err != nil {
		return err
	}

	// value enum
	if err := m.validateEventEnum("event", "body", *m.Event); err != nil {
		return err
	}

	return nil
}

func (m *AuditTrail) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expiresAt", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditTrail) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

// ContextValidate validate this audit trail based on the context it is used
func (m *AuditTrail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditTrail) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditTrail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditTrail) UnmarshalBinary(b []byte) error {
	var res AuditTrail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
