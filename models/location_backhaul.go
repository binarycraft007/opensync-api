// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocationBackhaul location backhaul
//
// swagger:model LocationBackhaul
type LocationBackhaul struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Represents whether or not dynamic beaconing is available for this location.
	// Can be either auto, enable, or disable
	DynamicBeacon *string `json:"dynamicBeacon,omitempty"`

	// auto || enable || disable
	// Required: true
	Mode *string `json:"mode"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// auto || enable || disable
	Wds *string `json:"wds,omitempty"`

	// 63 characters, all CAPS, Hexadecimal
	// Required: true
	WpaKey *string `json:"wpaKey"`

	// auto || psk2 || sae-mixed
	WpaMode *string `json:"wpaMode,omitempty"`

	// psk2 || sae-mixed
	WpaModeRealized string `json:"wpaModeRealized,omitempty"`
}

// Validate validates this location backhaul
func (m *LocationBackhaul) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWpaKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocationBackhaul) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *LocationBackhaul) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocationBackhaul) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *LocationBackhaul) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocationBackhaul) validateWpaKey(formats strfmt.Registry) error {

	if err := validate.Required("wpaKey", "body", m.WpaKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this location backhaul based on context it is used
func (m *LocationBackhaul) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LocationBackhaul) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocationBackhaul) UnmarshalBinary(b []byte) error {
	var res LocationBackhaul
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
