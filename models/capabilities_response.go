// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapabilitiesResponse capabilities response
//
// swagger:model CapabilitiesResponse
type CapabilitiesResponse struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// capabilities changed at
	// Required: true
	// Format: date-time
	CapabilitiesChangedAt *strfmt.DateTime `json:"capabilitiesChangedAt"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// support for device freeze templates
	// Required: true
	DeviceFreeze *Capability `json:"deviceFreeze"`

	// ISP speed test availability for a location
	// Required: true
	IspSpeedTest *Capability `json:"ispSpeedTest"`

	// support for non-host access (a.k.a., Single SSID, Multi Password onboarding)
	// Required: true
	MultiPasswordSSID *Capability `json:"multiPasswordSSID"`

	// network configuration
	// Required: true
	NetworkConfiguration *NetworkConfigurationCapabilitiesResponse `json:"networkConfiguration"`

	// Firmware capabilities for security features.
	// Required: true
	Security *SecurityCapabilitiesResponse `json:"security"`

	// support for wifi motion features
	// Required: true
	WifiMotion *Capability `json:"wifiMotion"`
}

// Validate validates this capabilities response
func (m *CapabilitiesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapabilitiesChangedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceFreeze(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIspSpeedTest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultiPasswordSSID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiMotion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilitiesResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *CapabilitiesResponse) validateCapabilitiesChangedAt(formats strfmt.Registry) error {

	if err := validate.Required("capabilitiesChangedAt", "body", m.CapabilitiesChangedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("capabilitiesChangedAt", "body", "date-time", m.CapabilitiesChangedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CapabilitiesResponse) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CapabilitiesResponse) validateDeviceFreeze(formats strfmt.Registry) error {

	if err := validate.Required("deviceFreeze", "body", m.DeviceFreeze); err != nil {
		return err
	}

	if m.DeviceFreeze != nil {
		if err := m.DeviceFreeze.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceFreeze")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceFreeze")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) validateIspSpeedTest(formats strfmt.Registry) error {

	if err := validate.Required("ispSpeedTest", "body", m.IspSpeedTest); err != nil {
		return err
	}

	if m.IspSpeedTest != nil {
		if err := m.IspSpeedTest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ispSpeedTest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ispSpeedTest")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) validateMultiPasswordSSID(formats strfmt.Registry) error {

	if err := validate.Required("multiPasswordSSID", "body", m.MultiPasswordSSID); err != nil {
		return err
	}

	if m.MultiPasswordSSID != nil {
		if err := m.MultiPasswordSSID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiPasswordSSID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiPasswordSSID")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) validateNetworkConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("networkConfiguration", "body", m.NetworkConfiguration); err != nil {
		return err
	}

	if m.NetworkConfiguration != nil {
		if err := m.NetworkConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	if m.Security != nil {
		if err := m.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) validateWifiMotion(formats strfmt.Registry) error {

	if err := validate.Required("wifiMotion", "body", m.WifiMotion); err != nil {
		return err
	}

	if m.WifiMotion != nil {
		if err := m.WifiMotion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiMotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiMotion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this capabilities response based on the context it is used
func (m *CapabilitiesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceFreeze(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIspSpeedTest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMultiPasswordSSID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiMotion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapabilitiesResponse) contextValidateDeviceFreeze(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceFreeze != nil {
		if err := m.DeviceFreeze.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceFreeze")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceFreeze")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) contextValidateIspSpeedTest(ctx context.Context, formats strfmt.Registry) error {

	if m.IspSpeedTest != nil {
		if err := m.IspSpeedTest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ispSpeedTest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ispSpeedTest")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) contextValidateMultiPasswordSSID(ctx context.Context, formats strfmt.Registry) error {

	if m.MultiPasswordSSID != nil {
		if err := m.MultiPasswordSSID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("multiPasswordSSID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("multiPasswordSSID")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) contextValidateNetworkConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConfiguration != nil {
		if err := m.NetworkConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security != nil {
		if err := m.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security")
			}
			return err
		}
	}

	return nil
}

func (m *CapabilitiesResponse) contextValidateWifiMotion(ctx context.Context, formats strfmt.Registry) error {

	if m.WifiMotion != nil {
		if err := m.WifiMotion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wifiMotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wifiMotion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapabilitiesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapabilitiesResponse) UnmarshalBinary(b []byte) error {
	var res CapabilitiesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
