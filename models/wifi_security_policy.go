// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WifiSecurityPolicy wifi security policy
//
// swagger:model WifiSecurityPolicy
type WifiSecurityPolicy struct {

	// content filter IDs: kids || teenagers || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate
	Content []string `json:"content"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Person Mongo ID || device mac
	// Required: true
	ID *string `json:"id"`

	// iotProtect enable/disable (enable requires secureAndProtect already enabled)
	IotProtect bool `json:"iotProtect,omitempty"`

	// optional reason used to identify why it is being disabled (device level only)
	IotProtectReason string `json:"iotProtectReason,omitempty"`

	// iot protect updated at
	// Format: date-time
	IotProtectUpdatedAt strfmt.DateTime `json:"iotProtectUpdatedAt,omitempty"`

	// has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]
	SecureWebsites interface{} `json:"secureWebsites,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// has two nested properties: whitelist[dnsObject] and blacklist[dnsObject]
	Websites interface{} `json:"websites,omitempty"`
}

// Validate validates this wifi security policy
func (m *WifiSecurityPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIotProtectUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WifiSecurityPolicy) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WifiSecurityPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *WifiSecurityPolicy) validateIotProtectUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.IotProtectUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("iotProtectUpdatedAt", "body", "date-time", m.IotProtectUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WifiSecurityPolicy) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wifi security policy based on context it is used
func (m *WifiSecurityPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WifiSecurityPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WifiSecurityPolicy) UnmarshalBinary(b []byte) error {
	var res WifiSecurityPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
