// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WifiNetworkKey wifi network key
//
// swagger:model WifiNetworkKey
type WifiNetworkKey struct {

	// schema version # of a Mongo document
	// Required: true
	Version *string `json:"_version"`

	// home | guests | internetAccessOnly
	// Required: true
	AccessZone *string `json:"accessZone"`

	// home:0 | internetAccessOnly:1 | guests:2 | guests:3 | guests:4
	AccessZoneID float64 `json:"accessZoneId,omitempty"`

	// content filter IDs: kids || teenagers || adBlocking || spamPhishMalware || adultAndSensitive || workAppropriate
	Content []string `json:"content"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// devices can connect using this encryptionKey
	Enable bool `json:"enable,omitempty"`

	// a password for parent WifiNetwork.ssid
	// Required: true
	EncryptionKey *string `json:"encryptionKey"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// encryptionKey | phoneNumber
	// Required: true
	Format *string `json:"format"`

	// id
	// Required: true
	ID *float64 `json:"id"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this wifi network key
func (m *WifiNetworkKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WifiNetworkKey) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("_version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateAccessZone(formats strfmt.Registry) error {

	if err := validate.Required("accessZone", "body", m.AccessZone); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateEncryptionKey(formats strfmt.Registry) error {

	if err := validate.Required("encryptionKey", "body", m.EncryptionKey); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *WifiNetworkKey) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wifi network key based on context it is used
func (m *WifiNetworkKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WifiNetworkKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WifiNetworkKey) UnmarshalBinary(b []byte) error {
	var res WifiNetworkKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
